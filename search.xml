<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构之线性表中简单的顺序表</title>
      <link href="/2022/03/24/fa43e29c2fcd-q1jun/"/>
      <url>/2022/03/24/fa43e29c2fcd-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表-Linear-List"><a href="#线性表-Linear-List" class="headerlink" title="线性表(Linear List)"></a>线性表(Linear List)</h1><p>线性表是具有<code>相同数据类型</code>，每个数据元素<code>所占空间一样大</code>的n个数据元素的<code>有限</code>序列(有次序)。</p><p>L&#x3D;($a_1,a_2,…,a_i,a_{i+1},…,a_n$)</p><p>其中$a_i$是线性表中的“第i个”元素线性表中的<code>位序</code></p><p>$a_1$是表头元素；$a_n$是表尾元素。</p><p>除第一个元素外，每个元素有且仅有一个<code>直接前驱</code>；除最后一个元素外，每个元素有且仅有一个<code>直接后继</code>。</p><h2 id="0x01-线性表的常用实现函数："><a href="#0x01-线性表的常用实现函数：" class="headerlink" title="0x01 线性表的常用实现函数："></a>0x01 线性表的常用实现函数：</h2><p>InitList(&amp;L): 初始化表。构造一个空的线性表L，分配内存空间。<br>DestroyList(&amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</p><p>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。<br>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</p><p>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。<br>GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</p><p>其他常用操作： Length(L)：求表长。返回线性表L的长度，即L中数据元素的个数。<br>PrintList(L)：输出操作。按前后顺序输出线性表L的所有元素值。<br>Empty(L)：判空操作。若L为空表，则返回true，否则返回false。</p><h2 id="0x02-顺序表"><a href="#0x02-顺序表" class="headerlink" title="0x02 顺序表"></a>0x02 顺序表</h2><p>顺序表是用<code>顺序存储</code>的方式实现线性表。</p><blockquote><p>顺序存储：</p><p>把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p></blockquote><p>顺序表的特点：</p><ol><li>随机访问，即可在O(1)的时间内找到第 i 个元素。</li><li>存储密度高，每个节点之存储数据元素。</li><li>扩展容量不方便(即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高)。</li><li>插入、删除操作不方便，需要移动大量元素。</li></ol><h3 id="0x0201-顺序表–静态分配"><a href="#0x0201-顺序表–静态分配" class="headerlink" title="0x0201 顺序表–静态分配"></a>0x0201 顺序表–静态分配</h3><p>静态分配方式：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10<span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  ElemType data[MaxSize];<span class="comment">//用静态的“数组”来存放数据元素</span></span><br><span class="line">  <span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义(静态分配方式)</span></span><br></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10 <span class="comment">//定义最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MaxSize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * @description: 初始化顺序表 </span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList&amp; L)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; MaxSize; i++) &#123;</span><br><span class="line">        L.data[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    SqList L; <span class="comment">//声明一个顺序表</span></span><br><span class="line">    InitList(L); <span class="comment">//初始化顺序表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; L.length; i++) &#123; <span class="comment">//打印整个 data 数组</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>, i, L.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//最好使用 GetElem(L , i)这种方式来访问顺序表的数据元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顺序表的静态分配的局限性在于顺序表的表长在开始时就要确定，然后就无法更改（存储空间是<code>静态</code>的）。</p></blockquote><h3 id="0x0202-顺序表–动态分配"><a href="#0x0202-顺序表–动态分配" class="headerlink" title="0x0202 顺序表–动态分配"></a>0x0202 顺序表–动态分配</h3><p>为了动态分配存储空间，提高内存空间的使用效率，可以采用动态分配的分配方式。</p><p>动态分配方式：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10 <span class="comment">//顺序表的初始长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqlist_dynamic</span> //顺序表的类型定义</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType* data; <span class="comment">//指向动态分配数组的指针</span></span><br><span class="line">    <span class="type">int</span> MaxSize; <span class="comment">//顺序表的最大容量</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>动态分配：动态申请和释放内存空间。</p><ul><li>申请：malloc函数</li><li>释放：free函数</li></ul></blockquote><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10 <span class="comment">//顺序表的初始长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>//顺序表的类型定义</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span>* data; <span class="comment">//指向动态分配数组的指针</span></span><br><span class="line">    <span class="type">int</span> MaxSize; <span class="comment">//顺序表的最大容量</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;Sqlist_dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 初始化顺序表 </span></span><br><span class="line"><span class="comment"> * @param &#123;Sqlist_dynamic&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(Sqlist_dynamic&amp; L)</span> &#123;</span><br><span class="line">    <span class="comment">//用 malloc 函数申请一片连续的存储空间</span></span><br><span class="line">    L.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(InitSize * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.MaxSize = InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 增加动态数组的长度 </span></span><br><span class="line"><span class="comment"> * @param &#123;Sqlist_dynamic&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; len</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IncreaseSize</span><span class="params">(Sqlist_dynamic&amp; L, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = L.data;</span><br><span class="line">    L.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>((L.MaxSize + len) * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        L.data[i] = p[i]; <span class="comment">//将数据复制到新区域</span></span><br><span class="line">    &#125;</span><br><span class="line">    L.MaxSize = L.MaxSize + len; <span class="comment">//顺序表最大长度 + len</span></span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">//释放原来的内存空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Sqlist_dynamic L;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="comment">/* <span class="doctag">TODO:</span> 随意插入几个元素 */</span></span><br><span class="line">    IncreaseSize(L, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0203-顺序表的插入"><a href="#0x0203-顺序表的插入" class="headerlink" title="0x0203 顺序表的插入"></a>0x0203 顺序表的插入</h3><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><p>举第一个栗子🌰：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 顺序表的插入，将元素e插入i处</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length;j &gt;= i;j--) &#123; <span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e; <span class="comment">//在位置i处放入e</span></span><br><span class="line">    L.length++; <span class="comment">//长度加1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处省略：</p><ul><li>判断i是否合法，即 <code>i</code> 在<code>[1,length+1]</code>。</li><li>判断顺序表是否存满，若存满则无法插入数据。</li><li>返回是否操作成功的提示。</li></ul><p>举第二个栗子🌰（改进后）：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 顺序表的插入，将元素e插入i处</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;bool&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert_better</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//判断i的范围是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= MaxSize) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//判断当前空间是否能放下e</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--) &#123; <span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e; <span class="comment">//在位置i处放入e</span></span><br><span class="line">    L.length++; <span class="comment">//长度加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//插入成功，返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p><strong>最好情况</strong>：新元素插入到表尾，不需要移动元素。<br>i &#x3D; n + 1，循环0次；最好时间复杂度 &#x3D; $O(1)$</p><p><strong>最坏情况</strong>：新元素插入到表头，需要将n个元素全部向后移动<br>i &#x3D; 1，循环n次；最坏时间复杂度 &#x3D; $O(n)$</p><p><strong>平均情况</strong>：新元素插入到任何一个位置的概率相同，即 i &#x3D; 1,2,3,……,length+1 的概率都是$p &#x3D; 1&#x2F;(n+1)$<br>当i &#x3D; 1，循环n次；当i &#x3D; 2时，循环n - 1次；当i &#x3D; 3时，循环n - 2次；……当i &#x3D; n + 1时,循环0次。<br>平均循环次数 &#x3D; $np+(n-1)p+(n-2)p+……+1·p &#x3D; [\frac{n(n+1)}2]·[\frac{1}{n+1}]&#x3D;\frac{n}2$<br>$\therefore$ 平均时间复杂度 &#x3D; $O(n)$</p><h3 id="0x0204-顺序表的删除"><a href="#0x0204-顺序表的删除" class="headerlink" title="0x0204 顺序表的删除"></a>0x0204 顺序表的删除</h3><h4 id="实现：-1"><a href="#实现：-1" class="headerlink" title="实现："></a>实现：</h4><p>举个栗子🌰：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&amp;&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;int&amp;&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;bool&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, <span class="type">int</span>&amp; e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//判断i的范围是否有效</span></span><br><span class="line">    e = L.data[i - <span class="number">1</span>]; <span class="comment">//将被删除的元素值赋值给e</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i;j &lt; L.length;j++) &#123; <span class="comment">//将第i个位置后的元素前移</span></span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--; <span class="comment">//线性表长度减1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//返回ture，删除操作成功。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度分析：-1"><a href="#时间复杂度分析：-1" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p>删除操作的时间复杂度和插入操作的时间复杂度相同。</p><h3 id="0x0205-顺序表的查找-按位查找"><a href="#0x0205-顺序表的查找-按位查找" class="headerlink" title="0x0205 顺序表的查找(按位查找)"></a>0x0205 顺序表的查找(按位查找)</h3><h4 id="实现：-2"><a href="#实现：-2" class="headerlink" title="实现："></a>实现：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 查找第i个元素，返回给定值.</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; i</span></span><br><span class="line"><span class="comment"> * @return &#123;int&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ElemType <span class="title function_">GetElemByIndex</span><span class="params">(SqList L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> L.data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度分析：-2"><a href="#时间复杂度分析：-2" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p>直接返回值，时间复杂度 &#x3D; $O\left(1\right)$</p><h3 id="0x0206-顺序表的查找-按值查找"><a href="#0x0206-顺序表的查找-按值查找" class="headerlink" title="0x0206 顺序表的查找(按值查找)"></a>0x0206 顺序表的查找(按值查找)</h3><h4 id="实现：-3"><a href="#实现：-3" class="headerlink" title="实现："></a>实现：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * @description: 查找具有给定关键字值的元素</span></span><br><span class="line"><span class="comment"> * @param &#123;SqList&#125; L</span></span><br><span class="line"><span class="comment"> * @param &#123;int&#125; e</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetElemByValue</span><span class="params">(SqList L, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>; <span class="comment">//数组下标为i的元素值等于e，返回其位序i+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//退出了循环，说明查找失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ps：C语言中不能用<code>==</code>来直接比较两个结构体变量。</p></blockquote><h4 id="时间复杂度分析：-3"><a href="#时间复杂度分析：-3" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p><strong>最好情况</strong>：目标元素在表头。<br>循环1次；最好时间复杂度 &#x3D; $O(1)$</p><p><strong>最坏情况</strong>：目标元素在表尾<br>循环n次；最坏时间复杂度 &#x3D; $O(n)$</p><p><strong>平均情况</strong>：假设目标元素出现在任何一个位置的概率相同，概率都是$p &#x3D; \cfrac 1n$<br>平均循环次数 &#x3D; $1\cdot\cfrac1n+2\cdot\cfrac1n+3\cdot\cfrac1n+……+n\cdot\cfrac1n &#x3D; [\frac{n(n+1)}2]·[\frac{1}{n}]&#x3D;\frac{n+1}2$<br>$\therefore$ 平均时间复杂度 &#x3D; $O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 11</title>
      <link href="/2021/08/15/439a96847eed-q1jun/"/>
      <url>/2021/08/15/439a96847eed-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记-11"><a href="#Spring-Boot-学习笔记-11" class="headerlink" title="Spring Boot 学习笔记 11"></a>Spring Boot 学习笔记 11</h1><h2 id="0x01-Dubbo-SSM框架"><a href="#0x01-Dubbo-SSM框架" class="headerlink" title="0x01 Dubbo-SSM框架"></a>0x01 Dubbo-SSM框架</h2><p><em>接口工程：</em><br>    存放实体Bean和业务接口<br>_服务提供者：_它是一个Springboot框架web项目，集成MyBatis，Redis</p><ul><li>添加依赖：Mybatis依赖，Mysql驱动依赖，Dubbo依赖，zookeeper依赖，Redis依赖</li><li>配置Springboot核心配置文件<ul><li>配置连接数据库</li><li>配置连接redis数据库dubbo<br>  _服务消费者：_它是一个Springboot框架web项目，集成JSP，dubbo</li></ul></li><li>添加依赖：Dubbo，zookeeper依赖，解析JSP页面的依赖，接口工程</li><li>配置Springboot核心配置文件<ul><li>配置试图解析器</li><li>配置dubbo</li></ul></li></ul><h2 id="0x02-构建Dubbo-SSM框架"><a href="#0x02-构建Dubbo-SSM框架" class="headerlink" title="0x02 构建Dubbo-SSM框架"></a>0x02 构建Dubbo-SSM框架</h2><p><em><strong>First and formost</strong></em>（首先），我们依次创建Maven接口项目工程、Springboot+Maven服务提供者（Provider）项目工程、Springboot+Maven服务消费者（Consumer）项目工程。</p><p><em><strong>In addition</strong></em>（其次），我们在提供者（Provider）项目工程文件下添加一个Mybatis逆向工程的配置文件GeneratorMapper.xml:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库的 JDBC 驱动包所在位置，指定到你本机的完整路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;D:\mysql-connector-java-5.1.38.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 table 表信息内容体，targetRuntime 指定采用 MyBatis3 的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 抑制生成注释，由于生成的注释都是英文的，可以不让它生成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://192.168.154.128:3306/springboot&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 model 类，targetPackage 指定 model 类的包名， targetProject 指定</span></span><br><span class="line"><span class="comment">        生成的 model 放在 eclipse 的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.bjpowernode.springboot.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;C:\Users\Administrator\Desktop\04-SpringBoot\code\IDEA-springboot-projectes\023-springboot-dubbo-ssm-interface\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 MyBatis 的 Mapper.xml 文件，targetPackage 指定 mapper.xml 文件的</span></span><br><span class="line"><span class="comment">        包名， targetProject 指定生成的 mapper.xml 放在 eclipse 的哪个工程下面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.bjpowernode.springboot.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成 MyBatis 的 Mapper 接口类文件,targetPackage 指定 Mapper 接口类的包</span></span><br><span class="line"><span class="comment">        名， targetProject 指定生成的 Mapper 接口放在 eclipse 的哪个工程下面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.bjpowernode.springboot.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库表名及对应的 Java 模型类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_student&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Student&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意，这里要改成绝对路径！而且不能出现中文，否则构建项目会出现问题。</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 生成 model 类，targetPackage 指定 model 类的包名， targetProject 指定</span></span><br><span class="line"><span class="comment">        生成的 model 放在 eclipse 的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.bjpowernode.springboot.model&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetProject</span>=<span class="string">&quot;C:\Users\Administrator\Desktop\04-SpringBoot\code\IDEA-springboot-projectes\023-springboot-dubbo-ssm-interface\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在POM.xml中添加生成插件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis 代码自动生成插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再添加Redis依赖，接口工程依赖，zookeeper注册中心依赖，Dubbo依赖，Mybatis依赖，Mysql驱动依赖到POM.xml中:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Dubbo集成SpringBoot起步依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--MyBatis集成Springboot起步依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--MySQL驱动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--SpringBoot集成Redis起步依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接口工程--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>023-springboot-dubbo-ssm-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置Provider项目中的核心配置文件:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置连接数据库信息</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">username</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">password</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置dubbo配置</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">024-springboot-dubbo-ssm-provider</span></span><br><span class="line"><span class="comment">#声明当前工程为服务提供者</span></span><br><span class="line"><span class="attr">spring.dubbo.server</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#设置注册中心</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://localhost:2181</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置redis配置</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：Mybatis生成的逆向文件Model中的java构造类一定要序列化</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">// implements Serializable序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>In the second place</strong></em>，在Consumer项目工程文件中添加POM.xml依赖:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dubbo集成SpringBoot框架起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--zookeeper注册中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接口工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>023-springboot-dubbo-ssm-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SpringBoot集成JSP,仅仅只是展示JSP页面需要添加解析jsp页面的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且添加JSP文件到编译资源文件中：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Consumer项目工程的核心配置文件：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置dubbo配置</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">025-springboot-dubbo-ssm-consumer</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置视图解析器</span></span><br><span class="line"><span class="attr">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来在Application.java的同级目录或次级目录添加控制层包web，包内创建StudentController.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference(interfaceName = &quot;com.bjpowernode.springboot.service.StudentService&quot;, version = &quot;1.0.0&quot;, check = false)</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RESTFul风格</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">studentDetail</span><span class="params">(Model model,</span></span><br><span class="line"><span class="params">                                <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentService.queryStudentById(id);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;student&quot;</span>, student);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;studentDetail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/student/all/count&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    Object <span class="title function_">allStudentCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">allStudentCount</span> <span class="operator">=</span> studentService.queryAllStudentCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生总人数为:&quot;</span> + allStudentCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了实现这一控制层，我们需要先在接口工程项目文件（Interface）中创建所需要的接口StudentService.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据学生ID查询详情</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Student <span class="title function_">queryStudentById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取学生总人数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">queryAllStudentCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在服务提供者（Provide）中创建该接口的实现类StudentServiceImpl.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service(interfaceName = &quot;com.bjpowernode.springboot.service.StudentService&quot;,version = &quot;1.0.0&quot;,timeout = 15000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">queryStudentById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">queryAllStudentCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提升系统性能,用户体验提升</span></span><br><span class="line">        <span class="comment">//首先去redis缓存中查询,如果有:直接使用,如果没有:去数据库查询并存放到redis缓存中</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">allStudentCount</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(<span class="string">&quot;allStudentCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否有值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == allStudentCount) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//去数据库查询</span></span><br><span class="line">            allStudentCount = studentMapper.selectAllStudentCount();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//并存放到redis缓存中</span></span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;allStudentCount&quot;</span>,allStudentCount,<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> allStudentCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>Last but not least</strong></em>，在Consumer项目工程文件中，在src&#x2F;main&#x2F;中创建webapp包，来存放jsp文件webapp&#x2F;studentDetail.jsp:</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;学生详情&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;学生编号:$&#123;student.id&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;学生姓名:$&#123;student.name&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;学生年龄:$&#123;student.age&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x03-运行Dubbo-SSM框架"><a href="#0x03-运行Dubbo-SSM框架" class="headerlink" title="0x03 运行Dubbo-SSM框架"></a>0x03 运行Dubbo-SSM框架</h2><p>同时构建，并启动三个项目：</p><ul><li>Maven接口项目工程</li><li>Springboot+Maven服务提供者（Provider）项目工程</li><li>Springboot+Maven服务消费者（Consumer）项目工程<br>打开浏览器，输入<a target="_blank" rel="noopener" href="http://localhost:8080/student/detail/1">http://localhost:8080/student/detail/1</a><br>浏览器输出：<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">学生编号：1</span><br><span class="line">学生姓名：222</span><br><span class="line">学生年龄：25</span><br></pre></td></tr></table></figure><strong>Dubbo-SSM框架搭建成功！congratulations！</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 10</title>
      <link href="/2021/08/14/ce8a38b3b2a5-q1jun/"/>
      <url>/2021/08/14/ce8a38b3b2a5-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记-10"><a href="#Spring-Boot-学习笔记-10" class="headerlink" title="Spring Boot 学习笔记 10"></a>Spring Boot 学习笔记 10</h1><h2 id="SpringBoot集成Dubbo-代码调试"><a href="#SpringBoot集成Dubbo-代码调试" class="headerlink" title="SpringBoot集成Dubbo 代码调试"></a>SpringBoot集成Dubbo 代码调试</h2><p>前一篇文章中，我们已经将 接口项目、消费者项目、提供者项目 配置完成，接下来就是写代码的事情了。<br>在Consumer项目的控制层中: StudentCOntroller.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//dubbo:reference interface=&quot;&quot; version=&quot;&quot; check=false</span></span><br><span class="line">    <span class="meta">@Reference(interfaceClass = StudentService.class,version = &quot;1.0.0&quot;,check = false)</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student/count&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> Object <span class="title function_">studentCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">allStudentCount</span> <span class="operator">=</span> studentService.queryAllStudentCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生总人数为:&quot;</span>+allStudentCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候我们用到的接口<code>private StudentService studentService;</code>并没有被创建，所以我们要创建一个 StudentService接口，但是我们并不在本项目中创建，而是移步到Interface项目中创建这个接口。<br>在Interface项目中的src&#x2F;java&#x2F;sample&#x2F;springboot&#x2F;中创建一个service包：service，包内创建一个接口类StudentService.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取学生总人数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">queryAllStudentCount</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口创建好了，那我们在哪实现这个接口呢？按照之前的做法我们应该是在Service这个包内创建一个新的包impl来存放接口实现类，但是在Dubbo中，我们把接口实现类归于提供者（Provider）项目。<br>在Provider项目中的src&#x2F;java&#x2F;sample&#x2F;springboot&#x2F;service&#x2F;中创建包impl，里面新建：StudentServiceImpl.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service(interfaceClass = StudentService.class,version = &quot;1.0.0&quot;,timeout = 15000)</span></span><br><span class="line"><span class="comment">//dubbo:service interface=&quot;&quot; version=&quot;&quot; timeout=&quot;&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">queryAllStudentCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用数据持久层</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1250</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注解@Component将接口实现类加载到Spring容器中，然后再用<code>com.alibaba.dubbo.config.annotation</code>包中的@Service注解，添加属性<strong>interfaceClass</strong> &#x3D; StudentService.class ,<strong>version</strong> &#x3D; “1.0.0” , <strong>timeout</strong> &#x3D; 15000，<br>这些注解就是dubbo中添加的dubbo:service interface&#x3D;”” version&#x3D;”” timeout&#x3D;””标签。</p><p>配置好这个注解，这个接口就暴露出来了，然后就可以在消费者项目中进行引用了。</p><p>在Consumer项目中的StudentController.java中添加的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dubbo:reference interface=&quot;&quot; version=&quot;&quot; check=false</span></span><br><span class="line">    <span class="meta">@Reference(interfaceClass = StudentService.class,version = &quot;1.0.0&quot;,check = false)</span></span><br></pre></td></tr></table></figure><p>这就是引用接口的注解__@Reference()__，内容为<strong>interfaceClass</strong> &#x3D; StudentService.class,<strong>version</strong> &#x3D; “1.0.0”,<strong>check</strong> &#x3D; false，这些注解就是dubbo中添加的dubbo:reference interface&#x3D;”” version&#x3D;”” check&#x3D;false标签。</p><p>完成代码配置后还需要在入口类添加启动Dubbo的注解：</p><ul><li>Provider项目：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>      <span class="comment">//开启spring配置</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span>   <span class="comment">//开启dubbo配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Consumer 项目:</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">//开启spring注解配置</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span>   <span class="comment">//开启dubbo配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成搭建后启动各个项目，然后在浏览器完成测试！</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 09</title>
      <link href="/2021/08/12/54a344a129d5-q1jun/"/>
      <url>/2021/08/12/54a344a129d5-q1jun/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-Dubbo3-简介"><a href="#0x01-Dubbo3-简介" class="headerlink" title="0x01 Dubbo3 简介"></a>0x01 Dubbo3 简介</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Dubbo 是一款微服务开发框架，它提供了 RPC通信 与 微服务治理 两大关键能力。这意味着，使用 Dubbo 开发的微服务，将具备相互之间的远程发现与通信能力， 同时利用 Dubbo 提供的丰富服务治理能力，可以实现诸如服务发现、负载均衡、流量调度等服务治理诉求。同时 Dubbo 是高度可扩展的，用户几乎可以在任意功能点去定制自己的实现，以改变框架的默认行为来满足自己的业务需求。</span><br></pre></td></tr></table></figure><blockquote><p>Dubbo3 基于 Dubbo2 演进而来，在保持原有核心功能特性的同时， Dubbo3 在易用性、超大规模微服务实践、云原生基础设施适配等几大方向上进行了全面升级。 以下文档都将基于 Dubbo3 展开。</p></blockquote><h2 id="0x02-What-is-Dubbo"><a href="#0x02-What-is-Dubbo" class="headerlink" title="0x02 What is Dubbo?"></a>0x02 What is Dubbo?</h2><p>如开篇所述，Dubbo 提供了构建云原生微服务业务的一站式解决方案，可以使用 Dubbo 快速定义并发布微服务组件，同时基于 Dubbo 开箱即用的丰富特性及超强的扩展能力，构建运维整个微服务体系所需的各项服务治理能力，如 Tracing、Transaction 等，Dubbo 提供的基础能力包括：</p><ul><li>服务发现</li><li>流式通信</li><li>负载均衡</li><li>流量治理</li><li>…..</li></ul><p>Dubbo 计划提供丰富的多语言客户端实现，其中 Java、Golang 版本是当前稳定性、活跃度最好的版本，其他多语言客户端[]正在持续建设中。</p><p>自开源以来，Dubbo 就被一众大规模互联网、IT公司选型，经过多年企业实践积累了大量经验。Dubbo3 是站在巨人肩膀上的下一代产品，它汲取了上一代的优点并针对已知问题做了大量优化，因此，Dubbo 在解决业务落地与规模化实践方面有着无可比拟的优势：</p><ul><li>开箱即用<ul><li>易用性高，如 Java 版本的面向接口代理特性能实现本地透明调用</li><li>功能丰富，基于原生库或轻量扩展即可实现绝大多数的微服务治理能力</li></ul></li><li>超大规模微服务集群实践<ul><li>高性能的跨进程通信协议</li><li>地址发现、流量治理层面，轻松支持百万规模集群实例</li></ul></li><li>企业级微服务治理能力<ul><li>服务测试</li><li>服务Mock</li></ul></li></ul><p>Dubbo3 是在云原生背景下诞生的，使用 Dubbo 构建的微服务遵循云原生思想，能更好的复用底层云原生基础设施、贴合云原生微服务架构。这体现在：</p><ul><li>服务支持部署在容器、Kubernetes平台，服务生命周期可实现与平台调度周期对齐；</li><li>支持经典 Service Mesh 微服务架构，引入了 Proxyless Mesh 架构，进一步简化 Mesh 的落地与迁移成本，提供更灵活的选择；</li><li>作为桥接层，支持与 SpringCloud、gRPC 等异构微服务体系的互调互通</li></ul><blockquote><p>Apache Dubbo官网：<a target="_blank" rel="noopener" href="https://dubbo.apache.org/">https://dubbo.apache.org/</a></p></blockquote><h2 id="0x02-SpringBoot-集成Dubbo分布式框架"><a href="#0x02-SpringBoot-集成Dubbo分布式框架" class="headerlink" title="0x02 SpringBoot 集成Dubbo分布式框架"></a>0x02 SpringBoot 集成Dubbo分布式框架</h2><ol><li>接口工程： 存放实体bean和业务接口</li><li>服务提供者： 业务接口的实现类并将服务暴露且注册到注册中心，调用数据持久层<ul><li>添加依赖（dubbo，注册中心，接口工程）</li><li>配置服务提供者核心配置文件</li></ul></li><li>服务消费者： 处理浏览器客户端发送的请求，从注册中心调用服务提供者所提供的服务<ul><li>添加依赖（dubbo，注册中心，接口工程）</li><li>配置服务消费者核心配置文件</li></ul></li></ol><p>首先我们要创建：接口工程项目文件<strong>Interface</strong>(maven)、提供者项目文件<strong>Provider</strong>(springboot)、消费者项目文件<strong>Consumer</strong>(springboot)。</p><p>在Provider项目Pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dubbo集成SpringBoot框架起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接口工程(我们所创建的接口工程项目地址)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>020-springboot-dubbo-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Provider项目的核心配置文件 application.properties:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置dubbo的配置</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">021-springboot-dubbo-provider</span></span><br><span class="line"><span class="comment">#当前工程是一个服务提供者</span></span><br><span class="line"><span class="attr">spring.dubbo.server</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#设置注册中心</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><p>接下来是Consumer消费者项目工程，在Pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--Dubbo集成SpringBoot框架起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接口工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>020-springboot-dubbo-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Consumer项目的核心配置文件 application.properties:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置dubbo配置</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">022-springboot-dubbo-consumer</span></span><br><span class="line"><span class="comment">#指定注册中心</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 08</title>
      <link href="/2021/08/11/47fcabd36603-q1jun/"/>
      <url>/2021/08/11/47fcabd36603-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记-08"><a href="#Spring-Boot-学习笔记-08" class="headerlink" title="Spring Boot 学习笔记 08"></a>Spring Boot 学习笔记 08</h1><h2 id="0x01-Redis数据库的安装和配置"><a href="#0x01-Redis数据库的安装和配置" class="headerlink" title="0x01  Redis数据库的安装和配置"></a>0x01  Redis数据库的安装和配置</h2><p><strong>安装：</strong><br>下载地址：<a target="_blank" rel="noopener" href="https://github.com/tporadowski/redis/releases%E3%80%82">https://github.com/tporadowski/redis/releases。</a></p><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。</p><p>打开一个 cmd 窗口 使用 cd 命令切换目录到 C:\redis 运行：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[23520] 30 Jul 20:12:27.585 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">[23520] 30 Jul 20:12:27.585 # Redis version=5.0.10, bits=64, commit=1c047b68, modified=0, pid=23520, just started</span><br><span class="line">[23520] 30 Jul 20:12:27.585 # Configuration loaded</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ &#x27;&#x27;-._</span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 5.0.10 (1c047b68/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._</span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 23520</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;</span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|</span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io</span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;</span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|</span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |</span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;</span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;</span><br><span class="line">          `-._        _.-&#x27;</span><br><span class="line">              `-.__.-&#x27;</span><br><span class="line"></span><br><span class="line">[23520] 30 Jul 20:12:27.588 # Server initialized</span><br><span class="line">[23520] 30 Jul 20:12:27.588 * Ready to accept connections</span><br></pre></td></tr></table></figure><p><strong>配置：</strong><br>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf(Windows 名为 redis.windows.conf)。</p><p>你可以通过 CONFIG 命令查看或设置配置项。</p><p>语法<br>Redis CONFIG 命令格式如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line"></span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 * 号获取所有配置项：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET *</span><br><span class="line"></span><br><span class="line">  1) &quot;dbfilename&quot;</span><br><span class="line">  2) &quot;dump.rdb&quot;</span><br><span class="line">  3) &quot;requirepass&quot;</span><br><span class="line">  4) &quot;&quot;</span><br><span class="line">  5) &quot;masterauth&quot;</span><br><span class="line">  6) &quot;&quot;</span><br><span class="line">  7) &quot;unixsocket&quot;</span><br><span class="line">  8) &quot;&quot;</span><br><span class="line">  9) &quot;logfile&quot;</span><br><span class="line"> 10) &quot;&quot;</span><br><span class="line"> 11) &quot;pidfile&quot;</span><br><span class="line"> 12) &quot;/var/run/redis.pid&quot;</span><br><span class="line"> 13) &quot;maxmemory&quot;</span><br><span class="line"> 14) &quot;0&quot;</span><br><span class="line"> 15) &quot;maxmemory-samples&quot;</span><br><span class="line"> 16) &quot;3&quot;</span><br><span class="line"> 17) &quot;timeout&quot;</span><br><span class="line"> 18) &quot;0&quot;</span><br><span class="line"> 19) &quot;tcp-keepalive&quot;</span><br><span class="line"> 20) &quot;0&quot;</span><br><span class="line"> 21) &quot;auto-aof-rewrite-percentage&quot;</span><br><span class="line"> 22) &quot;100&quot;</span><br><span class="line"> 23) &quot;auto-aof-rewrite-min-size&quot;</span><br><span class="line"> 24) &quot;67108864&quot;</span><br><span class="line"> 25) &quot;hash-max-ziplist-entries&quot;</span><br><span class="line"> 26) &quot;512&quot;</span><br><span class="line"> 27) &quot;hash-max-ziplist-value&quot;</span><br><span class="line"> 28) &quot;64&quot;</span><br><span class="line"> 29) &quot;list-max-ziplist-entries&quot;</span><br><span class="line"> 30) &quot;512&quot;</span><br><span class="line"> 31) &quot;list-max-ziplist-value&quot;</span><br><span class="line"> 32) &quot;64&quot;</span><br><span class="line"> 33) &quot;set-max-intset-entries&quot;</span><br><span class="line"> 34) &quot;512&quot;</span><br><span class="line"> 35) &quot;zset-max-ziplist-entries&quot;</span><br><span class="line"> 36) &quot;128&quot;</span><br><span class="line"> 37) &quot;zset-max-ziplist-value&quot;</span><br><span class="line"> 38) &quot;64&quot;</span><br><span class="line"> 39) &quot;hll-sparse-max-bytes&quot;</span><br><span class="line"> 40) &quot;3000&quot;</span><br><span class="line"> 41) &quot;lua-time-limit&quot;</span><br><span class="line"> 42) &quot;5000&quot;</span><br><span class="line"> 43) &quot;slowlog-log-slower-than&quot;</span><br><span class="line"> 44) &quot;10000&quot;</span><br><span class="line"> 45) &quot;latency-monitor-threshold&quot;</span><br><span class="line"> 46) &quot;0&quot;</span><br><span class="line"> 47) &quot;slowlog-max-len&quot;</span><br><span class="line"> 48) &quot;128&quot;</span><br><span class="line"> 49) &quot;port&quot;</span><br><span class="line"> 50) &quot;6379&quot;</span><br><span class="line"> 51) &quot;tcp-backlog&quot;</span><br><span class="line"> 52) &quot;511&quot;</span><br><span class="line"> 53) &quot;databases&quot;</span><br><span class="line"> 54) &quot;16&quot;</span><br><span class="line"> 55) &quot;repl-ping-slave-period&quot;</span><br><span class="line"> 56) &quot;10&quot;</span><br><span class="line"> 57) &quot;repl-timeout&quot;</span><br><span class="line"> 58) &quot;60&quot;</span><br><span class="line"> 59) &quot;repl-backlog-size&quot;</span><br><span class="line"> 60) &quot;1048576&quot;</span><br><span class="line"> 61) &quot;repl-backlog-ttl&quot;</span><br><span class="line"> 62) &quot;3600&quot;</span><br><span class="line"> 63) &quot;maxclients&quot;</span><br><span class="line"> 64) &quot;4064&quot;</span><br><span class="line"> 65) &quot;watchdog-period&quot;</span><br><span class="line"> 66) &quot;0&quot;</span><br><span class="line"> 67) &quot;slave-priority&quot;</span><br><span class="line"> 68) &quot;100&quot;</span><br><span class="line"> 69) &quot;min-slaves-to-write&quot;</span><br><span class="line"> 70) &quot;0&quot;</span><br><span class="line"> 71) &quot;min-slaves-max-lag&quot;</span><br><span class="line"> 72) &quot;10&quot;</span><br><span class="line"> 73) &quot;hz&quot;</span><br><span class="line"> 74) &quot;10&quot;</span><br><span class="line"> 75) &quot;no-appendfsync-on-rewrite&quot;</span><br><span class="line"> 76) &quot;no&quot;</span><br><span class="line"> 77) &quot;slave-serve-stale-data&quot;</span><br><span class="line"> 78) &quot;yes&quot;</span><br><span class="line"> 79) &quot;slave-read-only&quot;</span><br><span class="line"> 80) &quot;yes&quot;</span><br><span class="line"> 81) &quot;stop-writes-on-bgsave-error&quot;</span><br><span class="line"> 82) &quot;yes&quot;</span><br><span class="line"> 83) &quot;daemonize&quot;</span><br><span class="line"> 84) &quot;no&quot;</span><br><span class="line"> 85) &quot;rdbcompression&quot;</span><br><span class="line"> 86) &quot;yes&quot;</span><br><span class="line"> 87) &quot;rdbchecksum&quot;</span><br><span class="line"> 88) &quot;yes&quot;</span><br><span class="line"> 89) &quot;activerehashing&quot;</span><br><span class="line"> 90) &quot;yes&quot;</span><br><span class="line"> 91) &quot;repl-disable-tcp-nodelay&quot;</span><br><span class="line"> 92) &quot;no&quot;</span><br><span class="line"> 93) &quot;aof-rewrite-incremental-fsync&quot;</span><br><span class="line"> 94) &quot;yes&quot;</span><br><span class="line"> 95) &quot;appendonly&quot;</span><br><span class="line"> 96) &quot;no&quot;</span><br><span class="line"> 97) &quot;dir&quot;</span><br><span class="line"> 98) &quot;/home/deepak/Downloads/redis-2.8.13/src&quot;</span><br><span class="line"> 99) &quot;maxmemory-policy&quot;</span><br><span class="line">100) &quot;volatile-lru&quot;</span><br><span class="line">101) &quot;appendfsync&quot;</span><br><span class="line">102) &quot;everysec&quot;</span><br><span class="line">103) &quot;save&quot;</span><br><span class="line">104) &quot;3600 1 300 100 60 10000&quot;</span><br><span class="line">105) &quot;loglevel&quot;</span><br><span class="line">106) &quot;notice&quot;</span><br><span class="line">107) &quot;client-output-buffer-limit&quot;</span><br><span class="line">108) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;</span><br><span class="line">109) &quot;unixsocketperm&quot;</span><br><span class="line">110) &quot;0&quot;</span><br><span class="line">111) &quot;slaveof&quot;</span><br><span class="line">112) &quot;&quot;</span><br><span class="line">113) &quot;notify-keyspace-events&quot;</span><br><span class="line">114) &quot;&quot;</span><br><span class="line">115) &quot;bind&quot;</span><br><span class="line">116) &quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>编辑配置：</strong><br>你可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。</p><p>语法:<br>CONFIG SET 命令基本语法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line"></span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数说明<br>redis.conf 配置项说明如下：</p><table><thead><tr><th>序号</th><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>daemonize no</td><td>Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td></tr><tr><td>2</td><td>pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</td><td>当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 &#x2F;var&#x2F;run&#x2F;redis.pid 文件，可以通过 pidfile 指定</td></tr><tr><td>3</td><td>port 6379</td><td>指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</td></tr><tr><td>4</td><td>bind 127.0.0.1</td><td>绑定的主机地址</td></tr><tr><td>5</td><td>timeout 300</td><td>当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td></tr><tr><td>6</td><td>loglevel notice</td><td>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td></tr><tr><td>7</td><td>logfile stdout</td><td>日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 &#x2F;dev&#x2F;null</td></tr><tr><td>8</td><td>databases 16</td><td>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td></tr><tr><td>9</td><td>save <seconds> <changes>Redis 默认配置文件中提供了三个条件：<br />save 900 1<br />save 300 10<br />save 60 10000<br />分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td><td>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td></tr><tr><td>10</td><td>rdbcompression yes</td><td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td></tr><tr><td>11</td><td>dbfilename dump.rdb</td><td>指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td>12</td><td>dir .&#x2F;</td><td>指定本地数据库存放目录</td></tr><tr><td>13</td><td>slaveof <masterip> <masterport></td><td>设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td></tr><tr><td>14</td><td>masterauth <master-password></td><td>当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td></tr><tr><td>15</td><td>requirepass foobared</td><td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td></tr><tr><td>16</td><td>maxclients 128</td><td>设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td></tr><tr><td>17</td><td>maxmemory <bytes></td><td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td></tr><tr><td>18</td><td>appendonly no</td><td>指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td></tr><tr><td>19</td><td>appendfilename appendonly.aof</td><td>指定更新日志文件名，默认为 appendonly.aof</td></tr><tr><td>20</td><td>appendfsync everysec</td><td>指定更新日志条件，共有 3 个可选值：no：表示等操作系统进行数据缓存同步到磁盘（快）always：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）everysec：表示每秒同步一次（折中，默认值）</td></tr><tr><td>21</td><td>vm-enabled no</td><td>指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td></tr><tr><td>22</td><td>vm-swap-file &#x2F;tmp&#x2F;redis.swap</td><td>虚拟内存文件路径，默认值为 &#x2F;tmp&#x2F;redis.swap，不可多个 Redis 实例共享</td></tr><tr><td>23</td><td>vm-max-memory 0</td><td>将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td></tr><tr><td>24</td><td>vm-page-size 32</td><td>Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td></tr><tr><td>25</td><td>vm-pages 134217728</td><td>设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td></tr><tr><td>26</td><td>vm-max-threads 4</td><td>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td></tr><tr><td>27</td><td>glueoutputbuf yes</td><td>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td></tr><tr><td>28</td><td>hash-max-zipmap-entries 64<br />  hash-max-zipmap-value 512</td><td>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td></tr><tr><td>29</td><td>activerehashing yes</td><td>指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td></tr><tr><td>30</td><td>include &#x2F;path&#x2F;to&#x2F;local.conf</td><td>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td></tr></tbody></table><h2 id="0x02-SpringBoot-中集成Redis"><a href="#0x02-SpringBoot-中集成Redis" class="headerlink" title="0x02 SpringBoot 中集成Redis"></a>0x02 SpringBoot 中集成Redis</h2><p>__REmote DIctionary Server(Redis) __是一个由 Salvatore Sanfilippo 写的 __key-value 存储系统__，是跨平台的__非关系型数据库__。</p><p>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><p>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</p><p>Redis 是__完全开源__的，遵守 BSD 协议，是一个高性能的 __key-value 数据库__。</p><p><strong>Redis 与其他 key - value 缓存产品有以下三个特点：</strong></p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><p><strong>Redis与其他key-value存储有什么不同？</strong></p><ul><li><p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</p></li><li><p>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p></li></ul><p><strong>SpringBoot 中集成Redis只有两步：</strong></p><ol><li>添加操作Redis数据类型的依赖</li><li>在SpringBoot核心配置文件中添加Redis的配置</li></ol><h3 id="0x0201-添加操作Redis数据类型的依赖"><a href="#0x0201-添加操作Redis数据类型的依赖" class="headerlink" title="0x0201 添加操作Redis数据类型的依赖"></a>0x0201 添加操作Redis数据类型的依赖</h3><p>在Maven的pom.xml中添加：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot集成Redis的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0202-在SpringBoot核心配置文件中添加Redis的配置"><a href="#0x0202-在SpringBoot核心配置文件中添加Redis的配置" class="headerlink" title="0x0202 在SpringBoot核心配置文件中添加Redis的配置"></a>0x0202 在SpringBoot核心配置文件中添加Redis的配置</h3><p>在application.properties中添加：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置redis配置信息</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#没有设置密码不用填下面的</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="0x0203-操作Redis"><a href="#0x0203-操作Redis" class="headerlink" title="0x0203 操作Redis"></a>0x0203 操作Redis</h3><p>在业务层创建存入Redis数据库的业务操作，在Application.java同级目录或次级目录创建包service，包内创建一个StudentService.java接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将值存放到redis中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, String value)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从redis中获取指定key的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在service包内创建一个包impl用来存放接口实现类，里面创建StudentServiceImpl.java作为上面接口的接口实现类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line"><span class="comment">//对数据进行存入操作set(key,value)</span></span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line"><span class="comment">//对数据进行取出操作get(key)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在控制层进行数据的输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/put&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    Object <span class="title function_">put</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line"></span><br><span class="line">        studentService.put(key, value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;值已成功放入redis&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> studentService.get(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据count为:&quot;</span> + count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 07</title>
      <link href="/2021/08/10/57f701012393-q1jun/"/>
      <url>/2021/08/10/57f701012393-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-07"><a href="#Spring-Boot学习笔记-07" class="headerlink" title="Spring Boot学习笔记 07"></a>Spring Boot学习笔记 07</h1><h2 id="0x01-SpringMVC-常用注解"><a href="#0x01-SpringMVC-常用注解" class="headerlink" title="0x01 SpringMVC 常用注解"></a>0x01 SpringMVC 常用注解</h2><p><strong>@GetMapping</strong>等价于<em>单独使用Get方法</em>的**@RequestMapping**，比如下面代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/queryStudentById2&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="comment">//该注解通过在查询数据的时候使用 -&gt; 查询</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">queryStudentById2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Ony GET Method&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以写成：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/queryStudentById2&quot;)</span> <span class="comment">//相当于上一句话,只接收GET请求,如果请求方式不对会报405错误</span></span><br><span class="line">   <span class="comment">//该注解通过在查询数据的时候使用 -&gt; 查询</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">queryStudentById2</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Ony GET Method&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>相当于上一句话,只接收GET请求,如果请求方式不对会报405错误。</p><p>同理的还有**@PostMapping**，比如下面的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/insert&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="comment">//该注解通常在新增数据的时候使用 -&gt; 新增</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Insert success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则可以写成：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/insert&quot;)</span> </span><br><span class="line">   <span class="comment">//该注解通常在新增数据的时候使用 -&gt; 新增</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Insert success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>除此之外还有**@DeleteMapping** ,<strong>@PutMapping</strong>:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/delete&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@DeleteMapping(value = &quot;/delete&quot;)</span><span class="comment">//相当于上一句话</span></span><br><span class="line"><span class="comment">//该注解通常在删除数据的时候使用 -&gt; 删除</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;delete Student&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/update&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="meta">@PutMapping(value = &quot;/update&quot;)</span> <span class="comment">//相当于上一句话</span></span><br><span class="line"><span class="comment">//该注解通常在修改数据的时候使用 -&gt; 更新</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;update student info1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样极大的简化了我们的代码。</p><h2 id="0x02-RESTFul"><a href="#0x02-RESTFul" class="headerlink" title="0x02 RESTFul"></a>0x02 RESTFul</h2><p><strong>REST</strong>（英文：<em>Representational State Transfer</em>，简称 REST） 一种互联网软件架构设计的风格，但它并不是标准，它只是提出了一组客户端和服务器 交互时的架构理念和设计原则，基于这种理念和原则设计的接口可以更简洁，更有层次，REST 这个词，是 Roy Thomas Fielding 在他 2000 年的博士论文中提出的。 任何的技术都可以实现这种理念，如果一个架构符合 REST 原则，就称它为 <strong>RESTFul 架 构</strong></p><p>Spring boot 开发 RESTFul 主要是几个注解实现<br>（1） @PathVariable ：获取 url 中的数据 ，该注解是实现 RESTFul 最主要的一个注解<br>（2） @PostMapping ：接收和处理 Post 方式的请求<br>（3） @DeleteMapping ：接收 delete 方式的请求，可以使用 GetMapping 代替<br>（4） @PutMapping ：接收 put 方式的请求，可以用 PostMapping 代替<br>（5） @GetMapping ：接收 get 方式的请求</p><p>RESTFul风格的代码好处有：<br>➢ 传递参数变简单了<br>➢ 服务提供者对外只提供了一个接口服务，而不是传统的 CRUD 四个接口</p><p>下面我们看代码，来实现RESTFul：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">student1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        retMap.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们在路径里面添加了**{id}<strong>和</strong>{age}<strong>这两个变量，然后在下方通过注释</strong>@PathVariable<strong>来调用参数在路径中获取的值，传给变量id和age，然后就能在方法中使用所获取的值了。<br>这样我们在浏览器输入</strong><a target="_blank" rel="noopener" href="http://localhost:8080/student/0101/28">http://localhost:8080/student/0101/28</a> **<br>就能把<strong>0101</strong> 和 <strong>28</strong>这两个值传入方法中进行调用。</p><p>和之前的写法进行对比：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">student</span><span class="params">(Integer id,Integer age)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setId(id);</span><br><span class="line">    student.setAge(age);</span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方法的url写法为**<a target="_blank" rel="noopener" href="http://localhost:8080/student?id=0101&amp;age=28">http://localhost:8080/student?id=0101&amp;age=28</a>  **<br>显然前者更具有观赏性和实用性（而且更安全）。</p><p>但是这种方式也会出现冲突，因为在路径的填写时，并不能知道哪个是id哪个是age，所以我们在设计的时候，通常在RESTful风格中方法的请求方式会按<strong>增删改查</strong>的请求方式来区分，比如如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">student1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                       <span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    retMap.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    <span class="keyword">return</span> retMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">student2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                       <span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status)</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    retMap.put(<span class="string">&quot;status&quot;</span>,status);</span><br><span class="line">    <span class="keyword">return</span> retMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student1和Student2方法调用路径时会报错，原因是发生冲突，因为路径传进来的时候无法区分最后是{age}还是{status}，那怎么办呢？</p><p><strong>方法一：</strong><br>我们只需要在设计的时候避免这种情况发生，比如可以改成如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student/&#123;id&#125;/detail/&#123;city&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">student3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                       <span class="meta">@PathVariable(&quot;city&quot;)</span> Integer city)</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    retMap.put(<span class="string">&quot;city&quot;</span>,city);</span><br><span class="line">    <span class="keyword">return</span> retMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能避免两种方法调用的路径相同而发生冲突了！</p><p><strong>方法二：</strong><br>还有一种方法就是通过改变注释来避免相同注释的冲突：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">student1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        retMap.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">student2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        retMap.put(<span class="string">&quot;status&quot;</span>,status);</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从代码中我们发现，虽然路径是一样的，但是注释不一样，把原来的@RequestMapping换成了@GetMapping和@DeleteMapping，所以当路径一样时，Get方法和Delete方法所请求的路径是不一样的，这样也能避免冲突，但是相比于方法一还是不够好。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 06</title>
      <link href="/2021/08/09/893e8b53eb77-q1jun/"/>
      <url>/2021/08/09/893e8b53eb77-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-学习笔记-06"><a href="#Spring-Boot-学习笔记-06" class="headerlink" title="Spring Boot 学习笔记 06"></a>Spring Boot 学习笔记 06</h1><h2 id="0x01-Mybatis服务接口及调用"><a href="#0x01-Mybatis服务接口及调用" class="headerlink" title="0x01 Mybatis服务接口及调用"></a>0x01 Mybatis服务接口及调用</h2><p>在我们已经通过逆向生成了Mapper接口类、映射文件以及JAVA模型的之后，我们还需要通过业务层的服务来调用数据。</p><p>我们首先在控制层@Controller注解的方法下添加@Autowired注解来注入业务层提取的数据：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> Object <span class="title function_">student</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentService.queryStudentById(id);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在下方的@RequestMapping注解中调用该服务注入的数据存放到Student类中。</p><p>这时候肯定还是不够的，因为我们在这里创建了一个叫做StudentService的类，那我们就在Application.java同级目录或下级目录中创建这个服务类和接口。<br>在Application.java同级目录新增一个包，包名为service，包内新建一个接口类，接口名为StudentService:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据学生ID查询详情</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Student <span class="title function_">queryStudentById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该接口的功能为根据学生ID查询学生详情数据。</p><p>对应这个接口，我们还需要一个实现类，我们在这个接口同级目录下新建一个包，包名为Impl，包内新建java文件StudentServiceImpl.java来实现接口的功能。</p><p>而且我们的业务接口实现类还得通过__@Service__注解放入Spring容器中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个业务层，需要调用数据持久层，就通过@Autowired这个注解注入进来,这里我们就将StudentMapper注入进来</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那我们注入的studentMapper就要给我们提供一个方法，那就是通过之前Mybatis逆向生成的selectByPrimaryKey()方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">queryStudentById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里还不够，我们还必须添加一个扫描器，来扫描DAO接口到Spring容器，我们才能在<strong>业务接口实现类</strong>中实现studentMapper的注入：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.springboot.model.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> <span class="comment">//扫描DAO接口到spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    Student <span class="title function_">selectByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(Student record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(Student record)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是现在还有一个问题，那就是xml文件在src里面是不能被项目编译执行的，所以我们必须在pom.xml中的<build>添加resources项来让项目编译xml文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动指定文件夹为resources--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样当我们在浏览器输入<a target="_blank" rel="noopener" href="http://localhost:8080/student?id=1%E6%97%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E8%83%BD%E8%8E%B7%E5%BE%97id=1%E7%9A%84%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E4%BA%86%E3%80%82">http://localhost:8080/student?id=1时，我们就能获得id=1的学生信息了。</a></p><p>数据库中的表的信息如下：<br>id,name,age<br>1,zhangsan,25<br>2,lisi,28<br>3,wangwu,23<br>4,Tom,21<br>5,Jck,55<br>6,Lucy,27<br>7,zhaoliu,75</p><p>浏览器返回{“id”:1,”name”:”zhangsan”,”age”:25}</p><p>说明我们配置成功！</p><h2 id="0x02-Mybatis扫描多个Mapper接口及子目录"><a href="#0x02-Mybatis扫描多个Mapper接口及子目录" class="headerlink" title="0x02 Mybatis扫描多个Mapper接口及子目录"></a>0x02 Mybatis扫描多个Mapper接口及子目录</h2><p>在上面我们说到了扫描器**@Mapper<strong>，但是如果我们有多个Mapper接口类和映射文件呢？这里我们就不再使用</strong>@Mapper**这个单一扫描器了。</p><p>我们在Application.java这个入口类的**@SpringBootApplication<strong>注释旁添加一个注释:</strong>@MapperScan(“”)** ，来开启扫描Mapper接口的包以及子目录：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">//开启spring配置</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bjpowernode.springboot.mapper&quot;)</span> <span class="comment">//开启扫描Mapper接口的包以及子目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就不用再额外添加**@Mapper<strong>这个注释了！</strong>(“”)** 内写的是Mapper接口的包所在路径。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 05</title>
      <link href="/2021/08/08/4b359cf9184b-q1jun/"/>
      <url>/2021/08/08/4b359cf9184b-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-05"><a href="#Spring-Boot学习笔记-05" class="headerlink" title="Spring Boot学习笔记 05"></a>Spring Boot学习笔记 05</h1><h2 id="0x01-Mybatis-映射文件转移到resources文件夹下"><a href="#0x01-Mybatis-映射文件转移到resources文件夹下" class="headerlink" title="0x01 Mybatis 映射文件转移到resources文件夹下"></a>0x01 Mybatis 映射文件转移到resources文件夹下</h2><p>关于Mapper映射文件的存放位置的写法有两种：</p><ol><li>将mapper接口和mapper映射文件存放到src&#x2F;main&#x2F;java同一目录下，还需要在pom.xml文件中手动指定资源文件夹路径resources。</li><li>将mapper接口和映射文件夹分开存放，mapper接口类存放到src&#x2F;main&#x2F;java目录下，mapper映射文件存放到resources（类路径），在springboot核心配置文件中指定mapper映射文件的存放位置。</li></ol><p>将src下的XML映射文件移动到resources文件夹Mapper中，这样有助于我们管理xml映射文件。</p><p>然后在application.properties中添加:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p>这样我们就不用像上一次在pom.xml里的<build>中添加<resources>这一项了</p><blockquote><p> 因为maven只编译src中的<code>.java</code>文件</p></blockquote><h2 id="0x02-SpringBoot集成Mybatis最主要的是两个注解"><a href="#0x02-SpringBoot集成Mybatis最主要的是两个注解" class="headerlink" title="0x02 SpringBoot集成Mybatis最主要的是两个注解"></a>0x02 SpringBoot集成Mybatis最主要的是两个注解</h2><ul><li>@Mapper 需要在每一个Mapper接口类上添加，作用扫描dao接口</li><li>@MapperScan 是在Springboot启动入口类上添加的，它是一次扫描所有的包</li></ul><h2 id="0x03-SpringBoot下使用事务"><a href="#0x03-SpringBoot下使用事务" class="headerlink" title="0x03 SpringBoot下使用事务"></a>0x03 SpringBoot下使用事务</h2><p>事务是一个完整的功能，也叫做是一个完整的业务。</p><p>事务只跟什么SQL语句有关系？<br>事务只跟DML语句有关系：增删改</p><p>SQL语句：DML,DQL,DDL,TCL,DCL</p><p>使用事务功能的时候只需要在java代码添加注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br></pre></td></tr></table></figure><p>这样执行该方法的时候会看成事务来运作。</p><p>当事务其中一部分失效时会回退到开始阶段。</p><p>在入口类Application.java中可以添加:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br></pre></td></tr></table></figure><p>这个注解来开启事务功能。</p><h2 id="0x04-SpringBoot注解-RestController"><a href="#0x04-SpringBoot注解-RestController" class="headerlink" title="0x04 SpringBoot注解@RestController"></a>0x04 SpringBoot注解@RestController</h2><p>@RestCOntroller相当于控制层类上加<code>@Controller</code> + 方法上加<code>@ResponseBody</code></p><p>意味着当前控制层类中所有方法返还的都是JSON对象。</p><p>如以下xxxController.java代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.springboot002.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/springboot/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello ,Springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>等同于:(不需要@ResponseBody)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.springboot002.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/springboot/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello ,Springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 04</title>
      <link href="/2021/08/06/9f999f2edeca-q1jun/"/>
      <url>/2021/08/06/9f999f2edeca-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-04"><a href="#Spring-Boot学习笔记-04" class="headerlink" title="Spring Boot学习笔记 04"></a>Spring Boot学习笔记 04</h1><h2 id="xxxMapper-xml内容分析"><a href="#xxxMapper-xml内容分析" class="headerlink" title="xxxMapper.xml内容分析"></a>xxxMapper.xml内容分析</h2><blockquote><p>Mybatis逆向生成的文件只有单表操作。</p></blockquote><p>文件头(UTF-8)编码:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的xxxMapper.xml内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.springboot.springboot012mybatis.mapper.StudentMapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultMap作用：</p><ol><li>当数据库中字段名称与实体类对象的属性名不一样时，可以进行转换</li><li>当查询的结果没有对应一个表的时候，可以自定义一个结果集</li></ol><p>其中：</p><ul><li>id 标签只能修改主键字段</li><li>result 除了主键以外的字段</li><li>column 数据库中的字段名称</li><li>property 映射对象的属性名称</li><li>jdbcType 列中数据库中字段的类型（可以忽略不写）</li></ul><blockquote><p>如果数据库中字段名称由多个单词构成，通过Mybatis逆向工程生成的对象属性名称<br>会按照驼峰命名法规则生成属性名称。<br>其中：数据库中字段名称由多个单词构成时候必须使用下划线_分隔</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.springboot.springboot012mybatis.model.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sql语句片段，将公共的部分抽取出来,可以通过include标签引用的sql语句片段:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">    id,name,age</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 03</title>
      <link href="/2021/08/04/54715f549ae4-q1jun/"/>
      <url>/2021/08/04/54715f549ae4-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-03"><a href="#Spring-Boot学习笔记-03" class="headerlink" title="Spring Boot学习笔记 03"></a>Spring Boot学习笔记 03</h1><p>​        </p><h2 id="0x01-SpringBoot集成JSP"><a href="#0x01-SpringBoot集成JSP" class="headerlink" title="0x01 SpringBoot集成JSP"></a>0x01 SpringBoot集成JSP</h2><p>打开IDEA创建SpringBoot项目后，在src文件夹的main中创建一个新的文件夹webapp来存放web资源（假如原来没有webapp文件夹）。</p><p>创建好在模块设置中的模块-&gt;Web-&gt;Web资源目录添加上面创建的webapp目录，相对与部署根的路径为<code>/</code>,然后点击创建工件，最后点击应用，就完成了webapp的设置，待会在里面创建jsp文件就行了。</p><p>由于项目本身对jsp的解析并不支持，所以在pom.xml文件里面要添加对jsp解析的包的依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        引入SpringBoot内嵌Tomcat对jsp的解析包,不添加解析不了jsp--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        仅仅只是展示jsp页面，只添加以下一个依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后为了使jsp正常编译，还要在pom.xml的__<build>__中添加:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                源文件夹--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                指定编译到META-INF/resources--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                指定源文件夹中的哪些资源要编译进去--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    所有东西： *.*--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在核心配置文件中添加视图解析器:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置视图解析器</span></span><br><span class="line"><span class="attr">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure><p>接下来我们就要设置@Controller了，在Application.java文件的同级目录或下级目录创建一个Controller&#x2F;IndexController.java，内容如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.springboot010jsp.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello Springboot!&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;say&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在webapp上创建对应的say.jsp:</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;$&#123;message&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>次jsp用来显示<code>$&#123;message&#125;</code>结果:</p><p>浏览器输入localhost:8080&#x2F;say，输出结果为：<strong>Hello Springboot!</strong></p><p>浏览器输入localhost:8080&#x2F;index，输出结果为：<strong>Hello world</strong></p><p>分别对应@Controller里面两个Attribute。</p><blockquote><p> 以上步骤缺一不可！</p></blockquote><h2 id="0x02-如何在一个单纯的Maven框架上手动配置SpringBoot"><a href="#0x02-如何在一个单纯的Maven框架上手动配置SpringBoot" class="headerlink" title="0x02 如何在一个单纯的Maven框架上手动配置SpringBoot"></a>0x02 如何在一个单纯的Maven框架上手动配置SpringBoot</h2><p>前面我们创建一个SpringBoot项目都是用idea自带的Springboot框架来创建，那我们如何在一个只有pom.xml和Meven文件结构的项目里面自己手动创建一个SPringboot项目呢，这个方法适用于一开始创建SpringBoot项目时网不好的情况。</p><p>首先我们在Pom.xml文件里面添加对应的SpringBoot依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--SpringBoot父工程GAV坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        SpringBoot框架Web项目起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        SpringBoot框架测试起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            SpringBoot项目打包编译的插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 这里只给出需要添加的部分，并不是覆盖的意思。</p></blockquote><p>然后文件结构也需要改变：</p><p>在src&#x2F;main&#x2F;java中创建包<code>com.auspic1ous.springboot</code></p><p>在其中创建一个Application.java(名字随意):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.auspic1ous.springboot;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//Springboot项目启动入口类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//SpringBoot核心注解，主要用于开启spring自动配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后还要在src&#x2F;main&#x2F;resources中创建如下文件、文件夹：</p><ul><li>static(文件夹)：图标等静态资源放入此文件夹</li><li>templates(文件夹)：模板，前端模板引擎放入此文件夹Thyme leaf.html（百叶箱）</li><li>application.properties：SpringBoot的核心配置文件</li></ul><h2 id="0x03-SpringBoot继承Mybatis"><a href="#0x03-SpringBoot继承Mybatis" class="headerlink" title="0x03 SpringBoot继承Mybatis"></a>0x03 SpringBoot继承Mybatis</h2><h3 id="0x0301-添加Mybatis依赖和数据库驱动-mysql"><a href="#0x0301-添加Mybatis依赖和数据库驱动-mysql" class="headerlink" title="0x0301 添加Mybatis依赖和数据库驱动(mysql)"></a>0x0301 添加<code>Mybatis依赖</code>和<code>数据库驱动(mysql)</code></h3><p>Pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        Mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Mybatis整合SpringBoot框架的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0302-使用Mybatis提供的逆向工程生成实体Bean，映射文件，BAO接口。"><a href="#0x0302-使用Mybatis提供的逆向工程生成实体Bean，映射文件，BAO接口。" class="headerlink" title="0x0302 使用Mybatis提供的逆向工程生成实体Bean，映射文件，BAO接口。"></a>0x0302 使用Mybatis提供的逆向工程生成实体Bean，映射文件，BAO接口。</h3><p>pom.xml添加依赖和插件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Mybatis整合SpringBoot框架的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                Mybatis 代码自动生成插件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--                    配置文件的位置--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根目录下新建一个xml文件，文件名为：<code>GeneratorMapper</code>:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    指定连接数据库的JDBC驱动包所在位置,指定到你本机的完整路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置table表信息内容体，targetRuntime 指定采用Mybatis3的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;Mybatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        抑制生成注释，由于生成的注释都是英文的，可以不让它生成--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置数据库连接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springboot&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;admin123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        生成model类，targetPackage指定model类的包名 ，targetProject指定生成的model放在eclipse的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.auspic1ous.springboot.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        生成 Mybatis 的 Mapper.xml文件，targetPackage指定mapper.xml 文件的包名，</span></span><br><span class="line"><span class="comment">        targetProject指定生成的mapper.xml放在eclipse的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.auspic1ous.springboot.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        生成Mybatis 的Mapper接口类文件, targetPackage 指定 Mapper 接口类的包名</span></span><br><span class="line"><span class="comment">        ,targetProject 指定生成的Mapper接口放在eclipse的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.auspic1ous.springboot.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        数据库表名以及对应的Java模型类名--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        tableName数据库表的名称，domainObjectName为java实体类的名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_student&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Student&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在com.auspic1ous.springboot下创建mapper和model两个包。</p><p>当我们重新构建该项目后，mapper中就会根据数据库自动生成对应的接口类和映射文件xml，model中就会根据数据库自动生成对应的java模型，这样就节省了 我们手动编写mapper和model两个文件夹里面的内容，非常好用~</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 02</title>
      <link href="/2021/08/03/5fffb9c70d6b-q1jun/"/>
      <url>/2021/08/03/5fffb9c70d6b-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-02"><a href="#Spring-Boot学习笔记-02" class="headerlink" title="Spring Boot学习笔记 02"></a>Spring Boot学习笔记 02</h1><p>​        </p><h2 id="0x01-多环境下核心配置文件的使用-properties"><a href="#0x01-多环境下核心配置文件的使用-properties" class="headerlink" title="0x01 多环境下核心配置文件的使用(properties)"></a>0x01 多环境下核心配置文件的使用(properties)</h2><blockquote><p>需要注意.properties中的属性值不要出现空格，会被识别出现问题！</p></blockquote><p>在工作中的开发环境有</p><ul><li>开发环境(dev)</li><li>测试环境(test)</li><li>准生产环境(pre)</li><li>生产环境(product)</li></ul><p>老样子，我们在创建号的SpringBoot环境下，在Application.java文件的同级目录或下级目录创建一个Controller&#x2F;IndexController.java，内容如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.springboot006multienvironment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Multi-Environment!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面我们分别对应上面四个开发环境创建对应的核心配置文件:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch application.properties</span><br><span class="line">touch application-dev.properties</span><br><span class="line">touch application-test.properties</span><br><span class="line">touch application-pre.properties</span><br><span class="line">touch application-product.properties</span><br></pre></td></tr></table></figure><p>每个环境的核心配置文件名的格式都是 <code>application-XXXX.properties</code> 其中的<code>XXXX</code>由自己命名，并在 <strong>主核心配置文件</strong> 中调用:</p><p>application.properties:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Springboot主核心配置文件</span></span><br><span class="line"><span class="comment">#激活使用的配置文件,XXXX对应文件名中的XXXX</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">XXXX</span></span><br></pre></td></tr></table></figure><p>其他核心配置文件则与原来单核心配置文件相同：</p><p>application-dev.properties:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/dev</span></span><br></pre></td></tr></table></figure><p>application-test.properties:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/test</span></span><br></pre></td></tr></table></figure><p>application-pre.properties:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/pre</span></span><br></pre></td></tr></table></figure><p>application-product.properties:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8083</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/product</span></span><br></pre></td></tr></table></figure><p>这样我们就完成了在不同环境下的核心配置文件配置，浏览器URL框输入时区分默认路径即可。</p><p>比如输入<a target="_blank" rel="noopener" href="http://localhost:8081/test/say">http://localhost:8081/test/say</a> 就会显示出我们在IndexController中创建的函数say返回的内容”Hello Multi-Environment!”。</p><h2 id="0x02-多环境下的核心配置文件的使用-yml"><a href="#0x02-多环境下的核心配置文件的使用-yml" class="headerlink" title="0x02 多环境下的核心配置文件的使用(yml)"></a>0x02 多环境下的核心配置文件的使用(yml)</h2><p>yml(或者yaml)与properties文件的配置方法大同小异，只有文件内容格式上的差异，其他基本一样。</p><p>所以这里只给出配置后的核心文件的内容：</p><p>application.yml:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>application-dev.yml:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/dev</span></span><br></pre></td></tr></table></figure><p>application-test.yml:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/test</span></span><br></pre></td></tr></table></figure><p>application-product.yml:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/product</span></span><br></pre></td></tr></table></figure><p>application-pre.yml:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/pre</span></span><br></pre></td></tr></table></figure><h2 id="0x03-获取application-properties-yml-自定义配置"><a href="#0x03-获取application-properties-yml-自定义配置" class="headerlink" title="0x03 获取application.properties(.yml)自定义配置"></a>0x03 获取application.properties(.yml)自定义配置</h2><p>上面我们用的配置诸如<code>server.port=</code> <code>server.servlet.context-path=</code> 等等都是SpringBoot项目自带的配置项，如何自己创建一个自定义配置并获取它呢？</p><p>这里我们使用到__@Value__</p><p>在Application.java文件的同级目录或下级目录创建一个Controller&#x2F;IndexController.java，内容如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.springboot008customerconfiguration.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;school.name&#125;&quot;)</span><span class="comment">//创建school.name配置项，存放到String类型的变量中</span></span><br><span class="line">    <span class="keyword">private</span> String schoolName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;website&#125;&quot;)</span><span class="comment">//创建website配置项，存放到String类型的变量中</span></span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//输出获得的自定义配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello :&quot;</span> + schoolName + <span class="string">&quot; Website : http://&quot;</span> + website;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件application.properties中:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置内嵌tomcat 端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment">#自定义</span></span><br><span class="line"><span class="attr">school.name</span>=<span class="string">ECJTU</span></span><br><span class="line"><span class="attr">website</span>=<span class="string">www.ecjtu.jx.cn</span></span><br></pre></td></tr></table></figure><p>运行项目后我们打开浏览器输入<a target="_blank" rel="noopener" href="http://localhost:8080/say,%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BA">http://localhost:8080/say,浏览器显示</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hello :ECJTU Website : http://www.ecjtu.jx.cn</span><br></pre></td></tr></table></figure><p>说明我们获取成功。</p><h2 id="0x04-成组获取自定义配置对象"><a href="#0x04-成组获取自定义配置对象" class="headerlink" title="0x04 成组获取自定义配置对象"></a>0x04 成组获取自定义配置对象</h2><p>上一个部分0x03中，我们获取自定义配置是一个一个获取的，我们如何一组一组的获取呢，比如我们现在创建的application.properties文件如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置内嵌tomcat 端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">school.name</span>=<span class="string">ECJTU</span></span><br><span class="line"><span class="attr">school.website</span>=<span class="string">www.ecjtu.jx.cn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">department.name</span>=<span class="string">ECJTU1</span></span><br><span class="line"><span class="attr">department.website</span>=<span class="string">www.ecjtu1.jx.cn</span></span><br></pre></td></tr></table></figure><p>如何把school和department的name和website属性分别存到他们对应的构造体里面呢。</p><p>我们在application.java同级目录或下级目录中分别创建school.java和department.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.springboot008customerconfiguration.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//将此类交给Spring容器进行管理</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;school&quot;)</span><span class="comment">//核心配置文件里面的前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">School</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWebsite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWebsite</span><span class="params">(String website)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.website = website;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.springboot008customerconfiguration.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;department&quot;)</span><span class="comment">//核心配置文件里面的前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWebsite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWebsite</span><span class="params">(String website)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.website = website;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再创建一个IndexController.java 来输出结果。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.springboot008customerconfiguration.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello1</span> <span class="operator">=</span> <span class="string">&quot;hello :&quot;</span> + department.getName() + <span class="string">&quot; Website : http://&quot;</span> + department.getWebsite();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello2</span> <span class="operator">=</span> <span class="string">&quot;hello :&quot;</span> + school.getName() + <span class="string">&quot; Website : http://&quot;</span> + school.getWebsite();</span><br><span class="line">        <span class="keyword">return</span> hello2 + <span class="string">&quot;&lt;br&gt;&quot;</span> + hello1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们在浏览器输入<a target="_blank" rel="noopener" href="http://localhost:8080/say">http://localhost:8080/say</a> 就可以得到如下结果：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hello :ECJTU Website : http://www.ecjtu.jx.cn</span><br><span class="line">hello :ECJTU1 Website : http://www.ecjtu1.jx.cn</span><br></pre></td></tr></table></figure><blockquote><p>此方法只能获取核心配置文件中有前缀的属性，若没有前缀的单独属性必须要用0x03的方法！！</p></blockquote><h3 id="0x0401-使用-ConfigurationProperties注解出现警告处理"><a href="#0x0401-使用-ConfigurationProperties注解出现警告处理" class="headerlink" title="0x0401 使用@ConfigurationProperties注解出现警告处理:"></a>0x0401 使用@ConfigurationProperties注解出现警告处理:</h3><p>当我们配置好School.java和Department.java这两个文件的时候IDEA上方会出现红色警告：</p><p><strong>未配置Spring Boot注解处理器</strong></p><p>但是这个并不影响我们代码的执行，如果要消除该警告，只需要在pom.xml配置文件中添加一个依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就没有上述的警告了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 学习笔记 01</title>
      <link href="/2021/08/01/cfb2a88933dc-q1jun/"/>
      <url>/2021/08/01/cfb2a88933dc-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记-01"><a href="#Spring-Boot学习笔记-01" class="headerlink" title="Spring Boot学习笔记 01"></a>Spring Boot学习笔记 01</h1><p>这是暑期学习第二天，从今天起我开始学习关于SpringBoot的框架，并将学习的内容写到博客上，供大家一起学习！</p><h2 id="0x01-Spring-Boot简介"><a href="#0x01-Spring-Boot简介" class="headerlink" title="0x01 Spring Boot简介"></a>0x01 Spring Boot简介</h2><p>​    Spring Boot是Spring家族中的一个全新的框架，它用来简化Spring应用程序的创建和开发过程，也可以说Spring Boot能简化我们之前采用（SSM）Spring+SpringMVC+Mybatis框架进行开发的过程。</p><p>​    在以往我们采用SSM框架进行开发的时候，搭建和整合三大框架，我们需要做很多工作，比如配置web.xml，配置Spring，配置mybatis，并将他们整合在一起，而SpringBoot框架对此开发过程进行了革命性的颠覆，完全抛弃了繁琐的xml配置过程，采用了大量的默认配置简化我们的开发过程。</p><p>​    所以采用SpringBoot可以非常容易和快速地创建基于Spring框架的应用程序，它让编码变简单了，配置变简单了，部署变简单了，监控变简单了。正因为Spring Boot化繁为简，让开发变得极其简单和快速，所以在业界变得备受关注。</p><h2 id="0x02-Spring-Boot的特性"><a href="#0x02-Spring-Boot的特性" class="headerlink" title="0x02 Spring Boot的特性"></a>0x02 Spring Boot的特性</h2><ul><li>能够快速创建基于Spring的应用程序</li><li>能够直接使用Java Main方法启动内嵌的Tomcat 服务器运行Spring Boot程序，不需要部署War包文件</li><li>提供约定的starter POM来简化 Maven 配置，让Maven配置变得简单</li><li>自动化配置，根据项目的Maven依赖配置，SpringBoot自动配置Spring、SpringMVC等等</li><li>提供了程序的健康检查等功能</li><li>基本可以完全不使用XML配置文件，采用注解配置</li></ul><h2 id="0x03-Spring-Boot-四大核心"><a href="#0x03-Spring-Boot-四大核心" class="headerlink" title="0x03 Spring Boot 四大核心"></a>0x03 Spring Boot 四大核心</h2><ul><li><p>自动配置</p></li><li><p>起步依赖</p></li><li><p>Actuator（健康检测）</p></li><li><p>命令行界面</p></li></ul><h2 id="0x04-创建SpringBoot项目"><a href="#0x04-创建SpringBoot项目" class="headerlink" title="0x04 创建SpringBoot项目"></a>0x04 创建SpringBoot项目</h2><p>IDEA新建SpringBoot项目，勾选Spring Web。</p><p>创建后SpringBoot项目中的POM.xml文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot父工程GAV坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当前项目的GAV坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot001<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--编译级别--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringBoot框架Web项目起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringBoot框架测试起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            SpringBoot项目打包编译的插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot项目启动入口类：</p><p>src\main\java\com.example.springboot.springbootfirst\Springboot001Application.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.springbootfirst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//Springboot项目启动入口类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//SpringBoot核心注解，主要用于开启spring自动配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot001Application</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot001Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src\main\resources<ul><li>static(文件夹)：图标等静态资源放入此文件夹</li><li>templates(文件夹)：模板，前端模板引擎放入此文件夹Thyme leaf.html（百叶箱）</li><li>application.properties：SpringBoot的核心配置文件</li></ul></li></ul><blockquote><p>  Springboot项目代码必须放到Application(Springboot001Application)类所在的同级目录或者下级目录</p></blockquote><p>我们在com.example.springboot.springbootfirst下创建一个package Web，再在web这个包里面创建一个java类IndexController：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.springbootfirst.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/springboot/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello ,Springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成之后我们编译Springboot001Application这个入口，观察控制台输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.5.2)</span><br><span class="line"></span><br><span class="line">2021-07-21 17:09:53.836  INFO 10616 --- [           main] c.s.s.Springboot002SpringMvcApplication  : Starting Springboot002SpringMvcApplication using Java 11.0.10 on LAPTOP-47F3TRCJ with PID 10616 (C:\Users\段雅婷\Desktop\SpringBoot\springboot002-springMVC\target\classes started by 段雅婷 in C:\Users\段雅婷\Desktop\SpringBoot)</span><br><span class="line">2021-07-21 17:09:53.836  INFO 10616 --- [           main] c.s.s.Springboot002SpringMvcApplication  : No active profile set, falling back to default profiles: default</span><br><span class="line">2021-07-21 17:09:54.634  INFO 10616 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2021-07-21 17:09:54.650  INFO 10616 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2021-07-21 17:09:54.650  INFO 10616 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.48]</span><br><span class="line">2021-07-21 17:09:54.697  INFO 10616 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2021-07-21 17:09:54.697  INFO 10616 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 830 ms</span><br><span class="line">2021-07-21 17:09:54.931  INFO 10616 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;</span><br><span class="line">2021-07-21 17:09:54.931  INFO 10616 --- [           main] c.s.s.Springboot002SpringMvcApplication  : Started Springboot002SpringMvcApplication in 1.409 seconds (JVM running for 2.861)</span><br><span class="line">2021-07-21 17:10:38.256  INFO 10616 --- [nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1626485908,1626487413,1626505943] that contained an invalid cookie. That cookie will be ignored.</span><br><span class="line"> Note: further occurrences of this error will be logged at DEBUG level.</span><br><span class="line">2021-07-21 17:10:38.261  INFO 10616 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;</span><br><span class="line">2021-07-21 17:10:38.261  INFO 10616 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#x27;dispatcherServlet&#x27;</span><br><span class="line">2021-07-21 17:10:38.261  INFO 10616 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 其中我们发现一条提示信息Tomcat started on port(s): 8080 (http) with context path ‘’</p><p>打开浏览器输入localhost:8080&#x2F;springboot&#x2F;say，观察到浏览器界面跳转到输出字符串“Hello ,Springboot!”。</p><p>这里我们完成了SpringBoot项目的搭建。</p><h2 id="0x05-使用SpringBoot的核心配置文件"><a href="#0x05-使用SpringBoot的核心配置文件" class="headerlink" title="0x05 使用SpringBoot的核心配置文件"></a>0x05 使用SpringBoot的核心配置文件</h2><p>上面我们说，其中一条信息为Tomcat started on port(s): 8080 (http) with context path ‘’，我们要如何修改这里的端口号和上下文默认路径呢？</p><p>我们打开src\main\resources中的<code>application.properties</code>文件并添加：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置内嵌Tomcat端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/springboot</span></span><br></pre></td></tr></table></figure><p>再重启Springboot项目，观察控制台输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.5.2)</span><br><span class="line"></span><br><span class="line">2021-07-21 17:32:42.607  INFO 15028 --- [           main] .s.s.Springboot003ContextPathApplication : Starting Springboot003ContextPathApplication using Java 1.8.0_181 on LAPTOP-47F3TRCJ with PID 15028 (C:\Users\段雅婷\Desktop\SpringBoot\springboot003-context-path\target\classes started by 段雅婷 in C:\Users\段雅婷\Desktop\SpringBoot)</span><br><span class="line">2021-07-21 17:32:42.610  INFO 15028 --- [           main] .s.s.Springboot003ContextPathApplication : No active profile set, falling back to default profiles: default</span><br><span class="line">2021-07-21 17:32:43.477  INFO 15028 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8081 (http)</span><br><span class="line">2021-07-21 17:32:43.493  INFO 15028 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2021-07-21 17:32:43.493  INFO 15028 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.48]</span><br><span class="line">2021-07-21 17:32:43.554  INFO 15028 --- [           main] o.a.c.c.C.[.[localhost].[/springboot]    : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2021-07-21 17:32:43.554  INFO 15028 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 893 ms</span><br><span class="line">2021-07-21 17:32:43.775  INFO 15028 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8081 (http) with context path &#x27;/springboot&#x27;</span><br><span class="line">2021-07-21 17:32:43.775  INFO 15028 --- [           main] .s.s.Springboot003ContextPathApplication : Started Springboot003ContextPathApplication in 1.607 seconds (JVM running for 2.537)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到<code> Tomcat started on port(s): 8081 (http) with context path &#39;/springboot&#39;</code> 修改端口号和默认路径成功。</p><p>如果我们要访问<a target="_blank" rel="noopener" href="http://localhost:8080/springboot/say">http://localhost:8080/springboot/say</a> 则要改成 <a target="_blank" rel="noopener" href="http://localhost:8080/springboot/springboot/say">http://localhost:8080/springboot/springboot/say</a> ，因为添加了默认路径。</p><blockquote><p>核心配置文件只能有一个</p></blockquote><h3 id="0x0501-使用-yml或-yaml的核心配置文件"><a href="#0x0501-使用-yml或-yaml的核心配置文件" class="headerlink" title="0x0501 使用.yml或.yaml的核心配置文件"></a>0x0501 使用.yml或.yaml的核心配置文件</h3><p>将application.properties换成application.yml:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>将application.properties换成application.yaml:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>三种格式的配置文件都能使用，但是只能存在一个</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php学习笔记 01</title>
      <link href="/2021/03/19/444faf94523a-q1jun/"/>
      <url>/2021/03/19/444faf94523a-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="php学习笔记-01"><a href="#php学习笔记-01" class="headerlink" title="php学习笔记 01"></a>php学习笔记 01</h1><blockquote><p>小知识：<code>PHP是世界上最好的语言</code>这句话是怎么来的？<br>PHP是世界上最好的语言这句话，最早出现在2001年7月的PHP官方文档中<br>原因很明确，只是说PHP是web开发中的最好的语言，但经过流传之后就变成了PHP是世界上最好的语言了</p></blockquote><h2 id="0x01-php的输出"><a href="#0x01-php的输出" class="headerlink" title="0x01 php的输出"></a>0x01 php的输出</h2><p>php的输出有以下几个语句：</p><ul><li>echo()</li><li>print()</li><li>print_r()</li><li>var_dunp()</li></ul><h3 id="0x0101-echo"><a href="#0x0101-echo" class="headerlink" title="0x0101 echo() :"></a>0x0101 echo() :</h3><p>可以一次输出多个值，多个值之间用逗号分隔。但是echo()是语言结构(<em>language construct</em>)，并__不是真正的函数__，因此不能作为表达式的一部分来使用。echo()是php的内部指令，不是函数，且__无返回值__。</p><h3 id="0x0102-print"><a href="#0x0102-print" class="headerlink" title="0x0102 print():"></a>0x0102 print():</h3><p>函数print()打印一个值(它的参数)，如果字符串成功显示则返回true，否则返回false。只能打印出简单类型变量的值（如int、string），__有返回值__。</p><h3 id="0x0103-print-r-和var-dump"><a href="#0x0103-print-r-和var-dump" class="headerlink" title="0x0103 print_r()和var_dump():"></a>0x0103 print_r()和var_dump():</h3><p>print_r()可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。但print_r()输出布尔值和NULL的结果没有意义，因为都是打印”\n”。因此用var_dump()函数更适合调试。print_r是函数，可以打印出比较复杂的变量（如数组、对象），有返回值。</p><h2 id="0x02-php的注释"><a href="#0x02-php的注释" class="headerlink" title="0x02 php的注释"></a>0x02 php的注释</h2><p>php的注释有三种：<code>//内容</code>，<code>/*内容*/</code>，<code>#内容</code>。</p><blockquote><p>php的注释不会在前端页面的源代码中显示，HTML的注释则会显示在前端页面的源代码中(因为前端页面就是html😂)。</p></blockquote><h3 id="0x0201-单行注释："><a href="#0x0201-单行注释：" class="headerlink" title="0x0201 单行注释："></a>0x0201 单行注释：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是php的单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这也是php的单行注释(不建议使用)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x0202-多行注释："><a href="#0x0202-多行注释：" class="headerlink" title="0x0202 多行注释："></a>0x0202 多行注释：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是</span></span><br><span class="line"><span class="comment">php</span></span><br><span class="line"><span class="comment">的多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="0x03-php的数据类型"><a href="#0x03-php的数据类型" class="headerlink" title="0x03 php的数据类型"></a>0x03 php的数据类型</h3><p>php有八大数据类型，如下：</p><ul><li>四种标量类型：布尔类型、整型、浮点型、字符串型。</li><li>两种复合类型：数组、对象。</li><li>两种特殊类型：资源、NULL。</li></ul><h2 id="php的变量"><a href="#php的变量" class="headerlink" title="php的变量"></a>php的变量</h2><ol><li>php中的变量大小写敏感</li><li>变量的命名只能以下划线开头或者字母开头，不能以数字开头且不包含特殊字符。</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// php的变量命名</span></span><br><span class="line"><span class="variable">$_test</span></span><br><span class="line"><span class="variable">$hello</span></span><br><span class="line"><span class="variable">$_123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>php有九大超全局变量(<strong>系统变量</strong>):</p><ul><li><strong>$GLOBALS</strong></li><li><strong>$_SERVER</strong></li><li><strong>$_GET</strong></li><li><strong>$_POST</strong></li><li><strong>$_REQUEST</strong></li><li><strong>$_COOKIE</strong></li><li><strong>$_SESSION</strong></li><li><strong>$_FILES</strong></li><li><strong>$_ENV</strong></li></ul><p>PHP 变量作用域<br>变量的作用域是脚本中变量可被引用&#x2F;使用的部分。</p><p>PHP 有四种不同的变量作用域：</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> php </tag>
            
            <tag> 超文本预处理器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php超文本预处理器</title>
      <link href="/2021/03/18/762f1d5327cf-q1jun/"/>
      <url>/2021/03/18/762f1d5327cf-q1jun/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP超文本预处理器"><a href="#PHP超文本预处理器" class="headerlink" title="PHP超文本预处理器"></a>PHP超文本预处理器</h1><h2 id="0x01-PHP-变量"><a href="#0x01-PHP-变量" class="headerlink" title="0x01 PHP 变量"></a>0x01 PHP 变量</h2><p>与代数类似，可以给 PHP 变量赋予某个值（x&#x3D;5）或者表达式（z&#x3D;x+y）。</p><p>变量可以是很短的名称（如 x 和 y）或者更具描述性的名称（如 age、carname、totalvolume）。</p><p>PHP 变量规则：</p><ul><li>变量以 $ 符号开始，后面跟着变量的名称</li><li>变量名必须以字母或者下划线字符开始</li><li>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</li><li>变量名不能包含空格</li><li>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</li></ul><h2 id="0x02-创建（声明）PHP-变量"><a href="#0x02-创建（声明）PHP-变量" class="headerlink" title="0x02 创建（声明）PHP 变量"></a>0x02 创建（声明）PHP 变量</h2><p>PHP 没有声明变量的命令。</p><p>变量在您第一次赋值给它的时候被创建</p><blockquote><p>与Python类似</p></blockquote><p><strong>PHP 是一门弱类型语言</strong></p><p>不必向 PHP 声明该变量的数据类型。<br>PHP 会根据变量的值，自动把变量转换为正确的数据类型。<br>在强类型的编程语言中，我们必须在使用变量前先声明（定义）变量的类型和名称。</p><h2 id="0x03-PHP-变量作用域"><a href="#0x03-PHP-变量作用域" class="headerlink" title="0x03 PHP 变量作用域"></a>0x03 PHP 变量作用域</h2><p>变量的作用域是脚本中变量可被引用&#x2F;使用的部分。</p><p>PHP 有四种不同的变量作用域：</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><blockquote><p>可以在不同函数中使用相同的变量名称，因为这些函数内定义的变量名是局部变量，只作用于该函数内。</p></blockquote><h3 id="0x0301-PHP-global-关键字"><a href="#0x0301-PHP-global-关键字" class="headerlink" title="0x0301 PHP global 关键字"></a>0x0301 PHP global 关键字</h3><p>global 关键字用于函数内访问全局变量。</p><p>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$x</span>,<span class="variable">$y</span>;</span><br><span class="line">    <span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>PHP 将所有全局变量存储在一个名为 $GLOBALS[<em>index</em>] 的数组中。 <em>index</em> 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</p><p>上面的实例可以写成这样：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>]=<span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>]+<span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0302-Static-作用域"><a href="#0x0302-Static-作用域" class="headerlink" title="0x0302 Static 作用域"></a>0x0302 Static 作用域</h3><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。</p><p>要做到这一点，请在您第一次声明变量时使用 <strong>static</strong> 关键字：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">static</span> <span class="variable">$x</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="variable">$x</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0303-PHP-echo-和-print-语句"><a href="#0x0303-PHP-echo-和-print-语句" class="headerlink" title="0x0303 PHP echo 和 print 语句"></a>0x0303 PHP echo 和 print 语句</h3><p>echo 和 print 区别:</p><ul><li>echo - 可以输出一个或多个字符串</li><li>print - 只允许输出一个字符串，返回值总为 1</li></ul><p><strong>提示：</strong>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p><h2 id="0x04-PHP-数据类型"><a href="#0x04-PHP-数据类型" class="headerlink" title="0x04 PHP 数据类型"></a>0x04 PHP 数据类型</h2><p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）</p><p>一个<strong>字符串</strong>是一串字符的序列，就像 “Hello world!”。</p><p><strong>整数</strong>是一个没有小数的数字。</p><p>整数规则:</p><ul><li>整数必须至少有一个数字 (0-9)</li><li>整数不能包含逗号或空格</li><li>整数是没有小数点的</li><li>整数可以是正数或负数</li><li>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。</li></ul><p><strong>浮点数</strong>是带小数部分的数字，或是指数形式。</p><p><strong>布尔型</strong>可以是 TRUE 或 FALSE。</p><p>$x&#x3D;true;<br>$y&#x3D;false;</p><p>布尔型通常用于条件判断。在接下来的章节中你会学到更多关于条件控制的教程。</p><p><strong>数组</strong>可以在一个变量中存储多个值。</p><p>在以下实例中创建了一个数组， 然后使用 PHP var_dump() 函数返回数组的数据类型和值：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$cars</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123; [<span class="number">0</span>]=&gt; <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Volvo&quot;</span> [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;BMW&quot;</span> [<span class="number">2</span>]=&gt; <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;Toyota&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>对象</strong> 数据类型也可以用于存储数据。</p><p>在 PHP 中，对象必须声明。</p><p>首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$color</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"><span class="variable">$color</span>=<span class="string">&quot;green&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;color = <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">what_color</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>NULL 值</strong>表示变量没有值。NULL 是数据类型为 NULL 的值。</p><p>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。</p><p>可以通过设置变量值为 NULL 来清空变量数据</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> php </tag>
            
            <tag> 超文本预处理器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
